<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kyrie17&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://kyrie17.github.io/"/>
  <updated>2023-12-13T15:11:11.970Z</updated>
  <id>https://kyrie17.github.io/</id>
  
  <author>
    <name>Kyrie17</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>算法包类加载异常问题排查</title>
    <link href="https://kyrie17.github.io/2023/12/13/%E7%AE%97%E6%B3%95%E5%8C%85%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/"/>
    <id>https://kyrie17.github.io/2023/12/13/算法包类加载异常问题排查/</id>
    <published>2023-12-13T15:03:24.000Z</published>
    <updated>2023-12-13T15:11:11.970Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="插件发送jdq消息失败"><a href="#插件发送jdq消息失败" class="headerlink" title="插件发送jdq消息失败"></a>插件发送jdq消息失败</h2><p>异常：java.lang.RuntimeException: java.lang.ClassCastException: com.jd.bdp.jdw.avro.JdwData cannot be cast to com.jd.bdp.jdw.avro.JdwData</p><p>神机sdk发送Jdq消息代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(ShenJiMessage shenJiMessage)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (shenJiMessage.getText() == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"消息内容不能为空"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] data = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (MqMessageType.STRING.equals(messageType)) &#123;</span><br><span class="line">            String text = (String)shenJiMessage.getText();</span><br><span class="line">            data = text.getBytes();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (MqMessageType.JDW_DATA.equals(messageType)) &#123;</span><br><span class="line">            <span class="comment">// 在此行出现异常！！</span></span><br><span class="line">            JdwData text = (JdwData) shenJiMessage.getText();</span><br><span class="line">            data = serializer.toBytes(text);</span><br><span class="line">        &#125;</span><br><span class="line">        producer.send(<span class="keyword">new</span> ProducerRecord&lt;&gt;(shenJiMessage.getTopic(), <span class="keyword">new</span> Bytes(data)), (metadata, exception) -&gt; &#123;&#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.error(<span class="string">"发送jdq消息异常"</span>, e);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>猜测类加载器shenJiMessage.getText()类加载器和声明JdwData类加载器不一致，分别打印下类加载器看看：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(ShenJiMessage shenJiMessage)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (shenJiMessage.getText() == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"消息内容不能为空"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">byte</span>[] data = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (MqMessageType.STRING.equals(messageType)) &#123;</span><br><span class="line">            String text = (String)shenJiMessage.getText();</span><br><span class="line">            data = text.getBytes();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (MqMessageType.JDW_DATA.equals(messageType)) &#123;</span><br><span class="line">            JdwData jdwData = <span class="keyword">new</span> JdwData();</span><br><span class="line">            ClassLoader classLoader = shenJiMessage.getText().getClass().getClassLoader();</span><br><span class="line">            ClassLoader classLoader1 = jdwData.getClass().getClassLoader();</span><br><span class="line">            log.info(<span class="string">"send message, classLoader:&#123;&#125;, classLoader1:&#123;&#125;"</span>, classLoader, classLoader1);</span><br><span class="line">            JdwData text = (JdwData) shenJiMessage.getText();</span><br><span class="line">            data = serializer.toBytes(text);</span><br><span class="line">        &#125;</span><br><span class="line">        producer.send(<span class="keyword">new</span> ProducerRecord&lt;&gt;(shenJiMessage.getTopic(), <span class="keyword">new</span> Bytes(data)), (metadata, exception) -&gt; &#123;&#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.error(<span class="string">"发送jdq消息异常"</span>, e);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>日志：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2023-12-13 15:03:49.928[INFO ]send message, classLoader:org.pf4j.PluginClassLoader@57e11696, classLoader1:sun.misc.Launcher$AppClassLoader@14dad5dc[com.jdl.shenji.sdk.framework.ioc.mq.jdq.ShenJiJdqProducer.send:42]</span><br></pre></td></tr></table></figure></p><p>和猜想一致，shenJiMessage.getText()使用了插件类加载器，JdwData使用AppClassLoader。</p><h2 id="StringUtils找不到compare方法"><a href="#StringUtils找不到compare方法" class="headerlink" title="StringUtils找不到compare方法"></a>StringUtils找不到compare方法</h2><p>异常：java.lang.NoSuchMethodError: org.apache.commons.lang3.StringUtils.compare(Ljava/lang/String;Ljava/lang/String;)</p><h1 id="神机类加载器加载规则"><a href="#神机类加载器加载规则" class="headerlink" title="神机类加载器加载规则"></a>神机类加载器加载规则</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/plugin_classloader01.png" alt="plugin_classloader01" title>                </div>                <div class="image-caption">plugin_classloader01</div>            </figure><ol><li>打破双亲委派机制：插件中的类会先由插件类加载器进行加载，如果判断插件类加载器加载不了再交给父类加载器(AppClassLoader)进行加载</li><li>插件类加载器findClass(String name)逻辑，根据类全限定名在插件路径下搜索是否有此类</li></ol><h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><ol><li>依据目前插件类加载的规则，我们认为是插件中引入了jdwdata、commons-lang3的依赖，但发现插件pom文件中对应的依赖的scope都是provided的，且在行云部署对应插件目录中却没有找到jdwdata、commons-lang3两个jar包</li><li>我们转换思路，是否插件中有和com.jd.bdp.jdw.avro.JdwData、org.apache.commons.lang3.StringUtils相同的类全限定名的类。发现有一个新引入的依赖rapp-common，打开jar包便可以发现端倪</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/plugin_classloader02.png" alt="plugin_classloader02" title>                </div>                <div class="image-caption">plugin_classloader02</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/plugin_classloader03.png" alt="plugin_classloader03" title>                </div>                <div class="image-caption">plugin_classloader03</div>            </figure><ol start="3"><li>结合类加载的规则com.jd.bdp.jdw.avro.JdwData是rapp-common中的类，而且是由PluginClassLoader加载的，所以出现了ClassCastException</li><li>org.apache.commons.lang3.StringUtils是rapp-common中的类，方法中缺少了compare方法，所以出现NoSuchMethodError</li></ol><h1 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h1><p>rapp-common这个包是有问题的，重写了大量第三方类且使用了相同的包路径，如果项目中还使用了例如jdwdata、commons-lang3这些包，就会出现类冲突等问题。</p><p>插件中使用rapp-common，目的是使用com.jdl.rapp.common.util.CharSequenceMapUtils#stringMap2SequenceMap工具方法将Map&lt;String, String&gt;转换为Map&lt;CharSequence, CharSequence&gt;。那么可以将类CharSequenceMapUtils复制插件中，不引入rapp-common。</p><p>这样com.jd.bdp.jdw.avro.JdwData会交由AppClassLoader加载，org.apache.commons.lang3.StringUtils就路由到commons-lang3包中正确代码。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h1&gt;&lt;h2 id=&quot;插件发送jdq消息失败&quot;&gt;&lt;a href=&quot;#插件发送jdq消息失败&quot; class=&quot;headerlink&quot; title=&quot;插件发
      
    
    </summary>
    
      <category term="问题排查" scheme="https://kyrie17.github.io/categories/%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/"/>
    
    
      <category term="ClassLoader" scheme="https://kyrie17.github.io/tags/ClassLoader/"/>
    
      <category term="双亲委派机制" scheme="https://kyrie17.github.io/tags/%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%9C%BA%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>JSF线程阻塞问题排查</title>
    <link href="https://kyrie17.github.io/2023/11/12/JSF%E7%BA%BF%E7%A8%8B%E9%98%BB%E5%A1%9E%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/"/>
    <id>https://kyrie17.github.io/2023/11/12/JSF线程阻塞问题排查/</id>
    <published>2023-11-12T14:28:48.000Z</published>
    <updated>2023-12-13T14:59:34.347Z</updated>
    
    <content type="html"><![CDATA[<h1 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h1><p>在压测一个新上线服务核心接口的时候，出现接口响应时间、TPS不满足预期的问题。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/jsf_block01.png" alt="jsf_block01" title>                </div>                <div class="image-caption">jsf_block01</div>            </figure></p><h1 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h1><p>通过Jstack发现大量JSF线程处于阻塞状态，都在ClassLoader.loadClass方法中等待锁，同时可以看到是由log4j触发的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&quot;JSF-BZ-22000-31-T-944&quot; #1672 daemon prio=5 os_prio=0 tid=0x00007f3234047800 nid=0x72f5 waiting for monitor entry [0x00007f2d9ece9000]</span><br><span class="line">   java.lang.Thread.State: BLOCKED (on object monitor)</span><br><span class="line">at java.lang.ClassLoader.loadClass(ClassLoader.java:404)</span><br><span class="line">- waiting to lock &lt;0x00000006c3893e80&gt; (a java.lang.Object)</span><br><span class="line">at sun.misc.Launcher$AppClassLoader.loadClass(Launcher.java:331)</span><br><span class="line">at java.lang.ClassLoader.loadClass(ClassLoader.java:357)</span><br><span class="line">at org.apache.logging.log4j.core.impl.ThrowableProxyHelper.loadClass(ThrowableProxyHelper.java:205)</span><br><span class="line">at org.apache.logging.log4j.core.impl.ThrowableProxyHelper.toExtendedStackTrace(ThrowableProxyHelper.java:112)</span><br><span class="line"></span><br><span class="line">// ...</span><br><span class="line"></span><br><span class="line">   Locked ownable synchronizers:</span><br><span class="line">- &lt;0x00000006c8cd5570&gt; (a java.util.concurrent.ThreadPoolExecutor$Worker)</span><br></pre></td></tr></table></figure></p><p>从堆栈可以看出，在log4j打印日志的过程中，调用ClassLoader.loadClass方法，导致线程Block。那就带来两个问题：</p><ol><li>为什么log4j打印异常堆栈，会触发ClassLoader.loadClass方法的调用？</li><li>ClassLoader.loadClass方法为什么需要加锁？</li></ol><h2 id="简化代码"><a href="#简化代码" class="headerlink" title="简化代码"></a>简化代码</h2><p>我们简化一下线上代码，让大家更加容易跟上我们的思路。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MathUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a / b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接口的主体逻辑是通过反射调用目标方法MathUtil.div()<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">50</span>; i++) &#123;</span><br><span class="line">            Thread thread = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    </span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                    <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">                        LogTest.run();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(<span class="string">"time:"</span> + (System.currentTimeMillis() - start));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            thread.start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            callDiv(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"div error"</span>, e);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">callDiv</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Method method = MathUtil.class.getMethod(<span class="string">"div"</span>, <span class="keyword">new</span> Class[]&#123;<span class="keyword">int</span>.class, <span class="keyword">int</span>.class&#125;);</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">int</span>) method.invoke(<span class="keyword">null</span>, a, b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="log4j打印异常堆栈机制"><a href="#log4j打印异常堆栈机制" class="headerlink" title="log4j打印异常堆栈机制"></a>log4j打印异常堆栈机制</h2><p>在上面的例子中，写了两个打印异常堆栈的方式，我们先看一下这两种方式输出内容的差异。<br>log4j的Logger.error()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">2023-11-11 11:25:00.010[ERROR]div error[com.jdl.shenji.sdk.predict.LogTest.run:42][]- </span><br><span class="line">java.lang.reflect.InvocationTargetException: null</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_161]</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_161]</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_161]</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_161]</span><br><span class="line">at com.jdl.shenji.sdk.predict.LogTest.callDiv(LogTest.java:49) ~[classes/:?]</span><br><span class="line">at com.jdl.shenji.sdk.predict.LogTest.run(LogTest.java:40) ~[classes/:?]</span><br><span class="line">at com.jdl.shenji.sdk.predict.LogTest.access$000(LogTest.java:19) ~[classes/:?]</span><br><span class="line">at com.jdl.shenji.sdk.predict.LogTest$1.run(LogTest.java:29) ~[classes/:?]</span><br><span class="line">at java.lang.Thread.run(Thread.java:748) ~[?:1.8.0_161]</span><br><span class="line">Caused by: java.lang.ArithmeticException: / by zero</span><br><span class="line">at com.jdl.shenji.sdk.predict.MathUtil.div(MathUtil.java:10) ~[classes/:?]</span><br><span class="line">... 9 more</span><br></pre></td></tr></table></figure></p><p>e.printStackTrace()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">java.lang.reflect.InvocationTargetException</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)</span><br><span class="line">at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)</span><br><span class="line">at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">at java.lang.reflect.Method.invoke(Method.java:498)</span><br><span class="line">at com.jdl.shenji.sdk.predict.LogTest.callDiv(LogTest.java:50)</span><br><span class="line">at com.jdl.shenji.sdk.predict.LogTest.run(LogTest.java:40)</span><br><span class="line">at com.jdl.shenji.sdk.predict.LogTest.access$000(LogTest.java:19)</span><br><span class="line">at com.jdl.shenji.sdk.predict.LogTest$1.run(LogTest.java:29)</span><br><span class="line">at java.lang.Thread.run(Thread.java:748)</span><br><span class="line">Caused by: java.lang.ArithmeticException: / by zero</span><br><span class="line">at com.jdl.shenji.sdk.predict.MathUtil.div(MathUtil.java:10)</span><br><span class="line">... 9 more</span><br></pre></td></tr></table></figure></p><p>对比上面两种方式的结果，会发现Logger.error打印的堆栈信息更加完善，在每行堆栈信息后面多了对应类的辅助信息。JDK包中的类打印了JDK版本[?:1.8.0_161]，class path下的类打印了[classes/:?]，实际上如果存在其他jar文件中的类，还会打印类所在的jar文件名如[demo-1.0-SNAPSHOT.jar:?]。</p><p>log4j对应构建辅助信息在org.apache.logging.log4j.core.impl.ThrowableProxyHelper#toCacheEntry中<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> CacheEntry <span class="title">toCacheEntry</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; callerClass, <span class="keyword">final</span> <span class="keyword">boolean</span> exact)</span> </span>&#123;</span><br><span class="line">    String location = <span class="string">"?"</span>;</span><br><span class="line">    String version = <span class="string">"?"</span>;</span><br><span class="line">    ClassLoader lastLoader = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (callerClass != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            CodeSource source = callerClass.getProtectionDomain().getCodeSource();</span><br><span class="line">            <span class="keyword">if</span> (source != <span class="keyword">null</span>) &#123;</span><br><span class="line">                URL locationURL = source.getLocation();</span><br><span class="line">                <span class="keyword">if</span> (locationURL != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    String str = locationURL.toString().replace(<span class="string">'\\'</span>, <span class="string">'/'</span>);</span><br><span class="line">                    <span class="keyword">int</span> index = str.lastIndexOf(<span class="string">"/"</span>);</span><br><span class="line">                    <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index == str.length() - <span class="number">1</span>) &#123;</span><br><span class="line">                        index = str.lastIndexOf(<span class="string">"/"</span>, index - <span class="number">1</span>);</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    location = str.substring(index + <span class="number">1</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var10) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        Package pkg = callerClass.getPackage();</span><br><span class="line">        <span class="keyword">if</span> (pkg != <span class="keyword">null</span>) &#123;</span><br><span class="line">            String ver = pkg.getImplementationVersion();</span><br><span class="line">            <span class="keyword">if</span> (ver != <span class="keyword">null</span>) &#123;</span><br><span class="line">                version = ver;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            lastLoader = callerClass.getClassLoader();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SecurityException var9) &#123;</span><br><span class="line">            lastLoader = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CacheEntry(<span class="keyword">new</span> ExtendedClassInfo(exact, location, version), lastLoader);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到想要获得类所在位置的辅助信息，需要拿到Class对象，而堆栈对象StackTraceElement定义的declaringClass是String类型，想要得到相应的Class对象，必须使用Classloader进行类加载，从而触发了Classloader.loadClass方法的执行。</p><h2 id="classload加载class锁机制"><a href="#classload加载class锁机制" class="headerlink" title="classload加载class锁机制"></a>classload加载class锁机制</h2><h3 id="1-classloader-loadClass加锁过程分析"><a href="#1-classloader-loadClass加锁过程分析" class="headerlink" title="1. classloader.loadClass加锁过程分析"></a>1. classloader.loadClass加锁过程分析</h3><p>Classload调用loadClass进行类加载的过程是线程安全的，loadClass的代码如下<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> Class&lt;?&gt; loadClass(String name, <span class="keyword">boolean</span> resolve)</span><br><span class="line">    <span class="keyword">throws</span> ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 加锁的地方！！</span></span><br><span class="line">    <span class="keyword">synchronized</span> (getClassLoadingLock(name)) &#123;</span><br><span class="line">        <span class="comment">// 下面的代码不是我们这次问题需要关注的哈，可以忽略</span></span><br><span class="line">        Class&lt;?&gt; c = findLoadedClass(name);</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">long</span> t0 = System.nanoTime();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (parent != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    c = parent.loadClass(name, <span class="keyword">false</span>);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    c = findBootstrapClassOrNull(name);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">                <span class="comment">// ClassNotFoundException thrown if class not found</span></span><br><span class="line">                <span class="comment">// from the non-null parent class loader</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (c == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// If still not found, then invoke findClass in order</span></span><br><span class="line">                <span class="comment">// to find the class.</span></span><br><span class="line">                <span class="keyword">long</span> t1 = System.nanoTime();</span><br><span class="line">                c = findClass(name);</span><br><span class="line">    </span><br><span class="line">                <span class="comment">// this is the defining class loader; record the stats</span></span><br><span class="line">                sun.misc.PerfCounter.getParentDelegationTime().addTime(t1 - t0);</span><br><span class="line">                sun.misc.PerfCounter.getFindClassTime().addElapsedTimeFrom(t1);</span><br><span class="line">                sun.misc.PerfCounter.getFindClasses().increment();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (resolve) &#123;</span><br><span class="line">            resolveClass(c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>synchronized加锁的对象是通过getClassLoadingLock返回的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> Object <span class="title">getClassLoadingLock</span><span class="params">(String className)</span> </span>&#123;</span><br><span class="line">    Object lock = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">if</span> (parallelLockMap != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Object newLock = <span class="keyword">new</span> Object();</span><br><span class="line">        lock = parallelLockMap.putIfAbsent(className, newLock);</span><br><span class="line">        <span class="keyword">if</span> (lock == <span class="keyword">null</span>) &#123;</span><br><span class="line">            lock = newLock;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> lock;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>通过分析getClassLoadingLock方法可以得出，loadClass的同步工作模式有两种</p><ul><li>串行，synchronized对象是Classloader的this对象，在串行模式下执行，当classloader在加载一个类的时候，其他线程要进行类加载的时候，都必须等待</li><li>并行，synchronized对象是从parallelLockMap中根据className查询得到的Object对象，在并行模式下执行，类名完全相同的类还是串行加载，类名不同的类之间是并行加载，加载过程互不影响，这样可以提供加载效率</li><li>可以通过调用ClassLoader.registerAsParallelCapable()方法注册为并行加载模式</li></ul><h3 id="2-classloader加载无效类效率问题"><a href="#2-classloader加载无效类效率问题" class="headerlink" title="2.classloader加载无效类效率问题"></a>2.classloader加载无效类效率问题</h3><p>由于Classloader的加载机制，当Classloader去加载一个他无法加载的类时，loadClass的效率就会变得非常低下，举例说明：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> COUNTER = <span class="number">100000</span>;</span><br><span class="line">    </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">            ClassLoader loader = ClassLoader.getSystemClassLoader();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++) &#123;</span><br><span class="line">                <span class="comment">// 存在的类</span></span><br><span class="line">                <span class="keyword">long</span> time1 = tryLoadClass(loader, <span class="string">"com.jdl.shenji.sdk.predict.StartupRunner"</span>);</span><br><span class="line">                <span class="comment">// 不存在的类</span></span><br><span class="line">                <span class="keyword">long</span> time2 = tryLoadClass(loader, <span class="string">"org.example.sourcecode.threadblock.TryLoadClass2"</span>);</span><br><span class="line">    </span><br><span class="line">                System.out.println(time1 + <span class="string">" "</span> + time2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">tryLoadClass</span><span class="params">(ClassLoader classLoader, String classFullName)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; COUNTER; i++) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    classLoader.loadClass(classFullName);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> System.currentTimeMillis() - start;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>上面代码执行结果：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/jsf_block02.png" alt="jsf_block02" title>                </div>                <div class="image-caption">jsf_block02</div>            </figure></p><p>org.example.sourcecode.threadblock.TryLoadClass2这个类不存在，加载效率比加载存在的类慢了几十倍。<br>加载过程执行的越慢，高并发的条件下，就越可能发生线程Block情况。</p><h2 id="反射调用优化"><a href="#反射调用优化" class="headerlink" title="反射调用优化"></a>反射调用优化</h2><p>我们直接从method.invoke跟进来<br>java.lang.reflect.Method#invoke<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object obj, Object... args)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IllegalAccessException, IllegalArgumentException,</span></span><br><span class="line"><span class="function">       InvocationTargetException</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 校验访问权限，不是我们这次要看的重点，先跳过..</span></span><br><span class="line">    <span class="keyword">if</span> (!override) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!Reflection.quickCheckMemberAccess(clazz, modifiers)) &#123;</span><br><span class="line">            Class&lt;?&gt; caller = Reflection.getCallerClass();</span><br><span class="line">            checkAccess(caller, clazz, obj, modifiers);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 每个Method对象包含一个root对象，root对象里持有一个MethodAccessor对象</span></span><br><span class="line">    <span class="comment">// 我们获得的Method独享相当于一个root对象的镜像，所有这类Method共享root里的MethodAccessor对象</span></span><br><span class="line">    MethodAccessor ma = methodAccessor;</span><br><span class="line">    <span class="keyword">if</span> (ma == <span class="keyword">null</span>) &#123;</span><br><span class="line">        ma = acquireMethodAccessor();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ma.invoke(obj, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>MethodAccessor对象由ReflectionFactory方法生成<br>java.lang.reflect.Method#acquireMethodAccessor<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> MethodAccessor <span class="title">acquireMethodAccessor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// First check to see if one has been created yet, and take it</span></span><br><span class="line">    <span class="comment">// if so</span></span><br><span class="line">    MethodAccessor tmp = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (root != <span class="keyword">null</span>) tmp = root.getMethodAccessor();</span><br><span class="line">    <span class="keyword">if</span> (tmp != <span class="keyword">null</span>) &#123;</span><br><span class="line">        methodAccessor = tmp;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Otherwise fabricate one and propagate it up to the root</span></span><br><span class="line">        tmp = reflectionFactory.newMethodAccessor(<span class="keyword">this</span>);</span><br><span class="line">        setMethodAccessor(tmp);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>MethodAccessor有两个实现，一个是Java实现的，另一个是native实现的<br>sun.reflect.ReflectionFactory#newMethodAccessor<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> MethodAccessor <span class="title">newMethodAccessor</span><span class="params">(Method var1)</span> </span>&#123;</span><br><span class="line">    checkInitted();</span><br><span class="line">    <span class="keyword">if</span> (noInflation &amp;&amp; !ReflectUtil.isVMAnonymousClass(var1.getDeclaringClass())) &#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">new</span> MethodAccessorGenerator()).generateMethod(var1.getDeclaringClass(), var1.getName(), var1.getParameterTypes(), var1.getReturnType(), var1.getExceptionTypes(), var1.getModifiers());</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 一开始先是使用native的实现</span></span><br><span class="line">        NativeMethodAccessorImpl var2 = <span class="keyword">new</span> NativeMethodAccessorImpl(var1);</span><br><span class="line">        <span class="comment">// DelegatingMethodAccessorImpl实际上相当于一个代理，方便后续切换Java实现</span></span><br><span class="line">        DelegatingMethodAccessorImpl var3 = <span class="keyword">new</span> DelegatingMethodAccessorImpl(var2);</span><br><span class="line">        var2.setParent(var3);</span><br><span class="line">        <span class="keyword">return</span> var3;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>JDK使用了inflation的技巧，让方法在被反射调用时，前15次使用native的实现，等反射调用次数超过阈值时则生成一个Java的MethodAccessor实现类，以后对该方法的反射调用就会使用Java的实现。这段逻辑在NativeMethodAccessorImpl的invoke方法中实现。<br>sun.reflect.NativeMethodAccessorImpl#invoke<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object var1, Object[] var2)</span> <span class="keyword">throws</span> IllegalArgumentException, InvocationTargetException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (++<span class="keyword">this</span>.numInvocations &gt; ReflectionFactory.inflationThreshold() &amp;&amp; !ReflectUtil.isVMAnonymousClass(<span class="keyword">this</span>.method.getDeclaringClass())) &#123;</span><br><span class="line">        MethodAccessorImpl var3 = (MethodAccessorImpl)(<span class="keyword">new</span> MethodAccessorGenerator()).generateMethod(<span class="keyword">this</span>.method.getDeclaringClass(), <span class="keyword">this</span>.method.getName(), <span class="keyword">this</span>.method.getParameterTypes(), <span class="keyword">this</span>.method.getReturnType(), <span class="keyword">this</span>.method.getExceptionTypes(), <span class="keyword">this</span>.method.getModifiers());</span><br><span class="line">        <span class="keyword">this</span>.parent.setDelegate(var3);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> invoke0(<span class="keyword">this</span>.method, var1, var2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们跟进来看下是如何生成一个MethodAccessor的Java对象的<br>sun.reflect.MethodAccessorGenerator#generateMethod<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> MethodAccessor <span class="title">generateMethod</span><span class="params">(Class&lt;?&gt; var1, String var2, Class&lt;?&gt;[] var3, Class&lt;?&gt; var4, Class&lt;?&gt;[] var5, <span class="keyword">int</span> var6)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (MethodAccessor)<span class="keyword">this</span>.generate(var1, var2, var3, var4, var5, var6, <span class="keyword">false</span>, <span class="keyword">false</span>, (Class)<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> MagicAccessorImpl <span class="title">generate</span><span class="params">(<span class="keyword">final</span> Class&lt;?&gt; var1, String var2, Class&lt;?&gt;[] var3, Class&lt;?&gt; var4, Class&lt;?&gt;[] var5, <span class="keyword">int</span> var6, <span class="keyword">boolean</span> var7, <span class="keyword">boolean</span> var8, Class&lt;?&gt; var9)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// 以上省略的代码主要是通过asm构建反射调用方法的一个字节码文件</span></span><br><span class="line">    <span class="comment">// 我们直接看重点方法</span></span><br><span class="line">    <span class="keyword">return</span> (MagicAccessorImpl)AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;MagicAccessorImpl&gt;() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> MagicAccessorImpl <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> (MagicAccessorImpl)ClassDefiner.defineClass(var13, var17, <span class="number">0</span>, var17.length, var1.getClassLoader()).newInstance();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalAccessException | InstantiationException var2) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> InternalError(var2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>直接看创建Class对象的地方：<br>sun.reflect.ClassDefiner#defineClass<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> Class&lt;?&gt; defineClass(String var0, <span class="keyword">byte</span>[] var1, <span class="keyword">int</span> var2, <span class="keyword">int</span> var3, <span class="keyword">final</span> ClassLoader var4) &#123;</span><br><span class="line">    ClassLoader var5 = (ClassLoader)AccessController.doPrivileged(<span class="keyword">new</span> PrivilegedAction&lt;ClassLoader&gt;() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> ClassLoader <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> DelegatingClassLoader(var4);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> unsafe.defineClass(var0, var1, var2, var3, var5, (ProtectionDomain)<span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到生成的Class对象是由DelegatingClassLoader加载的，到这里我们就可以得出结论，反射优化的动态生成的Class对象，是不能被其他Classloader加载的，结合Classloader加载无效类效率低下的问题，我们出现线程block的问题也就水落石出了。</p><h1 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h1><ol><li>使用log4j的Logger.error去打印异常堆栈的时候，为了打印出堆栈中类的位置信息，需要使用Classloader进行类加载；</li><li>Classloader加载是线程安全的，虽然并行加载可以提高加载不同类的效率，但是多线程加载相同的类时，还是需要互相同步等待，尤其当不同的线程打印的异常堆栈完全相同时，就会增加线程Block的风险，而Classloader去加载一个无法加载的类时，效率会急剧下降，使线程Block的情况进一步恶化；</li><li>因为反射调用效率问题，JDK对反射调用进行了优化，动态生成Java类进行方法调用，替换原来的native调用，而生成的动态类是由DelegatingClassLoader进行加载的，不能被其他的Classloader加载，异常堆栈中有反射优化的动态类，在高并发的条件下，就非常容易产生线程Block的情况。</li></ol><h1 id="问题处理"><a href="#问题处理" class="headerlink" title="问题处理"></a>问题处理</h1><p>处理方式调用printStackTrace方法将异常堆栈转换为字符串，但是结果相比于log4j打印的日志信息就缺少了类所在位置的辅助信息，这是一个取舍的过程。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">convertStackTraceToString</span><span class="params">(Throwable throwable)</span></span>&#123;</span><br><span class="line">    StringWriter stringWriter = <span class="keyword">new</span> StringWriter();</span><br><span class="line">    throwable.printStackTrace(<span class="keyword">new</span> PrintWriter(stringWriter));</span><br><span class="line">    <span class="keyword">return</span> stringWriter.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结果对比异常堆栈转换为字符串方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">2023-10-30 16:08:24.158[ERROR]java.lang.reflect.InvocationTargetException</span><br><span class="line">    at jdk.internal.reflect.GeneratedMethodAccessor2.invoke(Unknown Source)</span><br><span class="line">    at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">    at java.base/java.lang.reflect.Method.invoke(Method.java:568)</span><br><span class="line">    at com.jdl.shenji.sdk.predict.LogTest.callDiv(LogTest.java:44)</span><br><span class="line">    at com.jdl.shenji.sdk.predict.LogTest.run(LogTest.java:35)</span><br><span class="line">    at com.jdl.shenji.sdk.predict.LogTest.access$000(LogTest.java:16)</span><br><span class="line">    at com.jdl.shenji.sdk.predict.LogTest$1.run(LogTest.java:24)</span><br><span class="line">    at java.base/java.lang.Thread.run(Thread.java:833)</span><br><span class="line">Caused by: java.lang.ArithmeticException</span><br></pre></td></tr></table></figure></p><p>log.error打印堆栈方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">2023-10-30 16:09:17.256[ERROR]div error[com.jdl.shenji.sdk.predict.LogTest.run:37][]- </span><br><span class="line">java.lang.reflect.InvocationTargetException: null</span><br><span class="line">    at jdk.internal.reflect.GeneratedMethodAccessor2.invoke(Unknown Source) ~[?:?]</span><br><span class="line">    at jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:?]</span><br><span class="line">    at java.lang.reflect.Method.invoke(Method.java:568) ~[?:?]</span><br><span class="line">    at com.jdl.shenji.sdk.predict.LogTest.callDiv(LogTest.java:44) ~[classes/:?]</span><br><span class="line">    at com.jdl.shenji.sdk.predict.LogTest.run(LogTest.java:35) ~[classes/:?]</span><br><span class="line">    at com.jdl.shenji.sdk.predict.LogTest.access$000(LogTest.java:16) ~[classes/:?]</span><br><span class="line">    at com.jdl.shenji.sdk.predict.LogTest$1.run(LogTest.java:24) ~[classes/:?]</span><br><span class="line">    at java.lang.Thread.run(Thread.java:833) ~[?:?]</span><br><span class="line">Caused by: java.lang.ArithmeticException: / by zero</span><br></pre></td></tr></table></figure></p><p>对比结果发现是有些差异的，异常堆栈转换为字符串方式异常中丢失了message，即/ by zero</p><p>其实这个是和JVM的JIT相关的，对于这个情况有一个专业的术语叫：fast throw，在触发JIT之前堆栈、异常信息等是可以正常打印的，但是在执行了大概30 000次后，就开始丢失异常信息了。</p><p>堆栈等信息丢失只是表面现象，JIT实际上是这么做优化的：</p><ol><li>创建需要抛出异常的实例</li><li>清空堆栈信息</li><li>将该实例缓存起来</li><li>之后再需要抛出的时候，将缓存实例抛出去</li></ol><p>可以通过参数-XX:-OmitStackTraceInFastThrow关闭这一优化，但是对于性能会有比较大的影响，我执行了500 000次，fast throw处理时长是11802ms，而关闭了这个优化后处理时长涨到了32423ms，对于目前的场景，建议是打开优化，如果出现大规模异常的情况，可以搜索异常初期的日志，获得详细的异常信息。</p><h1 id="压测结果"><a href="#压测结果" class="headerlink" title="压测结果"></a>压测结果</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/jsf_block02.png" alt="jsf_block02" title>                </div>                <div class="image-caption">jsf_block02</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;现象&quot;&gt;&lt;a href=&quot;#现象&quot; class=&quot;headerlink&quot; title=&quot;现象&quot;&gt;&lt;/a&gt;现象&lt;/h1&gt;&lt;p&gt;在压测一个新上线服务核心接口的时候，出现接口响应时间、TPS不满足预期的问题。&lt;br&gt;&lt;figure class=&quot;image-bubble
      
    
    </summary>
    
      <category term="问题排查" scheme="https://kyrie17.github.io/categories/%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/"/>
    
    
      <category term="线程池" scheme="https://kyrie17.github.io/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    
      <category term="Log4J" scheme="https://kyrie17.github.io/tags/Log4J/"/>
    
      <category term="ClassLoader" scheme="https://kyrie17.github.io/tags/ClassLoader/"/>
    
      <category term="反射" scheme="https://kyrie17.github.io/tags/%E5%8F%8D%E5%B0%84/"/>
    
      <category term="JIT" scheme="https://kyrie17.github.io/tags/JIT/"/>
    
  </entry>
  
  <entry>
    <title>PF4J循环依赖问题排查</title>
    <link href="https://kyrie17.github.io/2023/11/12/PF4J%E5%BE%AA%E7%8E%AF%E4%BE%9D%E8%B5%96%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/"/>
    <id>https://kyrie17.github.io/2023/11/12/PF4J循环依赖问题排查/</id>
    <published>2023-11-12T14:11:08.000Z</published>
    <updated>2023-11-12T14:24:22.864Z</updated>
    
    <content type="html"><![CDATA[<h1 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h1><p>在线推理服务上线的过程中出现pf4j循环依赖的问题，同时有两个定时任务执行了插件加载的逻辑，并且都出现了org.pf4j.DependencyResolver$CyclicDependencyException: Cyclic dependencies<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/pf4j01.png" alt="pf4j01" title>                </div>                <div class="image-caption">pf4j01</div>            </figure></p><p>现场处理方式：重启机器，算法包加载正常，推理流量执行正常</p><p>问题：pf4j中的dependencies指的是在plugin.properties中配置的依赖的其他插件，判责引擎算法包中并没有配置，为什么会出现循环依赖？<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/pf4j02.png" alt="pf4j02" title>                </div>                <div class="image-caption">pf4j02</div>            </figure></p><h1 id="问题排查"><a href="#问题排查" class="headerlink" title="问题排查"></a>问题排查</h1><p>1、对插件操作加锁存在并发问题，可能同时加载多个算法包（或是对一个算法包重复加载）<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/pf4j03.png" alt="pf4j03" title>                </div>                <div class="image-caption">pf4j03</div>            </figure></p><p>非原子性操作<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/pf4j04.png" alt="pf4j04" title>                </div>                <div class="image-caption">pf4j04</div>            </figure></p><p>2、pf4j是线程不安全的</p><p>在分析代码之前，我们先看下pf4j在解析依赖过程中的类图关系，neighbors（维护依赖之间关系的map）是Resolver的一个成员变量<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/pf4j05.png" alt="pf4j05" title>                </div>                <div class="image-caption">pf4j05</div>            </figure></p><p>很显然，问题是在加载插件的时候出现的，先看一下pf4j加载插件的代码<br>org.pf4j.AbstractPluginManager#loadPlugin<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">loadPlugin</span><span class="params">(Path pluginPath)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((pluginPath == <span class="keyword">null</span>) || Files.notExists(pluginPath)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(String.format(<span class="string">"Specified plugin %s does not exist!"</span>, pluginPath));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    log.debug(<span class="string">"Loading plugin from '&#123;&#125;'"</span>, pluginPath);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载、读取插件配置文件等，构建pluginWrapper</span></span><br><span class="line">    PluginWrapper pluginWrapper = loadPluginFromPath(pluginPath);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析、加载插件的依赖</span></span><br><span class="line">    resolvePlugins();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> pluginWrapper.getDescriptor().getPluginId();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们主要看下这一步resolvePlugins();<br>org.pf4j.AbstractPluginManager#resolvePlugins<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">resolvePlugins</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// retrieves the plugins descriptors</span></span><br><span class="line">    List&lt;PluginDescriptor&gt; descriptors = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (PluginWrapper plugin : plugins.values()) &#123;</span><br><span class="line">        descriptors.add(plugin.getDescriptor());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这行代码是核心，后面会分析到</span></span><br><span class="line">    DependencyResolver.Result result = dependencyResolver.resolve(descriptors);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这个异常是不是很眼熟了！全局唯一出现的地方</span></span><br><span class="line">    <span class="keyword">if</span> (result.hasCyclicDependency()) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> DependencyResolver.CyclicDependencyException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>紧接着看下什么情况会出现cyclicDependency为true<br>org.pf4j.DependencyResolver.Result#Result<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasCyclicDependency</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> cyclicDependency;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Result(List&lt;String&gt; sortedPlugins) &#123;</span><br><span class="line">    <span class="keyword">if</span> (sortedPlugins == <span class="keyword">null</span>) &#123;</span><br><span class="line">        cyclicDependency = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">this</span>.sortedPlugins = Collections.emptyList();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.sortedPlugins = <span class="keyword">new</span> ArrayList&lt;&gt;(sortedPlugins);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    notFoundDependencies = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    wrongVersionDependencies = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>问题转换为寻找sortedPlugins为null情况，我们回到上面提到的这段核心代码，看看如何构造Result的<br>org.pf4j.AbstractPluginManager#resolvePlugins<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">DependencyResolver.Result result = dependencyResolver.resolve(descriptors);</span><br><span class="line">org.pf4j.DependencyResolver#resolve</span><br><span class="line"><span class="function"><span class="keyword">public</span> Result <span class="title">resolve</span><span class="params">(List&lt;PluginDescriptor&gt; plugins)</span> </span>&#123;</span><br><span class="line">    dependenciesGraph = <span class="keyword">new</span> DirectedGraph&lt;&gt;();</span><br><span class="line">    dependentsGraph = <span class="keyword">new</span> DirectedGraph&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// populate graphs</span></span><br><span class="line">    Map&lt;String, PluginDescriptor&gt; pluginByIds = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (PluginDescriptor plugin : plugins) &#123;</span><br><span class="line">        addPlugin(plugin);</span><br><span class="line">        pluginByIds.put(plugin.getPluginId(), plugin);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    log.debug(<span class="string">"Graph: &#123;&#125;"</span>, dependenciesGraph);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// get a sorted list of dependencies</span></span><br><span class="line">    List&lt;String&gt; sortedPlugins = dependenciesGraph.reverseTopologicalSort();</span><br><span class="line">    log.debug(<span class="string">"Plugins order: &#123;&#125;"</span>, sortedPlugins);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// create the result object</span></span><br><span class="line">    Result result = <span class="keyword">new</span> Result(sortedPlugins);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>紧抓矛盾点sortedPlugins，不要跟丢了！<br>org.pf4j.util.DirectedGraph#reverseTopologicalSort<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;V&gt; <span class="title">reverseTopologicalSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    List&lt;V&gt; list = topologicalSort();</span><br><span class="line">    <span class="keyword">if</span> (list == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Collections.reverse(list);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;V&gt; <span class="title">topologicalSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 初始化入度</span></span><br><span class="line">    Map&lt;V, Integer&gt; degree = inDegree();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化0入度栈，将入度为0的压入栈</span></span><br><span class="line">    Stack&lt;V&gt; zeroVertices = <span class="keyword">new</span> Stack&lt;&gt;(); <span class="comment">// stack as good as any here</span></span><br><span class="line">    <span class="keyword">for</span> (V v : degree.keySet()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (degree.get(v) == <span class="number">0</span>) &#123;</span><br><span class="line">            zeroVertices.push(v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拓扑排序的结果</span></span><br><span class="line">    List&lt;V&gt; result = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!zeroVertices.isEmpty()) &#123;</span><br><span class="line">        <span class="comment">// 弹出一个0入度的元素，放入排序结果中</span></span><br><span class="line">        V vertex = zeroVertices.pop();</span><br><span class="line">        result.add(vertex);</span><br><span class="line">        <span class="comment">// 依赖当前0入度元素的入度-1</span></span><br><span class="line">        <span class="keyword">for</span> (V neighbor : neighbors.get(vertex)) &#123;</span><br><span class="line">            degree.put(neighbor, degree.get(neighbor) - <span class="number">1</span>);</span><br><span class="line">            <span class="comment">// 如果已经入度为0，压入0入度栈</span></span><br><span class="line">            <span class="keyword">if</span> (degree.get(neighbor) == <span class="number">0</span>) &#123;</span><br><span class="line">                zeroVertices.push(neighbor);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 找到出现null的地方了！！！</span></span><br><span class="line">    <span class="comment">// 校验排序结果是否与插件元素图数量一致，如果不一致则为存在循环依赖</span></span><br><span class="line">    <span class="keyword">if</span> (result.size() != neighbors.size()) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 初始化入度，如果没有依赖其他插件为0，依赖了一个插件即为1，依此类推</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Map&lt;V, Integer&gt; <span class="title">inDegree</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Map&lt;V, Integer&gt; result = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (V vertex : neighbors.keySet()) &#123;</span><br><span class="line">        result.put(vertex, <span class="number">0</span>); <span class="comment">// all in-degrees are 0</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (V from : neighbors.keySet()) &#123;</span><br><span class="line">        <span class="keyword">for</span> (V to : neighbors.get(from)) &#123;</span><br><span class="line">            result.put(to, result.get(to) + <span class="number">1</span>); <span class="comment">// increment in-degree</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>到这一步我们已经找到了result.size() != neighbors.size()就是出现插件循环依赖的直接原因，我们这行打上多线程debug断点，尝试本地复现一下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// create the plugin manager</span></span><br><span class="line">    PluginManager pluginManager = <span class="keyword">new</span> DefaultPluginManager();</span><br><span class="line"></span><br><span class="line">    Path path = Paths.get(<span class="string">"/Users/wusiqi14/Documents/temp/sj_plugin_framework/sj_algorithm_algorithm_deploy_demo-1.0.8-20231026.085014-8.zip"</span>);</span><br><span class="line"></span><br><span class="line">    Thread thread = <span class="keyword">new</span> Thread(() -&gt; pluginManager.loadPlugin(path));</span><br><span class="line">    thread.setName(<span class="string">"wsq01"</span>);</span><br><span class="line"></span><br><span class="line">    Thread thread1 = <span class="keyword">new</span> Thread(() -&gt; pluginManager.loadPlugin(path));</span><br><span class="line">    thread1.setName(<span class="string">"wsq02"</span>);</span><br><span class="line"></span><br><span class="line">    thread.start();</span><br><span class="line">    thread1.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>多次运行代码后出现了预期的异常：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/pf4j06.png" alt="pf4j06" title>                </div>                <div class="image-caption">pf4j06</div>            </figure></p><p>可以看到，neighbors出现了并发问题，size为2但对应的entry只有一个<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/pf4j07.png" alt="pf4j07" title>                </div>                <div class="image-caption">pf4j07</div>            </figure></p><p>neighbors具体的实现是HashMap，在并发场景是有机会出现问题的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Map&lt;V, List&lt;V&gt;&gt; neighbors = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br></pre></td></tr></table></figure></p><p>在本地测试过程中还出现了其他并发问题：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/pf4j08.png" alt="pf4j08" title>                </div>                <div class="image-caption">pf4j08</div>            </figure></p><p>unresolvedPlugins是AbstractPluginManager下的成员变量，对应的实现是线程不安全的ArrayList</p><h1 id="问题修复"><a href="#问题修复" class="headerlink" title="问题修复"></a>问题修复</h1><ul><li>对插件管理对象pluginManager上全局锁</li><li>同时考虑到插件加载、回滚、删除三个定时任务，会出现并发获取锁失败的问题，所以可以把这3个操作放在一个定时任务里面处理</li></ul><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>pf4j是线程不安全的，涉及插件的操作都需要考虑这个问题</li><li>加锁过程需要是原子性的</li><li>目前对单个plugin加锁的方案是有问题的，因为DefaultPluginManager是所有插件共用的，即使修复上面对单个插件加锁的原子性，当面对一个服务部署多个算法包的时候，还是会出现并发的问题</li></ol><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p>拓扑排序：<a href="https://zhuanlan.zhihu.com/p/135094687" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/135094687</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;现象&quot;&gt;&lt;a href=&quot;#现象&quot; class=&quot;headerlink&quot; title=&quot;现象&quot;&gt;&lt;/a&gt;现象&lt;/h1&gt;&lt;p&gt;在线推理服务上线的过程中出现pf4j循环依赖的问题，同时有两个定时任务执行了插件加载的逻辑，并且都出现了org.pf4j.Dependenc
      
    
    </summary>
    
      <category term="问题排查" scheme="https://kyrie17.github.io/categories/%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/"/>
    
    
      <category term="PF4J" scheme="https://kyrie17.github.io/tags/PF4J/"/>
    
      <category term="并发" scheme="https://kyrie17.github.io/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>单元测试</title>
    <link href="https://kyrie17.github.io/2023/09/23/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <id>https://kyrie17.github.io/2023/09/23/单元测试/</id>
    <published>2023-09-23T15:37:47.000Z</published>
    <updated>2023-09-23T16:32:45.876Z</updated>
    
    <content type="html"><![CDATA[<h2 id="浅谈单元测试"><a href="#浅谈单元测试" class="headerlink" title="浅谈单元测试"></a>浅谈单元测试</h2><p>这是单元测试吗？<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Log</span>4j2</span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span>(classes = &#123;CpsApplication.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeatureServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> FeatureService featureService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getFeatureTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 构造入参</span></span><br><span class="line">        FeatureInputData featureInputData = <span class="keyword">new</span> FeatureInputData();</span><br><span class="line">        featureInputData.setAlgoKey(<span class="string">"AlgoKey"</span>);</span><br><span class="line">        featureInputData.setStrategyKey(<span class="string">"StrategyKey"</span>);</span><br><span class="line">        featureInputData.setVersion(<span class="string">"v0.0.1"</span>);</span><br><span class="line">        featureInputData.setFeatureType(FeatureTypeEnum.ALL);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 方法调用</span></span><br><span class="line">        FeatureOutputData featureData = featureService.getFeatureData(featureInputData);</span><br><span class="line">    </span><br><span class="line">        Assert.assertNotNull(featureData);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="单元测试、集成测试的区别"><a href="#单元测试、集成测试的区别" class="headerlink" title="单元测试、集成测试的区别"></a>单元测试、集成测试的区别</h3><p>单元测试（模块测试）：是针对程序模块来进行正确性检验的测试工作，程序单元是应用的最小可测试部件。</p><ul><li>在过程化编程中，一个单元就是单个程序、函数、过程等</li><li>对于面向对象编程，最小单元就是方法，包括基类、抽象类、或者派生类中的方法</li></ul><p>集成测试：启动应用，连db等中间件。</p><p>系统级别测试：全链路，涉及的应用都要部署起来。包括端到端测试、链路测试、自动化回归测试、UI测试等。</p><table><thead><tr><th></th><th><strong>单元测试</strong></th><th><strong>集成测试</strong></th><th><strong>系统级别测试</strong></th></tr></thead><tbody><tr><td><strong>编写人员</strong></td><td>开发</td><td>开发</td><td>开发 / 测试</td></tr><tr><td><strong>编写场地</strong></td><td>生产代码仓库内</td><td>生产代码仓库内</td><td>生产代码仓库内 / 生产代码仓库外</td></tr><tr><td><strong>编写时间</strong></td><td>代码发布前</td><td>代码发布前</td><td>代码发布前 / 代码发布后</td></tr><tr><td><strong>编写成本</strong></td><td>低</td><td>中</td><td>高</td></tr><tr><td><strong>编写难度</strong></td><td>低</td><td>中</td><td>高</td></tr><tr><td><strong>反馈速度</strong></td><td>极快，秒级</td><td>较慢，分钟级</td><td>慢，天级别</td></tr><tr><td><strong>覆盖面积</strong></td><td>代码行覆盖60-80% 分支覆盖40-60%</td><td>功能级别覆盖HappyPath</td><td>核心保障链路</td></tr><tr><td><strong>环境依赖</strong></td><td>代码级别，不依赖环境</td><td>依赖日常或本地环境</td><td>依赖预发或生产环境</td></tr><tr><td><strong>外部依赖模拟</strong></td><td>全部模拟</td><td>部分模拟</td><td>不模拟，完全使用真实环境</td></tr></tbody></table><h2 id="Junit"><a href="#Junit" class="headerlink" title="Junit"></a>Junit</h2><p>JUint是Java编程语言的单元测试框架，用于编写和运行可重复的自动化测试。</p><h3 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h3><p>一个简单的目标测试方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NumberUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>引入maven依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>单元测试代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NumberUtilTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> res = NumberUtil.add(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        Assert.assertEquals(<span class="string">"add方法结果异常"</span>, <span class="number">2</span>, res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>@Test</strong><br>在junit4中，定义一个测试方法只需要在方法前加上@Test就行了。<br>注意：测试方法必须是public void，即公共、无返回数据。可以抛出异常。</p><p><strong>Junit提供的断言测试方法</strong></p><table><thead><tr><th>断言</th><th>描述</th></tr></thead><tbody><tr><td>void assertEquals([String message],expected value,actual value)</td><td>断言两个值相等</td></tr><tr><td>void assertTrue([String message],boolean condition)</td><td>断言一个条件为真</td></tr><tr><td>void assertFalse([String message],boolean condition)</td><td>断言一个条件为假</td></tr><tr><td>void assertNotNull([String message],java.lang.Object object)</td><td>断言一个对象不为空</td></tr><tr><td>void assertNull([String message],java.lang.Object object)</td><td>断言一个对象为空</td></tr><tr><td>void assertSame([String message],java.lang.Object expected,java.lang.Object actual)</td><td>断言两个对象引用相同的对象</td></tr><tr><td>void assertNotSame([String message],java.lang.Object unexpected,java.lang.Object actual)</td><td>断言两个对象不是引用同一个对象</td></tr><tr><td>void assertArrayEquals([String message],expectedArray,resultArray)</td><td>断言预期数组和结果数组相等</td></tr></tbody></table><h3 id="Junit生命周期"><a href="#Junit生命周期" class="headerlink" title="Junit生命周期"></a>Junit生命周期</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LifeCircleTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeClass</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">beforeClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"in before class"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@AfterClass</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">afterClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"in after class"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Before</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"in before"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@After</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"in after"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"in test case"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCase</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"in test case"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/unit_test01.png" alt="unit_test01" title>                </div>                <div class="image-caption">unit_test01</div>            </figure></p><h3 id="异常测试"><a href="#异常测试" class="headerlink" title="异常测试"></a>异常测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExceptionTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span>()</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exceptionTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">1</span> / a;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span>(expected = ArithmeticException.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">noExceptionTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> b = <span class="number">1</span> / a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/unit_test02.png" alt="unit_test02" title>                </div>                <div class="image-caption">unit_test02</div>            </figure></p><h3 id="超时时间测试"><a href="#超时时间测试" class="headerlink" title="超时时间测试"></a>超时时间测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TimeoutTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span>(timeout = <span class="number">1000</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">timeoutFailTest</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span>(timeout = <span class="number">6000</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">timeoutSuccessTest</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        Thread.sleep(<span class="number">5000</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/unit_test03.png" alt="unit_test03" title>                </div>                <div class="image-caption">unit_test03</div>            </figure></p><h3 id="Spring-单测"><a href="#Spring-单测" class="headerlink" title="Spring 单测"></a>Spring 单测</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Log</span>4j2</span><br><span class="line"><span class="meta">@RunWith</span>(SpringJUnit4ClassRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span>(classes = &#123;CpsApplication.class&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FeatureServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> FeatureService featureService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getFeatureTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 构造入参</span></span><br><span class="line">        FeatureInputData featureInputData = <span class="keyword">new</span> FeatureInputData();</span><br><span class="line">        featureInputData.setAlgoKey(<span class="string">"AlgoKey"</span>);</span><br><span class="line">        featureInputData.setStrategyKey(<span class="string">"StrategyKey"</span>);</span><br><span class="line">        featureInputData.setVersion(<span class="string">"v0.0.1"</span>);</span><br><span class="line">        featureInputData.setFeatureType(FeatureTypeEnum.ALL);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 方法调用</span></span><br><span class="line">        FeatureOutputData featureData = featureService.getFeatureData(featureInputData);</span><br><span class="line">    </span><br><span class="line">        Assert.assertNotNull(featureData);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>@Runwith就是放在测试类名之前，用来确定这个类怎么运行的。也可以不标注，会使用默认运行器JUnit4.class。</p><ol><li>@RunWith(JUnit4.class) junit4的默认运行器</li><li>@RunWith(Parameterized.class) 参数化运行器，配合@Parameters使用junit的参数化功能</li><li>@RunWith(Suite.class) @SuiteClasses({ATest.class,BTest.class,CTest.class})测试集运行器配合使用测试集功能</li><li>@RunWith(SpringJUnit4ClassRunner.class)集成了spring的一些功能</li><li>…</li></ol><h3 id="其他能力"><a href="#其他能力" class="headerlink" title="其他能力"></a>其他能力</h3><p>参数化测试@RunWith(Parameterized.class)<br>套件测试@RunWith(Suite.class)<br>测试顺序@FixMethodOrder(MethodSorters.NAME_ASCENDING)</p><h2 id="Mockito"><a href="#Mockito" class="headerlink" title="Mockito"></a>Mockito</h2><h3 id="什么是-Mock-测试"><a href="#什么是-Mock-测试" class="headerlink" title="什么是 Mock 测试"></a>什么是 Mock 测试</h3><p>我们在写单元测试时，总会遇到类似这些问题：</p><ol><li>构造的入参，对于极值、异常边界场景不好复现，相关的逻辑测不到，只能依靠测试环境或预发跑，运气不好可能要改好几次代码重启机器验证，费时费力</li><li>依赖别人接口，可能需要别人协助测试环境数据库插数才能跑通</li><li>依赖的别人的接口还没有开发完，为了不影响提测，如何完成单元测试</li><li>编写的单元测试依赖测试数据库的数据，每次跑都要数据库改数</li><li>对service层加了逻辑，跑单元测试本地验证的时候，由于种种原因，本地环境跑不起来，折腾半天跑起来验证完了，下次开发需求又遇到了另一个问题本地环境启动报错</li><li>我就想dubug到某一行代码，但是逻辑复杂，东拼西凑的参数就是走不到，自己看代码逻辑还要去问别人接口的返回值逻辑<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/unit_test04.png" alt="unit_test04" title>                </div>                <div class="image-caption">unit_test04</div>            </figure></li></ol><p>Mock有模仿、伪造的含义。Mock测试就是在测试过程中，对于某些不容易构造或者不容易获取的对象，用一个虚拟的对象来创建以便测试的测试方法。</p><h3 id="为什么选择Mockito"><a href="#为什么选择Mockito" class="headerlink" title="为什么选择Mockito"></a>为什么选择Mockito</h3><p>EasyMock与Mockito的对比文章：<br><a href="https://code.google.com/archive/p/mockito/wikis/MockitoVSEasyMock.wiki" target="_blank" rel="noopener">https://code.google.com/archive/p/mockito/wikis/MockitoVSEasyMock.wiki</a><br>Mockito官网的与EasyMock对比文章：<br><a href="https://github.com/mockito/mockito/wiki/Mockito-vs-EasyMock" target="_blank" rel="noopener">https://github.com/mockito/mockito/wiki/Mockito-vs-EasyMock</a></p><p>其各有优劣，但主要还是Mockito的社区相对于其它Mock框架比较活跃。</p><h3 id="Quick-Start-1"><a href="#Quick-Start-1" class="headerlink" title="Quick Start"></a>Quick Start</h3><p>简单的目标测试方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> UserVO <span class="title">queryUserByUserId</span><span class="params">(Long userId)</span> </span>&#123;</span><br><span class="line">UserVO userVO = userDAO.queryByUserId(userId);</span><br><span class="line"><span class="keyword">if</span> (userVO == <span class="keyword">null</span>) &#123;</span><br><span class="line">log.warn(<span class="string">"查询用户[&#123;&#125;]为空"</span>, userId);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> userVO;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>引入maven依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mockito<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mockito-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>单元测试代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(MockitoJUnitRunner.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** mock依赖对象 */</span></span><br><span class="line">    <span class="meta">@Mock</span></span><br><span class="line">    <span class="keyword">private</span> UserDAO userDAO;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** 测试对象 */</span></span><br><span class="line">    <span class="meta">@InjectMocks</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queryUserByUserId_Succeed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 构造出参</span></span><br><span class="line">        UserVO userVO = <span class="keyword">new</span> UserVO();</span><br><span class="line">        userVO.setUserName(<span class="string">"username"</span>);</span><br><span class="line">        userVO.setAge(<span class="number">18</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// queryByUserId方法打桩</span></span><br><span class="line">        Mockito.doReturn(userVO).when(userDAO).queryByUserId(any());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 实际测试方法</span></span><br><span class="line">        UserVO res = userService.queryUserByUserId(<span class="number">10000L</span>);</span><br><span class="line">    </span><br><span class="line">        Assert.assertEquals(userVO.getUserName(), res.getUserName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>@InjectMocks</strong><br>作用于真实执行对象，即上文提及的A，针对实现类使用，不能作用在接口上。<br><strong>@Mock </strong><br>作用于需要mock的对象，即上文提及的B、C，对其进行虚拟、伪造。<br><strong>any()</strong></p><table><thead><tr><th>函数名</th><th>匹配类型</th></tr></thead><tbody><tr><td>any()</td><td>所有对象类型</td></tr><tr><td>anyInt()</td><td>基本类型 int、非 null 的 Integer 类型</td></tr><tr><td>anyChar()</td><td>基本类型 char、非 null 的 Character 类型</td></tr><tr><td>anyShort()</td><td>基本类型 short、非 null 的 Short 类型</td></tr><tr><td>anyBoolean()</td><td>基本类型 boolean、非 null 的 Boolean 类型</td></tr><tr><td>anyDouble()</td><td>基本类型 double、非 null 的 Double 类型</td></tr><tr><td>anyFloat()</td><td>基本类型 float、非 null 的 Float 类型</td></tr><tr><td>anyLong()</td><td>基本类型 long、非 null 的 Long 类型</td></tr><tr><td>anyByte()</td><td>基本类型 byte、非 null 的 Byte 类型</td></tr><tr><td>anyString()</td><td>String 类型(不能是 null)</td></tr><tr><td>anyList()</td><td><code>List&lt;T&gt;</code> 类型(不能是 null)</td></tr><tr><td>anyMap()</td><td><code>Map&lt;K, V&gt;</code>类型(不能是 null)</td></tr><tr><td>anyCollection()</td><td><code>Collection&lt;T&gt;</code>类型(不能是 null)</td></tr><tr><td>anySet()</td><td><code>Set&lt;T&gt;</code>类型(不能是 null)</td></tr><tr><td>any(<code>Class&lt;T&gt;</code> type)</td><td>type类型的对象(不能是 null)</td></tr><tr><td>isNull()</td><td>null</td></tr><tr><td>isNotNull()</td><td>非 null</td></tr></tbody></table><h2 id="PowerMock"><a href="#PowerMock" class="headerlink" title="PowerMock"></a>PowerMock</h2><h3 id="为什么需要PowerMock补充"><a href="#为什么需要PowerMock补充" class="headerlink" title="为什么需要PowerMock补充"></a>为什么需要PowerMock补充</h3><p>Mockito使用继承的方式实现mock的，用CGLIB生成mock对象代替真实的对象进行执行，所以无法mock私有方法、静态方法、Final方法。</p><p>PowerMock会根据你的mock要求，去修改写在注解@PrepareForTest里的class文件（当前测试类会自动加入注解中），以满足特殊的mock需求。例如：去除final方法的final标识，在静态方法的最前面加入自己的虚拟实现等。</p><h3 id="Quick-Start-2"><a href="#Quick-Start-2" class="headerlink" title="Quick Start"></a>Quick Start</h3><p>简单的目标测试方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> UserVO <span class="title">queryUser</span><span class="params">(Long userId)</span> </span>&#123;</span><br><span class="line">    UserPO userPO = userDAO.queryByUser(userId);</span><br><span class="line">    <span class="keyword">return</span> UserServiceConverter.convertUserVo(userPO);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>单元测试代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(PowerMockRunner.class)</span><br><span class="line"><span class="meta">@PrepareForTest</span>( &#123; UserServiceConverter.class &#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 模拟依赖对象 */</span></span><br><span class="line">    <span class="meta">@Mock</span></span><br><span class="line">    <span class="keyword">private</span> UserDAO userDAO;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** 定义测试对象 */</span></span><br><span class="line">    <span class="meta">@InjectMocks</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryUser_Succeed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        PowerMockito.mockStatic(UserServiceConverter.class);</span><br><span class="line">        UserVO userVO = <span class="keyword">new</span> EasyRandom().nextObject(UserVO.class);</span><br><span class="line">        PowerMockito.when(UserServiceConverter.convertUserVo(Mockito.any())).thenReturn(userVO);</span><br><span class="line">    </span><br><span class="line">        UserPO userPO = <span class="keyword">new</span> UserPO();</span><br><span class="line">        userPO.setUserName(userVO.getUserName());</span><br><span class="line">        userPO.setAge(userVO.getAge());</span><br><span class="line">        doReturn(userPO).when(userDAO).queryByUser(anyLong());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        UserVO res = userService.queryUser(<span class="number">0L</span>);</span><br><span class="line">    </span><br><span class="line">        Assert.assertEquals(userVO.getUserName(), res.getUserName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>@RunWith(PowerMockRunner.class)</strong><br>我们用了 PowerMockRunner ，MockitoJUnitRunner 就不能用了。但不要担心， @Mock 等注解还能用。<br><strong>@PrepareForTest</strong><br>告诉PowerMock准备测试某些类。需要使用此注释定义的类通常是需要进行字节码操作的类。这包括final类，带有final，private，static或本地方法的类，这些方法应该被mock，并且类应该在实例化时返回一个模拟对象。</p><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><h3 id="easy-random"><a href="#easy-random" class="headerlink" title="easy-random"></a>easy-random</h3><p>Mock对象，构造pojo的每个属性，不需要自己逐个属性设置</p><p>引入maven依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.jeasy<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easy-random-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>4.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>代码示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryUser_Succeed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    PowerMockito.mockStatic(UserServiceConverter.class);</span><br><span class="line">    UserVO userVO = <span class="keyword">new</span> EasyRandom().nextObject(UserVO.class);</span><br><span class="line">    System.out.println(JSON.toJSONString(userVO));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/unit_test05.png" alt="unit_test05" title>                </div>                <div class="image-caption">unit_test05</div>            </figure></p><h3 id="TestMe"><a href="#TestMe" class="headerlink" title="TestMe"></a>TestMe</h3><p>TestMe是Idea的插件，可以自动生成单元测试模板<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/unit_test06.png" alt="unit_test06" title>                </div>                <div class="image-caption">unit_test06</div>            </figure></p><p>Alt+Shift+Q选择Junit4&amp;Mockito生成模板：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/unit_test07.png" alt="unit_test07" title>                </div>                <div class="image-caption">unit_test07</div>            </figure></p><p>对于代码：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/unit_test08.png" alt="unit_test08" title>                </div>                <div class="image-caption">unit_test08</div>            </figure></p><p>生成的模板：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/unit_test09.png" alt="unit_test09" title>                </div>                <div class="image-caption">unit_test09</div>            </figure></p><h3 id="本地查看单测覆盖率"><a href="#本地查看单测覆盖率" class="headerlink" title="本地查看单测覆盖率"></a>本地查看单测覆盖率</h3><p>查看某个单测类的覆盖率：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/unit_test10.png" alt="unit_test10" title>                </div>                <div class="image-caption">unit_test10</div>            </figure></p><p>运行结果：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/unit_test11.png" alt="unit_test11" title>                </div>                <div class="image-caption">unit_test11</div>            </figure></p><p>查看某个包的单测覆盖率：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/unit_test12.png" alt="unit_test12" title>                </div>                <div class="image-caption">unit_test12</div>            </figure></p><h2 id="单测实战"><a href="#单测实战" class="headerlink" title="单测实战"></a>单测实战</h2><p>我们结合下面这三个问题，一起来思考一下如何写一个好的单测：</p><ol><li>需要写几个单元测试方法？</li><li>ValidationUtil.validate等方法需要mock吗？</li><li>需要校验哪些参数？<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询用户</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> companyId 公司标识</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> startIndex 开始序号</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pageSize 分页大小</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 用户分页数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PageInfo&lt;UserVO&gt; <span class="title">queryUser</span><span class="params">(Long companyId, Long startIndex, Integer pageSize)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//入参校验</span></span><br><span class="line">    <span class="keyword">if</span>(ValidationUtil.validate(companyId))&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Invalid company Id"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查询用户数据</span></span><br><span class="line">    <span class="comment">// 查询用户数据: 总共数量</span></span><br><span class="line">    Long totalSize = userDAO.countByCompany(companyId);</span><br><span class="line">    <span class="comment">// 查询接口数据: 数据列表</span></span><br><span class="line">    List&lt;UserVO&gt; dataList = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (NumberHelper.isPositive(totalSize)) &#123;</span><br><span class="line">        dataList = userDAO.queryByCompany(companyId, startIndex, pageSize);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回分页数据</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> PageInfo&lt;&gt;(dataList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>参考示例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(MockitoJUnitRunner.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 模拟依赖对象 */</span></span><br><span class="line">    <span class="comment">/** 用户DAO */</span></span><br><span class="line">    <span class="meta">@Mock</span></span><br><span class="line">    <span class="keyword">private</span> UserDAO userDAO;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/** 定义测试对象 */</span></span><br><span class="line">    <span class="comment">/** 用户服务 */</span></span><br><span class="line">    <span class="meta">@InjectMocks</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试: 查询用户-入参校验</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryUser_Fail_WithBadInput</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 模拟依赖方法: userDAO.countByCompany</span></span><br><span class="line">        Long companyId = <span class="number">123L</span>;</span><br><span class="line">        Long startIndex = <span class="number">90L</span>;</span><br><span class="line">        Integer pageSize = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">        Throwable throwable = catchThrowable(() -&gt; userService.queryUser(companyId, startIndex, pageSize));</span><br><span class="line">        Assert.assertTrue(throwable <span class="keyword">instanceof</span> IllegalArgumentException);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试: 查询用户-无数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryUser_Succeed_NoData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 模拟依赖方法</span></span><br><span class="line">        <span class="comment">// 模拟依赖方法: userDAO.countByCompany</span></span><br><span class="line">        Long companyId = <span class="number">12L</span>;</span><br><span class="line">        Long startIndex = <span class="number">90L</span>;</span><br><span class="line">        Integer pageSize = <span class="number">10</span>;</span><br><span class="line">        Mockito.doReturn(<span class="number">0L</span>).when(userDAO).countByCompany(companyId);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 调用测试方法</span></span><br><span class="line">        PageInfo&lt;UserVO&gt; pageData = userService.queryUser(companyId, startIndex, pageSize);</span><br><span class="line">        Assert.assertEquals(<span class="number">0</span>, pageData.getSize());</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 验证依赖方法</span></span><br><span class="line">        <span class="comment">// 验证依赖方法: userDAO.countByCompany</span></span><br><span class="line">        Mockito.verify(userDAO).countByCompany(companyId);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 验证依赖对象</span></span><br><span class="line">        Mockito.verifyNoMoreInteractions(userDAO);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试: 查询用户-有数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryUser_Succeed_WithData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 模拟依赖方法: userDAO.countByCompany</span></span><br><span class="line">        Long companyId = <span class="number">12L</span>;</span><br><span class="line">        Mockito.doReturn(<span class="number">91L</span>).when(userDAO).countByCompany(companyId);</span><br><span class="line">        <span class="comment">// 模拟依赖方法: userDAO.queryByCompany</span></span><br><span class="line">        Long startIndex = <span class="number">90L</span>;</span><br><span class="line">        Integer pageSize = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">        UserVO userVO = <span class="keyword">new</span> EasyRandom().nextObject(UserVO.class);</span><br><span class="line">        ArrayList&lt;UserVO&gt; userVOS = Lists.newArrayList(userVO);</span><br><span class="line">        Mockito.doReturn(userVOS).when(userDAO).queryByCompany(companyId, startIndex, pageSize);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 调用测试方法</span></span><br><span class="line">        PageInfo&lt;UserVO&gt; pageData = userService.queryUser(companyId, startIndex, pageSize);</span><br><span class="line">    </span><br><span class="line">        Assert.assertEquals(<span class="number">1</span>, pageData.getSize());</span><br><span class="line">        Assert.assertEquals(userVO.getUserName(), pageData.getList().get(<span class="number">0</span>).getUserName());</span><br><span class="line">        Assert.assertEquals(userVO.getAge(), pageData.getList().get(<span class="number">0</span>).getAge());</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 验证依赖方法</span></span><br><span class="line">        <span class="comment">// 验证依赖方法: userDAO.countByCompany</span></span><br><span class="line">        Mockito.verify(userDAO).countByCompany(companyId);</span><br><span class="line">        <span class="comment">// 验证依赖方法: userDAO.queryByCompany</span></span><br><span class="line">        Mockito.verify(userDAO).queryByCompany(companyId, startIndex, pageSize);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 验证依赖对象</span></span><br><span class="line">        Mockito.verifyNoMoreInteractions(userDAO);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>需要加上verify的原因：</p><ol><li>验证mock的方法是否有调用及调用次数</li><li>入参是否正确</li></ol><h2 id="单元测试最佳实践"><a href="#单元测试最佳实践" class="headerlink" title="单元测试最佳实践"></a>单元测试最佳实践</h2><p>【强制】单元测试需要写在各自模块下的test包下，路径与实际代码一致</p><p>【强制】单元测试覆盖率的统计是以执行过测试代码为准，假如有多个分支逻辑，单测里面必须覆盖所有逻辑</p><p>【强制】返回结果必须做断言判断，看情况判断具体字段，每层关注点不一样，最主要的是关注有效性，哪个地方容易出问题单元测试要更详细，单元测试的有效性保证代码质量</p><ul><li>manager层：正常manager层只关心事务及缓存相关，若无特殊逻辑则简单校验即可</li><li>service层：重点为service层的逻辑分支需全部覆盖，关键字段、逻辑需判断是否符合预期</li><li>rpc层：需判断调用方的返回参数是否为空，校验必须字段是否符合预期。部分抛异常再自己捕获的不需要mock异常情况<ul><li>带有属性转换的必须单独抽离到assember类，单元测试判断入参出参是否正确</li></ul></li><li>provider层、mq层：<ul><li>既要包含调用JSF的功能测试类，也要有单独Mock单元测试</li><li>带有属性转换的必须单独抽离到assember类，单元测试判断入参出参是否正确</li><li>对于JSF功能测试这种单元测试需要在类名加上@ignore注解，以免gitrunner执行这样的单元测试，避免浪费不必要的资源</li></ul></li><li>api层：配置忽略，不需要写单元测试</li><li>domain层：配置忽略，不需要写单元测试</li><li>common层：对于工具类等需要单独写单元测试</li></ul><p>【强制】核心业务、核心应用、核心模块的增量代码确保单元测试通过</p><p>【推荐】编写单元测试代码遵守BCDE原则，以保证被测试模块的交付质量</p><ul><li>B:Border，边界值测试，包括循环边界、特殊取值、特殊时间点、数序等</li><li>C:Correct，正确的输入，并得到预期的结果</li><li>D:Design，与设计文档相结合，来编写单元测试</li><li>E:Error，强制错误信息输入(如:非法数据、异常流程、非业务允许输入等)，并得到预期的结果</li></ul><p>【推荐】不要对单元测试存在如下误解</p><ul><li>那是测试同学干的事情</li><li>单元测试代码不需要维护</li><li>单元测试与线上故障没有辩证关系</li></ul><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="FIRST原则F-FAST-快速原则"><a href="#FIRST原则F-FAST-快速原则" class="headerlink" title="FIRST原则F-FAST(快速原则)"></a>FIRST原则F-FAST(快速原则)</h3><p>单元测试应该是可以快速运行的，在各种测试方法中，单元测试的运行速度是最快的，通常应该在几分钟内运行完毕<br><strong>I-Independent(独立原则)</strong><br>单元测试应该是可以独立运行的，单元测试用例互相无强依赖，无对外部资源的强依赖<br><strong>R-Repeatable(可重复原则)</strong><br>单元测试应该可以稳定重复的运行，并且每次运行的结果都是相同的<br><strong>S-Self Validating(自我验证原则)</strong><br>单元测试应该是用例自动进行验证的，不能依赖人工验证<br><strong>T-Timely(及时原则）</strong><br>单元测试必须及时的进行编写，更新和维护，以保证用例可以随着业务代码的变化动态的保障质量</p><h3 id="AIR原则"><a href="#AIR原则" class="headerlink" title="AIR原则"></a>AIR原则</h3><p><strong>A-Automatic(自动化原则)</strong><br>单元测试应该是自动运行，自动校验，自动给出结果<br><strong>I-Independent(独立原则)</strong><br>单元测试应该是独立运行，互相之间无依赖，对外部资源无依赖，多次运行之间无依赖<br><strong>R-Repeatable(可重复原则)</strong><br>单元测试是可重复运行的，每次的结果都稳定可靠</p><h3 id="Junit注解说明"><a href="#Junit注解说明" class="headerlink" title="Junit注解说明"></a>Junit注解说明</h3><p><strong>@Test</strong><br>在junit3中，是通过对测试类和测试方法的命名来确定是否是测试，且所有的测试类必须继承junit的测试基类。在junit4中，定义一个测试方法变得简单很多，只需要在方法前加上@Test就行了。<br>注意：测试方法必须是public void，即公共、无返回数据。可以抛出异常。</p><p><strong>@Ignore</strong><br>有时候我们想暂时不运行某些测试方法\测试类，可以在方法前加上这个注解。在运行结果中，junit会统计忽略的用例数，来提醒你。</p><p><strong>@BeforeClass</strong><br>当我们运行几个有关联的用例时，可能会在数据准备或其它前期准备中执行一些相同的命令，这个时候为了让代码更清晰，更少冗余，可以将公用的部分提取出来，放在一个方法里，并为这个方法注解@BeforeClass。意思是在测试类里所有用例运行之前，运行一次这个方法。例如创建数据库连接、读取文件等。<br>注意：方法名可以任意，但必须是public static void，即公开、静态、无返回。这个方法只会运行一次。</p><p><strong>@AfterClass</strong><br>跟@BeforeClass对应，在测试类里所有用例运行之后，运行一次。用于处理一些测试后续工作，例如清理数据，恢复现场。<br>注意：同样必须是public static void，即公开、静态、无返回。这个方法只会运行一次。</p><p><strong>@Before</strong><br>与@BeforeClass的区别在于，@Before不止运行一次，它会在每个用例运行之前都运行一次。主要用于一些独立于用例之间的准备工作。<br>比如两个用例都需要读取数据库里的用户A信息，但第一个用例会删除这个用户A，而第二个用例需要修改用户A。那么可以用@BeforeClass创建数据库连接。用@Before来插入一条用户A信息。<br>注意：必须是public void，不能为static。不止运行一次，根据用例数而定。</p><p><strong>@After</strong><br>与@Before对应。</p><p><strong>@Runwith</strong></p><ul><li>首先要分清几个概念：测试方法、测试类、测试集、测试运行器。</li><li>其中测试方法就是用@Test注解的一些函数。</li><li>测试类是包含一个或多个测试方法的一个Test.java文件。</li><li>测试集是一个suite，可能包含多个测试类。</li><li>测试运行器则决定了用什么方式偏好去运行这些测试集/类/方法。</li><li>而@Runwith就是放在测试类名之前，用来确定这个类怎么运行的。也可以不标注，会使用默认运行器。常见的运行器有： <ul><li>@RunWith(Parameterized.class) 参数化运行器，配合@Parameters使用junit的参数化功能</li><li>@RunWith(Suite.class) @SuiteClasses({ATest.class,BTest.class,CTest.class})测试集运行器配合使用测试集功能</li><li>@RunWith(JUnit4.class) junit4的默认运行器</li><li>@RunWith(JUnit38ClassRunner.class) 用于兼容junit3.8的运行器</li><li>一些其它运行器具备更多功能。例如@RunWith(SpringJUnit4ClassRunner.class)集成了spring的一些功能</li></ul></li></ul><p><strong>@Parameters</strong><br>  用于使用参数化功能。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;浅谈单元测试&quot;&gt;&lt;a href=&quot;#浅谈单元测试&quot; class=&quot;headerlink&quot; title=&quot;浅谈单元测试&quot;&gt;&lt;/a&gt;浅谈单元测试&lt;/h2&gt;&lt;p&gt;这是单元测试吗？&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;
      
    
    </summary>
    
      <category term="单元测试" scheme="https://kyrie17.github.io/categories/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="Junit" scheme="https://kyrie17.github.io/tags/Junit/"/>
    
      <category term="Mockito" scheme="https://kyrie17.github.io/tags/Mockito/"/>
    
  </entry>
  
  <entry>
    <title>频繁FullGC问题排查</title>
    <link href="https://kyrie17.github.io/2023/08/02/%E9%A2%91%E7%B9%81FullGC%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/"/>
    <id>https://kyrie17.github.io/2023/08/02/频繁FullGC问题排查/</id>
    <published>2023-08-02T14:30:36.000Z</published>
    <updated>2023-08-02T14:40:36.789Z</updated>
    
    <content type="html"><![CDATA[<h1 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h1><p>当我们还沉浸在神机平台上线了第一个推理服务喜悦中，一个个报警打破了这个美丽的早上。伴随着早上的业务高峰，JVM频繁出现了FullGC的问题。大家都明白，对于Java程序猿来说，频繁FullGC是不能接受的，于是开启了我们问题排查之旅。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/aviator1.png" alt="aviator1" title>                </div>                <div class="image-caption">aviator1</div>            </figure></p><p>结合着堆外内存起伏以及GC日志，不难发现是MetaSpace触发的FullGC。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/aviator2.png" alt="aviator2" title>                </div>                <div class="image-caption">aviator2</div>            </figure></p><h1 id="问题定位"><a href="#问题定位" class="headerlink" title="问题定位"></a>问题定位</h1><p>可以看到经过FullGC后MetaSpace内存是有回落的，那MetaSpace中的类满足什么条件才能够被当成垃圾被卸载回收呢？</p><ol><li>该类所有的实例都已经被回收</li><li>加载该类的ClassLoader已经被回收</li><li>该类对应的java.lang.Class对象没有被任何地方引用</li></ol><p>依据上面的思路，我们dump出MetaSpace和heap<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/aviator3.png" alt="aviator3" title>                </div>                <div class="image-caption">aviator3</div>            </figure></p><p>着重观察了一下Class对象的Incoming references，如下图：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/aviator4.png" alt="aviator4" title>                </div>                <div class="image-caption">aviator4</div>            </figure></p><p>可以看到存在接近8万个由Scrip_${timestamp}_${idx}类型的Class，且都指向了com.googlecode.aviator.ClassExpression，看到这里我们就看到了希望，由于AB分流的模块中使用了表达式引擎AviatorEvaluator，推测是有不停的动态创建类的过程，且类没有被回收，我们回到我们代码中继续探寻问题的根源。</p><p>这是编译表达式的入口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编译流量框定表达式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> express 流量表达式字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 流量表达式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Expression <span class="title">checkExpress</span><span class="params">(String express)</span> </span>&#123;</span><br><span class="line">    Expression expression = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        expression = AviatorEvaluator.compile(express);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.error(<span class="string">"编译流量框定表达式出现异常"</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> expression;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Expression <span class="title">compile</span><span class="params">(String expression)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 可以看到默认是使用无缓存的策略进行编译的</span></span><br><span class="line">    <span class="keyword">return</span> compile(expression, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>继续跟进来compile方法，主要分为缓存和无缓存两个策略，我们先看下无缓存的入口innerCompile方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Expression <span class="title">compile</span><span class="params">(<span class="keyword">final</span> String expression, <span class="keyword">final</span> <span class="keyword">boolean</span> cached)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (expression != <span class="keyword">null</span> &amp;&amp; expression.trim().length() != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cached) &#123;</span><br><span class="line">            FutureTask&lt;Expression&gt; task = (FutureTask)<span class="keyword">this</span>.cacheExpressions.get(expression);</span><br><span class="line">            <span class="keyword">if</span> (task != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.getCompiledExpression(expression, task);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                task = <span class="keyword">new</span> FutureTask(<span class="keyword">new</span> Callable&lt;Expression&gt;() &#123;</span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Expression <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        <span class="keyword">return</span> AviatorEvaluatorInstance.<span class="keyword">this</span>.innerCompile(expression, cached);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                FutureTask&lt;Expression&gt; existedTask = (FutureTask)<span class="keyword">this</span>.cacheExpressions.putIfAbsent(expression, task);</span><br><span class="line">                <span class="keyword">if</span> (existedTask == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    existedTask = task;</span><br><span class="line">                    task.run();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.getCompiledExpression(expression, existedTask);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 走无缓存的方式</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.innerCompile(expression, cached);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> CompileExpressionErrorException(<span class="string">"Blank expression"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>编译过程主要分为文法分析、初始化编码生成器、预发解析器生成、预发解析这四个过程，不过和我们排查问题相关的主要是初始化编码生成器和预发解析两个阶段，所以我们也只看这个两个过程。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Expression <span class="title">innerCompile</span><span class="params">(String expression, <span class="keyword">boolean</span> cached)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 文法分析</span></span><br><span class="line">    ExpressionLexer lexer = <span class="keyword">new</span> ExpressionLexer(<span class="keyword">this</span>, expression);</span><br><span class="line">    <span class="comment">// 初始化编码生成器</span></span><br><span class="line">    CodeGenerator codeGenerator = <span class="keyword">this</span>.newCodeGenerator(cached);</span><br><span class="line">    <span class="comment">// 预发解析器生成</span></span><br><span class="line">    ExpressionParser parser = <span class="keyword">new</span> ExpressionParser(<span class="keyword">this</span>, lexer, codeGenerator);</span><br><span class="line">    <span class="comment">// 预发解析，实例化Class，最终的Expression对象</span></span><br><span class="line">    Expression exp = parser.parse();</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.getOptionValue(Options.TRACE_EVAL).bool) &#123;</span><br><span class="line">        ((BaseExpression)exp).setExpression(expression);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> exp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们直接先看一下编码生成器的初始化阶段，这个过程主要是生成一个类加载器且封装成一个ASMCodeGenerator：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> CodeGenerator <span class="title">newCodeGenerator</span><span class="params">(<span class="keyword">boolean</span> cached)</span> </span>&#123;</span><br><span class="line">    AviatorClassLoader classLoader = <span class="keyword">this</span>.getAviatorClassLoader(cached);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.newCodeGenerator(classLoader);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> AviatorClassLoader <span class="title">getAviatorClassLoader</span><span class="params">(<span class="keyword">boolean</span> cached)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 无缓存策略都会创建一个AviatorClassLoader类加载器</span></span><br><span class="line">    <span class="keyword">return</span> cached ? <span class="keyword">this</span>.aviatorClassLoader : <span class="keyword">new</span> AviatorClassLoader(Thread.currentThread().getContextClassLoader());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> CodeGenerator <span class="title">newCodeGenerator</span><span class="params">(AviatorClassLoader classLoader)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (<span class="keyword">this</span>.getOptimizeLevel()) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">            ASMCodeGenerator asmCodeGenerator = <span class="keyword">new</span> ASMCodeGenerator(<span class="keyword">this</span>, classLoader, <span class="keyword">this</span>.traceOutputStream, <span class="keyword">this</span>.getOptionValue(Options.TRACE).bool);</span><br><span class="line">            asmCodeGenerator.start();</span><br><span class="line">            <span class="keyword">return</span> asmCodeGenerator;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">            <span class="comment">// 默认走EVAL</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> OptimizeCodeGenerator(<span class="keyword">this</span>, classLoader, <span class="keyword">this</span>.traceOutputStream, <span class="keyword">this</span>.getOptionValue(Options.TRACE).bool);</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Unknow option "</span> + <span class="keyword">this</span>.getOptimizeLevel());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">OptimizeCodeGenerator</span><span class="params">(AviatorEvaluatorInstance instance, ClassLoader classLoader, OutputStream traceOutStream, <span class="keyword">boolean</span> trace)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.instance = instance;</span><br><span class="line">    <span class="keyword">this</span>.codeGen = <span class="keyword">new</span> ASMCodeGenerator(instance, (AviatorClassLoader)classLoader, traceOutStream, trace);</span><br><span class="line">    <span class="keyword">this</span>.trace = trace;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ASMCodeGenerator</span><span class="params">(AviatorEvaluatorInstance instance, AviatorClassLoader classLoader, OutputStream traceOut, <span class="keyword">boolean</span> trace)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.currentLabel = START_LABEL;</span><br><span class="line">    <span class="keyword">this</span>.l0stack = <span class="keyword">new</span> Stack();</span><br><span class="line">    <span class="keyword">this</span>.l1stack = <span class="keyword">new</span> Stack();</span><br><span class="line">    <span class="keyword">this</span>.methodMetaDataStack = <span class="keyword">new</span> ArrayDeque();</span><br><span class="line">    <span class="keyword">this</span>.classLoader = classLoader;</span><br><span class="line">    <span class="keyword">this</span>.instance = instance;</span><br><span class="line">    <span class="keyword">this</span>.compileEnv = <span class="keyword">new</span> Env();</span><br><span class="line">    <span class="keyword">this</span>.compileEnv.setInstance(<span class="keyword">this</span>.instance);</span><br><span class="line">    <span class="comment">// 看到这有没有觉得很熟悉了呢，没错，这就是我们在MAT中看到的class</span></span><br><span class="line">    <span class="keyword">this</span>.className = <span class="string">"Script_"</span> + System.currentTimeMillis() + <span class="string">"_"</span> + CLASS_COUNTER.getAndIncrement();</span><br><span class="line">    <span class="keyword">this</span>.classWriter = <span class="keyword">new</span> ClassWriter(<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">this</span>.visitClass();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>紧跟着看下语法解析阶段，这也是创建Class和Expression对象的地方了：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Expression <span class="title">parse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.statement();</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.lookhead != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">this</span>.reportSyntaxError(<span class="string">"Unexpect token '"</span> + <span class="keyword">this</span>.currentTokenLexeme() + <span class="string">"'"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 主要看下这个实例化方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.codeGenerator.getResult();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Expression <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.end();</span><br><span class="line">    <span class="keyword">byte</span>[] bytes = <span class="keyword">this</span>.classWriter.toByteArray();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 这里就是生成Class对象的地方了</span></span><br><span class="line">        Class&lt;?&gt; defineClass = ClassDefiner.defineClass(<span class="keyword">this</span>.className, Expression.class, bytes, <span class="keyword">this</span>.classLoader);</span><br><span class="line">        Constructor&lt;?&gt; constructor = defineClass.getConstructor(AviatorEvaluatorInstance.class, List.class);</span><br><span class="line">        ClassExpression exp = (ClassExpression)constructor.newInstance(<span class="keyword">this</span>.instance, <span class="keyword">new</span> ArrayList(<span class="keyword">this</span>.varTokens.keySet()));</span><br><span class="line">        exp.setLambdaBootstraps(<span class="keyword">this</span>.lambdaBootstraps);</span><br><span class="line">        exp.setFuncsArgs(<span class="keyword">this</span>.funcsArgs);</span><br><span class="line">        <span class="keyword">return</span> exp;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ExpressionRuntimeException var5) &#123;</span><br><span class="line">        <span class="keyword">throw</span> var5;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable var6) &#123;</span><br><span class="line">        <span class="keyword">if</span> (var6.getCause() <span class="keyword">instanceof</span> ExpressionRuntimeException) &#123;</span><br><span class="line">            <span class="keyword">throw</span> (ExpressionRuntimeException)var6.getCause();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> CompileExpressionErrorException(<span class="string">"define class error"</span>, var6);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>柳暗花明又一村！可以得出我们的结论了，无缓存的策略下，每次编译表达式都会创建一个ClassLoader和Class，因而MetaSpace的空间会逐步被占满。</p><h1 id="问题解决"><a href="#问题解决" class="headerlink" title="问题解决"></a>问题解决</h1><p>问题的解决方案也很简单，我们使用上带缓存的编译方法就可以了！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 编译流量框定表达式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> express 流量表达式字符串</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 流量表达式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Expression <span class="title">checkExpress</span><span class="params">(String express)</span> </span>&#123;</span><br><span class="line">    Expression expression = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 看这里！</span></span><br><span class="line">        expression = AviatorEvaluator.compile(express, <span class="keyword">true</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.error(<span class="string">"编译流量框定表达式出现异常"</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> expression;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Expression <span class="title">compile</span><span class="params">(String expression, <span class="keyword">boolean</span> cached)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getInstance().compile(expression, cached);</span><br><span class="line">&#125;</span><br><span class="line">我们继续刨根问底，看看使用缓存的策略是如何生成Expression的：</span><br><span class="line"><span class="function"><span class="keyword">public</span> Expression <span class="title">compile</span><span class="params">(<span class="keyword">final</span> String expression, <span class="keyword">final</span> <span class="keyword">boolean</span> cached)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (expression != <span class="keyword">null</span> &amp;&amp; expression.trim().length() != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cached) &#123;</span><br><span class="line">            <span class="comment">// 从缓存中取</span></span><br><span class="line">            FutureTask&lt;Expression&gt; task = (FutureTask)<span class="keyword">this</span>.cacheExpressions.get(expression);</span><br><span class="line">            <span class="keyword">if</span> (task != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.getCompiledExpression(expression, task);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                task = <span class="keyword">new</span> FutureTask(<span class="keyword">new</span> Callable&lt;Expression&gt;() &#123;</span><br><span class="line">                    <span class="function"><span class="keyword">public</span> Expression <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">                        <span class="comment">// 还是调用无缓存策略的innerCompile方法</span></span><br><span class="line">                        <span class="keyword">return</span> AviatorEvaluatorInstance.<span class="keyword">this</span>.innerCompile(expression, cached);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                <span class="comment">// 将结果放入缓存中</span></span><br><span class="line">                FutureTask&lt;Expression&gt; existedTask = (FutureTask)<span class="keyword">this</span>.cacheExpressions.putIfAbsent(expression, task);</span><br><span class="line">                <span class="keyword">if</span> (existedTask == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    existedTask = task;</span><br><span class="line">                    task.run();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.getCompiledExpression(expression, existedTask);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.innerCompile(expression, cached);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> CompileExpressionErrorException(<span class="string">"Blank expression"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在使用了缓存的策略后，MetaSpace保持稳定，也没有出现频繁FullGC的情况了，至此我们的问题排查，优化过程就告一段落啦～<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/aviator5.png" alt="aviator5" title>                </div>                <div class="image-caption">aviator5</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/aviator6.png" alt="aviator6" title>                </div>                <div class="image-caption">aviator6</div>            </figure></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在我们开发的过程中，不可避免的要接触一些陌生的框架，我们并不排斥新的东西，但我们在使用前要了解其是如何实现的、有什么优劣势，即使做不到知其所以然，我们也可以度娘一下其他人是如何使用的，有哪些可能会踩什么的坑！汲取前人的教训，我们会在保障系统稳定性的道路上，走的更加的安心和舒心～</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;现象&quot;&gt;&lt;a href=&quot;#现象&quot; class=&quot;headerlink&quot; title=&quot;现象&quot;&gt;&lt;/a&gt;现象&lt;/h1&gt;&lt;p&gt;当我们还沉浸在神机平台上线了第一个推理服务喜悦中，一个个报警打破了这个美丽的早上。伴随着早上的业务高峰，JVM频繁出现了FullGC的问题。
      
    
    </summary>
    
      <category term="问题排查" scheme="https://kyrie17.github.io/categories/%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/"/>
    
    
      <category term="FullGC" scheme="https://kyrie17.github.io/tags/FullGC/"/>
    
      <category term="MetaSpace" scheme="https://kyrie17.github.io/tags/MetaSpace/"/>
    
      <category term="aviator" scheme="https://kyrie17.github.io/tags/aviator/"/>
    
  </entry>
  
  <entry>
    <title>线程阻塞问题排查</title>
    <link href="https://kyrie17.github.io/2023/08/02/%E7%BA%BF%E7%A8%8B%E9%98%BB%E5%A1%9E%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/"/>
    <id>https://kyrie17.github.io/2023/08/02/线程阻塞问题排查/</id>
    <published>2023-08-02T14:21:11.000Z</published>
    <updated>2023-08-02T14:25:52.479Z</updated>
    
    <content type="html"><![CDATA[<h1 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h1><p>线上服务机器，没有生产日志，JSF接口状态正常</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>通过jstack发现异常<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&quot;JSF-BZ-22000-22-T-552&quot; #908 daemon prio=5 os_prio=0 tid=0x00007f925c02c000 nid=0x28dcf waiting for monitor entry [0x00007f8cc82c0000]</span><br><span class="line">   java.lang.Thread.State: BLOCKED (on object monitor)</span><br><span class="line">at org.apache.logging.log4j.core.appender.OutputStreamManager.writeBytes(OutputStreamManager.java:352)</span><br><span class="line">- waiting to lock &lt;0x00000006c09d6730&gt; (a org.apache.logging.log4j.core.appender.OutputStreamManager)</span><br><span class="line"></span><br><span class="line">// ...</span><br><span class="line"></span><br><span class="line">&quot;JSF-BZ-22000-22-T-335&quot; #691 daemon prio=5 os_prio=0 tid=0x00007f9270016800 nid=0x28811 runnable [0x00007f9187af9000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line">at java.io.FileOutputStream.writeBytes(Native Method)</span><br><span class="line">at java.io.FileOutputStream.write(FileOutputStream.java:326)</span><br><span class="line">at java.io.BufferedOutputStream.write(BufferedOutputStream.java:122)</span><br><span class="line">- locked &lt;0x00000006c056d8a0&gt; (a java.io.BufferedOutputStream)</span><br><span class="line">at java.io.PrintStream.write(PrintStream.java:480)</span><br><span class="line">- locked &lt;0x00000006c052f620&gt; (a java.io.PrintStream)</span><br><span class="line">at org.apache.logging.log4j.core.util.CloseShieldOutputStream.write(CloseShieldOutputStream.java:53)</span><br><span class="line">at org.apache.logging.log4j.core.appender.OutputStreamManager.writeToDestination(OutputStreamManager.java:250)</span><br><span class="line">- locked &lt;0x00000006c09d6730&gt; (a org.apache.logging.log4j.core.appender.OutputStreamManager)</span><br><span class="line">at org.apache.logging.log4j.core.appender.OutputStreamManager.flushBuffer(OutputStreamManager.java:283)</span><br><span class="line">- locked &lt;0x00000006c09d6730&gt; (a org.apache.logging.log4j.core.appender.OutputStreamManager)</span><br><span class="line">at org.apache.logging.log4j.core.appender.OutputStreamManager.drain(OutputStreamManager.java:343)</span><br><span class="line">at org.apache.logging.log4j.core.layout.TextEncoderHelper.drainIfByteBufferFull(TextEncoderHelper.java:258)</span><br><span class="line">- locked &lt;0x00000006c09d6730&gt; (a org.apache.logging.log4j.core.appender.OutputStreamManager)</span><br><span class="line">at org.apache.logging.log4j.core.layout.TextEncoderHelper.writeAndEncodeAsMuchAsPossible(TextEncoderHelper.java:197)</span><br><span class="line">at org.apache.logging.log4j.core.layout.TextEncoderHelper.encodeChunkedText(TextEncoderHelper.java:157)</span><br><span class="line">- locked &lt;0x00000006c09d6730&gt; (a org.apache.logging.log4j.core.appender.OutputStreamManager)</span><br><span class="line"></span><br><span class="line">   Locked ownable synchronizers:</span><br><span class="line">- &lt;0x0000000703465430&gt; (a java.util.concurrent.ThreadPoolExecutor$Worker)</span><br></pre></td></tr></table></figure></p><p>可以看到几乎所有杰夫线程在都被阻塞在<strong>OutputStreamManager.writeBytes</strong>上，等待锁<0x0000000703465430>释放。</0x0000000703465430></p><p>在 <a href="https://issues.apache.org/jira/browse/LOG4J2-880" target="_blank" rel="noopener">https://issues.apache.org/jira/browse/LOG4J2-880</a> 上找到了答案，大概意思是<br>记录日志的时候，如果往控制台打印输出日志的话，会把日志写入缓存，控制台会从缓存中取，但比如控制台没取，这时候控制台会暂停输出，不从缓存中取东西，缓存内容就不会清，日志程序会一直往里写，直到写满，线程就会停止写入，等待缓存可用，表现在程序里，就是writeBytes函数不返回，持有的锁不释放。</p><p>部署在docker中的时候，因为docker容器会一直获取标准输出的内容，自己记录docker日志，但是当缓存中的东西比较多的时候，比如日志长度特别长，docker没办法及时清空缓存，也会导致log4j出现这个问题。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>生产系统中无需往标准输入输出写日志，将日志配置文件中ConsoleAppender组件去除，问题得以解决。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;现象&quot;&gt;&lt;a href=&quot;#现象&quot; class=&quot;headerlink&quot; title=&quot;现象&quot;&gt;&lt;/a&gt;现象&lt;/h1&gt;&lt;p&gt;线上服务机器，没有生产日志，JSF接口状态正常&lt;/p&gt;
&lt;h1 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlin
      
    
    </summary>
    
      <category term="问题排查" scheme="https://kyrie17.github.io/categories/%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/"/>
    
    
      <category term="线程池" scheme="https://kyrie17.github.io/tags/%E7%BA%BF%E7%A8%8B%E6%B1%A0/"/>
    
      <category term="Log4J" scheme="https://kyrie17.github.io/tags/Log4J/"/>
    
      <category term="JSF" scheme="https://kyrie17.github.io/tags/JSF/"/>
    
      <category term="docker" scheme="https://kyrie17.github.io/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>频繁young gc问题排查</title>
    <link href="https://kyrie17.github.io/2023/08/02/%E9%A2%91%E7%B9%81young-gc%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/"/>
    <id>https://kyrie17.github.io/2023/08/02/频繁young-gc问题排查/</id>
    <published>2023-08-02T13:58:35.000Z</published>
    <updated>2023-08-02T14:19:03.140Z</updated>
    
    <content type="html"><![CDATA[<h1 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h1><p>实习生对新开发的推理接口进行压测时，发现tp99异常，大概在9000ms左右<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/acr1.png" alt="acr1" title>                </div>                <div class="image-caption">acr1</div>            </figure></p><p>young gc也十分频繁，还伴随着2次的full gc<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/acr2.png" alt="acr2" title>                </div>                <div class="image-caption">acr2</div>            </figure></p><p>cpu使用率也飙升到了100%<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/acr3.png" alt="acr3" title>                </div>                <div class="image-caption">acr3</div>            </figure></p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>通过jstask发现大量线程处于CaseFormat.convert方法中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&quot;JSF-BZ-22000-23-T-110&quot; #247 daemon prio=5 os_prio=0 tid=0x00007fb0d8110800 nid=0x527 runnable [0x00007faf366ed000]</span><br><span class="line">   java.lang.Thread.State: RUNNABLE</span><br><span class="line">at java.util.Arrays.copyOfRange(Arrays.java:3664)</span><br><span class="line">at java.lang.String.&lt;init&gt;(String.java:207)</span><br><span class="line">at java.lang.StringBuilder.toString(StringBuilder.java:407)</span><br><span class="line">at com.google.common.base.CaseFormat.convert(CaseFormat.java:150)</span><br><span class="line">at com.google.common.base.CaseFormat.to(CaseFormat.java:128)</span><br><span class="line">at com.jd.jdl.sj.acr.utils.JDBCUtils.Populate(JDBCUtils.java:184)</span><br><span class="line">at com.jd.jdl.sj.acr.mapper.RecommendedMapper.queryByAssociateData(RecommendedMapper.java:87)</span><br><span class="line">at com.jd.jdl.sj.acr.algo.AcrAlgoStrategyA.predict(AcrAlgoStrategyA.java:73)</span><br><span class="line">at com.jd.jdl.sj.acr.algo.AcrAlgoStrategyB.predict(AcrAlgoStrategyB.java:56)</span><br><span class="line">at com.jd.jdl.sj.predict.service.impl.AlgoServiceImpl.predict(AlgoServiceImpl.java:26)</span><br><span class="line">at com.jd.jdl.sj.predict.service.impl.AlgoServiceImpl$$FastClassBySpringCGLIB$$211fefd6.invoke(&lt;generated&gt;)</span><br></pre></td></tr></table></figure></p><p>且jmap中发现jvm内存中存在大量String对象<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/acr4.png" alt="acr4" title>                </div>                <div class="image-caption">acr4</div>            </figure></p><p>最终定位到问题代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List <span class="title">Populate</span><span class="params">(ResultSet rs, Class cc)</span> <span class="keyword">throws</span> SQLException, InstantiationException, IllegalAccessException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//结果集 中列的名称和类型的信息</span></span><br><span class="line">        ResultSetMetaData rsm = rs.getMetaData();</span><br><span class="line">        <span class="keyword">int</span> colNumber = rsm.getColumnCount();</span><br><span class="line">        List res = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        Field[] fields = cc.getDeclaredFields();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//遍历每条记录</span></span><br><span class="line">        <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">            <span class="comment">//实例化对象</span></span><br><span class="line">            Object obj = cc.newInstance();</span><br><span class="line">            <span class="comment">//取出每一个字段进行赋值</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= colNumber; i++) &#123;</span><br><span class="line">                Object value = rs.getObject(i);</span><br><span class="line">                <span class="comment">//匹配实体类中对应的属性</span></span><br><span class="line">                <span class="keyword">for</span> (Field f : fields) &#123;</span><br><span class="line">                    <span class="comment">// 驼峰转下划线命名</span></span><br><span class="line">                    String name = CaseFormat.LOWER_CAMEL.to(CaseFormat.LOWER_UNDERSCORE, f.getName());</span><br><span class="line">                    <span class="keyword">if</span> (name.equals(rsm.getColumnName(i))) &#123;</span><br><span class="line">                        <span class="keyword">boolean</span> flag = f.isAccessible();</span><br><span class="line">                        f.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                        f.set(obj, value);</span><br><span class="line">                        f.setAccessible(flag);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            res.add(obj);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BusinessException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这段代码是通过jdbc查询结果后，需要将ResultSet映射成pojo中的结果。<br>主要问题出在这行驼峰转下划线的代码中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String name = CaseFormat.LOWER_CAMEL.to(CaseFormat.LOWER_UNDERSCORE, f.getName());</span><br></pre></td></tr></table></figure></p><p>查询一次数据库大概返回400行数据，每条数据25个字段，一次查询就会执行2.5w次这行代码，创建出2.5w个String。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>将驼峰转下划线前置，这样一次调用只会执行25次这个方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List <span class="title">Populate</span><span class="params">(ResultSet rs, Class cc)</span> <span class="keyword">throws</span> SQLException, InstantiationException, IllegalAccessException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line"></span><br><span class="line">        List res = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        Field[] fields = cc.getDeclaredFields();</span><br><span class="line">        Map&lt;String, Field&gt; fieldMap = <span class="keyword">new</span> HashMap&lt;&gt;(fields.length);</span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            String fieldUnderscoreName = CaseFormat.LOWER_CAMEL.to(CaseFormat.LOWER_UNDERSCORE, field.getName());</span><br><span class="line">            fieldMap.put(fieldUnderscoreName, field);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//结果集 中列的名称和类型的信息</span></span><br><span class="line">        ResultSetMetaData rsm = rs.getMetaData();</span><br><span class="line">        <span class="comment">//遍历每条记录</span></span><br><span class="line">        <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">            <span class="comment">//实例化对象</span></span><br><span class="line">            Object obj = cc.newInstance();</span><br><span class="line">            <span class="comment">//取出每一个字段进行赋值</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= rsm.getColumnCount(); i++) &#123;</span><br><span class="line">                Object value = rs.getObject(i);</span><br><span class="line">                String columnName = rsm.getColumnName(i);</span><br><span class="line"></span><br><span class="line">                Field field = fieldMap.get(columnName);</span><br><span class="line">                <span class="keyword">if</span> (field == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//                    boolean flag = field.isAccessible();</span></span><br><span class="line">                field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                field.set(obj, value);</span><br><span class="line">                <span class="comment">//                    field.setAccessible(flag);</span></span><br><span class="line">            &#125;</span><br><span class="line">            res.add(obj);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BusinessException();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>压测结果性能大幅提升，tp99在20ms以下。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/acr5.png" alt="acr5" title>                </div>                <div class="image-caption">acr5</div>            </figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;现象&quot;&gt;&lt;a href=&quot;#现象&quot; class=&quot;headerlink&quot; title=&quot;现象&quot;&gt;&lt;/a&gt;现象&lt;/h1&gt;&lt;p&gt;实习生对新开发的推理接口进行压测时，发现tp99异常，大概在9000ms左右&lt;br&gt;&lt;figure class=&quot;image-bubble&quot;
      
    
    </summary>
    
      <category term="问题排查" scheme="https://kyrie17.github.io/categories/%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/"/>
    
    
      <category term="JVM" scheme="https://kyrie17.github.io/tags/JVM/"/>
    
      <category term="young-gc" scheme="https://kyrie17.github.io/tags/young-gc/"/>
    
  </entry>
  
  <entry>
    <title>加载catboost模型导致Java进程异常退出</title>
    <link href="https://kyrie17.github.io/2023/08/01/%E5%8A%A0%E8%BD%BDcatboost%E6%A8%A1%E5%9E%8B%E5%AF%BC%E8%87%B4Java%E8%BF%9B%E7%A8%8B%E5%BC%82%E5%B8%B8%E9%80%80%E5%87%BA/"/>
    <id>https://kyrie17.github.io/2023/08/01/加载catboost模型导致Java进程异常退出/</id>
    <published>2023-08-01T14:43:32.000Z</published>
    <updated>2023-08-02T14:19:27.922Z</updated>
    
    <content type="html"><![CDATA[<h1 id="现象"><a href="#现象" class="headerlink" title="现象"></a>现象</h1><p>在对catboost模型（大小1g）做切换测试的时候，出现Java进程异常退出的情况。</p><p>JVM监控：<br>内存稳定，且没有出现FullGC，没有发生oom<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/catboost1.png" alt="catboost1" title>                </div>                <div class="image-caption">catboost1</div>            </figure></p><p>MDC监控：<br>cpu使用率接近70%，内存使用率接近100%<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/catboost2.png" alt="catboost2" title>                </div>                <div class="image-caption">catboost2</div>            </figure></p><p><strong>怀疑使用了堆外内存，导致容器内存打满。</strong><br>排查加载catboost模型代码，发现catboost提供sdk中loadModel方法调用了JNI，推测在native方法中申请了内存。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CatBoostModel <span class="title">loadModel</span><span class="params">(InputStream in)</span> <span class="keyword">throws</span> CatBoostError, IOException </span>&#123;</span><br><span class="line">    <span class="keyword">long</span>[] handles = <span class="keyword">new</span> <span class="keyword">long</span>[<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">byte</span>[] copyBuffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">4096</span>];</span><br><span class="line">    ByteArrayOutputStream out = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> bytesRead;</span><br><span class="line">    <span class="keyword">while</span>((bytesRead = in.read(copyBuffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">        out.write(copyBuffer, <span class="number">0</span>, bytesRead);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    implLibrary.catBoostLoadModelFromArray(out.toByteArray(), handles);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> CatBoostModel(handles[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">catBoostLoadModelFromArray</span><span class="params">(@NotNull <span class="keyword">byte</span>[] data, @NotNull <span class="keyword">long</span>[] handle)</span> <span class="keyword">throws</span> CatBoostError </span>&#123;</span><br><span class="line">    CatBoostJNIImpl.checkCall(CatBoostJNIImpl.catBoostLoadModelFromArray(data, handle));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="调整堆外内存大小调整机器配置"><a href="#调整堆外内存大小调整机器配置" class="headerlink" title="调整堆外内存大小调整机器配置"></a>调整堆外内存大小调整机器配置</h1><p>8c12g -&gt; 8c16g<br>JVM堆内存参数配置不变（即堆外内存增大4g）<br>-Xms9632M<br>-Xmx9632M</p><p>JVM监控：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/catboost3.png" alt="catboost3" title>                </div>                <div class="image-caption">catboost3</div>            </figure></p><p>MDC监控：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/catboost4.png" alt="catboost4" title>                </div>                <div class="image-caption">catboost4</div>            </figure></p><p>模型切换次数由原来的1、2次，提升到7次才出现Java进程异常退出的情况，基本可以确定堆外内存搞的鬼了。</p><h1 id="主动释放模型资源"><a href="#主动释放模型资源" class="headerlink" title="主动释放模型资源"></a>主动释放模型资源</h1><p>在CatBoostModel对象被回收的时候，finalize方法中会自己调用dispose方法，释放资源<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">finalize</span><span class="params">()</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.dispose();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">super</span>.finalize();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">dispose</span><span class="params">()</span> <span class="keyword">throws</span> CatBoostError </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.handle != <span class="number">0L</span>) &#123;</span><br><span class="line">        implLibrary.catBoostFreeModel(<span class="keyword">this</span>.handle);</span><br><span class="line">        <span class="keyword">this</span>.handle = <span class="number">0L</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不过我们还是在加载新模型后，尝试主动调用释放旧模型，即增加oldModel.close()代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">convert</span><span class="params">(String modelKey, InputStream inputStream)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        CatBoostModel catBoostModel = CatBoostModel.loadModel(inputStream);</span><br><span class="line">        CatBoostModel oldModel = modelMap.get(modelKey);</span><br><span class="line">        modelMap.put(modelKey, catBoostModel);</span><br><span class="line">        <span class="keyword">if</span>(Objects.nonNull(oldModel))&#123;</span><br><span class="line">            log.info(<span class="string">"释放catboost资源"</span>);</span><br><span class="line">            oldModel.close();</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">"CatBoost init model ：&#123;&#125; success！"</span>, modelKey);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        log.error(<span class="string">"CatBoost init model ：&#123;&#125; fail！ exception ："</span>, modelKey, e);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> BusinessException(<span class="string">"CatBoost模型加载失败"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> <span class="keyword">throws</span> CatBoostError </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.dispose();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>JVM监控<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/catboost5.png" alt="catboost5" title>                </div>                <div class="image-caption">catboost5</div>            </figure></p><p>MDC监控<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/catboost6.png" alt="catboost6" title>                </div>                <div class="image-caption">catboost6</div>            </figure></p><p>还是一样存在内存泄漏的问题。</p><h1 id="NMT定位内存区域"><a href="#NMT定位内存区域" class="headerlink" title="NMT定位内存区域"></a>NMT定位内存区域</h1><blockquote><p>可以展示堆内内存、Code区域或者使用unsafe.allocateMemory和DirectByteBuffer申请的堆外内存<br>JVM启动参数增加：-XX:NativeMemoryTracking=detail</p></blockquote><p>查看命令：jcmd pid VM.native_memory detail</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">[admin@host-11-68-72-16 ~]$ jcmd 217 VM.native_memory detail</span><br><span class="line">217:</span><br><span class="line"></span><br><span class="line">Native Memory Tracking:</span><br><span class="line"></span><br><span class="line">Total: reserved=11242880KB, committed=9746476KB</span><br><span class="line">-                 Java Heap (reserved=8839168KB, committed=8839168KB)</span><br><span class="line">                            (mmap: reserved=8839168KB, committed=8839168KB) </span><br><span class="line"></span><br><span class="line">-                     Class (reserved=1176337KB, committed=143121KB)</span><br><span class="line">                            (classes #23536)</span><br><span class="line">                            (malloc=2833KB #43400) </span><br><span class="line">                            (mmap: reserved=1173504KB, committed=140288KB) </span><br><span class="line"></span><br><span class="line">-                    Thread (reserved=437769KB, committed=437769KB)</span><br><span class="line">                            (thread #425)</span><br><span class="line">                            (stack: reserved=435872KB, committed=435872KB)</span><br><span class="line">                            (malloc=1400KB #2133) </span><br><span class="line">                            (arena=498KB #849)</span><br><span class="line"></span><br><span class="line">-                      Code (reserved=548090KB, committed=84902KB)</span><br><span class="line">                            (malloc=15610KB #19166) </span><br><span class="line">                            (mmap: reserved=532480KB, committed=69292KB) </span><br><span class="line"></span><br><span class="line">-                        GC (reserved=62053KB, committed=62053KB)</span><br><span class="line">                            (malloc=36149KB #493) </span><br><span class="line">                            (mmap: reserved=25904KB, committed=25904KB) </span><br><span class="line"></span><br><span class="line">-                  Compiler (reserved=1664KB, committed=1664KB)</span><br><span class="line">                            (malloc=1533KB #2248) </span><br><span class="line">                            (arena=131KB #3)</span><br><span class="line"></span><br><span class="line">-                  Internal (reserved=38055KB, committed=38055KB)</span><br><span class="line">                            (malloc=38023KB #89946) </span><br><span class="line">                            (mmap: reserved=32KB, committed=32KB) </span><br><span class="line"></span><br><span class="line">-                    Symbol (reserved=29710KB, committed=29710KB)</span><br><span class="line">                            (malloc=27017KB #264972) </span><br><span class="line">                            (arena=2693KB #1)</span><br><span class="line"></span><br><span class="line">-    Native Memory Tracking (reserved=6936KB, committed=6936KB)</span><br><span class="line">                            (malloc=261KB #3929) </span><br><span class="line">                            (tracking overhead=6675KB)</span><br><span class="line"></span><br><span class="line">-               Arena Chunk (reserved=190KB, committed=190KB)</span><br><span class="line">                            (malloc=190KB) </span><br><span class="line"></span><br><span class="line">-                   Unknown (reserved=102908KB, committed=102908KB)</span><br><span class="line">                            (mmap: reserved=102908KB, committed=102908KB)</span><br></pre></td></tr></table></figure><p>可以发现Native Memory Tracking中，只分配了6m的空间，我们更加相信是Native Code（C代码）申请的堆外内存导致的问题。</p><h1 id="系统层面的工具定位堆外内存"><a href="#系统层面的工具定位堆外内存" class="headerlink" title="系统层面的工具定位堆外内存"></a>系统层面的工具定位堆外内存</h1><h2 id="pmap"><a href="#pmap" class="headerlink" title="pmap"></a>pmap</h2><blockquote><p>显示进程的地址空间的相关信息</p></blockquote><p>切换前<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/catboost7.png" alt="catboost7" title>                </div>                <div class="image-caption">catboost7</div>            </figure></p><p>切换后<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/catboost8.png" alt="catboost8" title>                </div>                <div class="image-caption">catboost8</div>            </figure></p><p>对比切换前后进程分配的内存空间，可以看到每次loadModel会增加700m的内存，而且旧模型申请的空间也没有释放。</p><h2 id="strace"><a href="#strace" class="headerlink" title="strace"></a>strace</h2><blockquote><p>我们可以用它来监控用户空间进程和内核的交互。如对应用程序的系统调用、信号传递与进程状态变更等进行跟踪与分析，以达到解决问题的目的。</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/catboost9.png" alt="catboost9" title>                </div>                <div class="image-caption">catboost9</div>            </figure><p>通过strace监控，切换模型过程中申请内存的命令，可以看到申请了差不多700m内存，可以与上面pmap对应上。</p><h2 id="proc-pid-smaps"><a href="#proc-pid-smaps" class="headerlink" title="/proc/pid/smaps"></a>/proc/pid/smaps</h2><p>我们通过pmap已经发现了可疑的内存区间，在/proc/pid/smaps可以找到分配内存块的起始地址和结束地址</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/catboost10.png" alt="catboost10" title>                </div>                <div class="image-caption">catboost10</div>            </figure><h2 id="gdb"><a href="#gdb" class="headerlink" title="gdb"></a>gdb</h2><p>通过gdb对可疑内存区间进行dump</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/catboost11.png" alt="catboost11" title>                </div>                <div class="image-caption">catboost11</div>            </figure><p>编码可视化其内容，进行分析，可以看到是模型相关的</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/catboost12.png" alt="catboost12" title>                </div>                <div class="image-caption">catboost12</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/catboost13.png" alt="catboost13" title>                </div>                <div class="image-caption">catboost13</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/catboost14.png" alt="catboost14" title>                </div>                <div class="image-caption">catboost14</div>            </figure><h1 id="github相似issue"><a href="#github相似issue" class="headerlink" title="github相似issue"></a>github相似issue</h1><p><a href="https://github.com/catboost/catboost/issues/1979" target="_blank" rel="noopener">https://github.com/catboost/catboost/issues/1979</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;现象&quot;&gt;&lt;a href=&quot;#现象&quot; class=&quot;headerlink&quot; title=&quot;现象&quot;&gt;&lt;/a&gt;现象&lt;/h1&gt;&lt;p&gt;在对catboost模型（大小1g）做切换测试的时候，出现Java进程异常退出的情况。&lt;/p&gt;
&lt;p&gt;JVM监控：&lt;br&gt;内存稳定，且没有出
      
    
    </summary>
    
      <category term="问题排查" scheme="https://kyrie17.github.io/categories/%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/"/>
    
    
      <category term="内存泄露" scheme="https://kyrie17.github.io/tags/%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2/"/>
    
      <category term="堆外内存" scheme="https://kyrie17.github.io/tags/%E5%A0%86%E5%A4%96%E5%86%85%E5%AD%98/"/>
    
      <category term="JNI" scheme="https://kyrie17.github.io/tags/JNI/"/>
    
      <category term="c++" scheme="https://kyrie17.github.io/tags/c/"/>
    
  </entry>
  
  <entry>
    <title>git merge与rebase对比</title>
    <link href="https://kyrie17.github.io/2023/01/01/git-merge%E4%B8%8Erebase%E5%AF%B9%E6%AF%94/"/>
    <id>https://kyrie17.github.io/2023/01/01/git-merge与rebase对比/</id>
    <published>2022-12-31T16:15:15.000Z</published>
    <updated>2022-12-31T16:19:35.448Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在开篇"><a href="#写在开篇" class="headerlink" title="写在开篇"></a>写在开篇</h2><p>对于很多同学来说，对于git工具的使用只是停留在最基础的几条命令或者是几个按钮上，对于普通的开发工作来说可能是够用了，但对于想高效的利用好git这个实战利器来说，显然是需要再精进提升的。</p><p>今天我们将从代码合并这个角度，为大家讲解git中merge与rebase的区别，使用场景等。</p><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><h3 id="初始场景"><a href="#初始场景" class="headerlink" title="初始场景"></a>初始场景</h3><p>假设目前我们有两个分支，main和feature，同时两个分支的head指针都指向add ClassB这个提交节点上，如下图所示。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/git00.png" alt="git00" title>                </div>                <div class="image-caption">git00</div>            </figure><h3 id="无分叉情况下合并"><a href="#无分叉情况下合并" class="headerlink" title="无分叉情况下合并"></a>无分叉情况下合并</h3><p>对于第一种情况，main分支新增一个提交，其head指针指向add ClassC提交节点上，而feature分支的仍然停留在add ClassB上。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/git01.png" alt="git01" title>                </div>                <div class="image-caption">git01</div>            </figure><p>此时我们希望在feature分支上将main分支上的最新提交合并过来，此时对于两个分支来说，它们是没有分叉的，merge默认会采用的策略是fast-forward，即快速将feature的head指针移动到add ClassC上。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/git02.png" alt="git02" title>                </div>                <div class="image-caption">git02</div>            </figure><h3 id="有分叉情况下合并"><a href="#有分叉情况下合并" class="headerlink" title="有分叉情况下合并"></a>有分叉情况下合并</h3><p>对于下图，main和feature分支中出现了分叉的情况，如果想要将main中的提交合并到feature中，我们应该怎么做呢？</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/git03.png" alt="git03" title>                </div>                <div class="image-caption">git03</div>            </figure><h4 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h4><p>对于之前没有了解过rebase的我们来说，我们通过merge来将main中提交的ClassC合并到feature来，我们会在ClassE节点后新增一个merge结点，放到自己的最后面，如下图所示。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/git04.png" alt="git04" title>                </div>                <div class="image-caption">git04</div>            </figure><p>而这个merge节点，它是main分支上更改的合并，即不管main分支上多少个提交节点，都会合并成一个节点。</p><h4 id="rebase"><a href="#rebase" class="headerlink" title="rebase"></a>rebase</h4><p>但如果通过rebase合并后，feature分支的提交还是在最后，就好像从节点ClassC中拉出来的一样，此时相对于main分支没有分叉。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/git05.png" alt="git05" title>                </div>                <div class="image-caption">git05</div>            </figure><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>上述两个例子很清晰的提现了merge和rebase的区别和作用，简单来说：</p><ul><li>merge保留了作品的完整历史记录，包括按时间顺序排列；对于回滚等操作也更有优势</li><li>Rebase使提交变得整洁，不会产生嘈杂的提交</li></ul><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><h3 id="merge-1"><a href="#merge-1" class="headerlink" title="merge"></a>merge</h3><ol><li>对于多个人开发同一个模块，很可能他的某个改动会导致你的功能出问题，如果出了问题，保留记录能便于后期排查问题</li><li>main分支需要将开发完的子分支的内容合并进来，使用merge可以留有提交记录，出现问题方便后面排查问题</li></ol><h3 id="rebase-1"><a href="#rebase-1" class="headerlink" title="rebase"></a>rebase</h3><p>个人开发分支同步main最新提交应该使用rebase，该模块的内容更新和你功能无关，合并代码也不会影响你的功能，无需保留该记录</p><p>巨人的肩膀：<br><a href="https://www.bilibili.com/video/BV1cv411u7wd/?spm_id_from=333.788.recommend_more_video.2&amp;vd_source=7c8b86fff4f4354960fa30b9be566d0e" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1cv411u7wd/?spm_id_from=333.788.recommend_more_video.2&amp;vd_source=7c8b86fff4f4354960fa30b9be566d0e</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在开篇&quot;&gt;&lt;a href=&quot;#写在开篇&quot; class=&quot;headerlink&quot; title=&quot;写在开篇&quot;&gt;&lt;/a&gt;写在开篇&lt;/h2&gt;&lt;p&gt;对于很多同学来说，对于git工具的使用只是停留在最基础的几条命令或者是几个按钮上，对于普通的开发工作来说可能是够用了，但对于
      
    
    </summary>
    
      <category term="git" scheme="https://kyrie17.github.io/categories/git/"/>
    
    
      <category term="merge" scheme="https://kyrie17.github.io/tags/merge/"/>
    
      <category term="rebase" scheme="https://kyrie17.github.io/tags/rebase/"/>
    
  </entry>
  
  <entry>
    <title>在线debug日志</title>
    <link href="https://kyrie17.github.io/2022/12/25/%E5%9C%A8%E7%BA%BFdebug%E6%97%A5%E5%BF%97/"/>
    <id>https://kyrie17.github.io/2022/12/25/在线debug日志/</id>
    <published>2022-12-25T13:27:48.000Z</published>
    <updated>2022-12-25T13:31:18.335Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在开篇"><a href="#写在开篇" class="headerlink" title="写在开篇"></a>写在开篇</h2><p>最近工作中涉及实时算法工程框架相关的开发，由于发现实时预测的结果和线下预测结果有偏差，需要向业务提供接口调用过程中的debug日志，供其分析排查问题。</p><p>但在茫茫的日志海洋中搂取日志对于业务来说压力比较大，因此我们提出通过对目前预测接口进行包装，提供测试能力，在接口出参返回整个接口调用过程中的debug日志的方案。</p><p>这个过程中将利用我们上一篇博客中介绍的log4j2的插件，实现了这个有趣的小功能。如果大家对于log4j2插件功能还不熟悉，可以先阅读我的<a href="https://kyrie17.github.io/2022/11/21/日志框架log4j/">上一篇文章</a>。</p><h2 id="整体思路"><a href="#整体思路" class="headerlink" title="整体思路"></a>整体思路</h2><p>首先，我们梳理一下思路，这个功能需要处理predict()业务接口输出日志的位置，所以我们可以通过实现<code>appender插件</code>获取到业务日志，再将每次调用的日志收集保存下来，而对于这个场景，大家会不约而同的想到<code>ThreadLocal</code>，整体的流程如下图所示。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/debuglog01.png" alt="debuglog01" title>                </div>                <div class="image-caption">debuglog01</div>            </figure></p><p>我们再回顾一下这个过程，对于简单的同步业务场景，应该是没有什么问题了，但如果业务接口中存在异步逻辑，该怎么处理呢？</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/debuglog02.png" alt="debuglog02" title>                </div>                <div class="image-caption">debuglog02</div>            </figure><p>结合上面这张图，我给大家介绍一下我的思路。<br>1、生成一个uuid作为一次接口调用tracekey，且存入MDC中。<br>2、每次追加日志时，会先获取MDC中的uuid，将日志放入其对应本地缓存中<br>3、在业务接口调用结束的时候，根据MDC中的uuid，获取本地缓存中的日志<br>4、清除MDC中的uuid</p><p>需要注意的是，上述处理流程只能处理异步后在方法调用结束之前会阻塞获取异步调用结果的场景，对于异步处理的流程，个人觉得是没有返回debug日志的必要。</p><h2 id="需要注意的点"><a href="#需要注意的点" class="headerlink" title="需要注意的点"></a>需要注意的点</h2><p>对于测试接口的请求，才需要返回debug日志，否则会影响接口正常调用的性能</p><ol><li>需要对接口来源进行打标，而且考虑到子线程的使用，需要通过<code>TransmittableThreadLocal</code>来传递标记，而且对于使用的线程池，需要使用TtlExecutors对线程池包装一下</li><li>log4j2的MDC或ThreadContext子线程中取不到父线程的标记，需要在配置文件中加上<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isThreadContextMapInheritable=true</span><br></pre></td></tr></table></figure></li></ol><h2 id="具体代码实现"><a href="#具体代码实现" class="headerlink" title="具体代码实现"></a>具体代码实现</h2><h3 id="Appender"><a href="#Appender" class="headerlink" title="Appender"></a>Appender</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Log</span>4j2</span><br><span class="line"><span class="meta">@Plugin</span>(name = <span class="string">"LogAppender"</span>, category = <span class="string">"Core"</span>, elementType = <span class="string">"appender"</span>, printObject = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAppender</span> <span class="keyword">extends</span> <span class="title">AbstractAppender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * debug日志bean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEBUG_LOG_SERVICE = <span class="string">"debugLogService"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LogAppender</span><span class="params">(String name, Filter filter, Layout&lt;? extends Serializable&gt; layout, <span class="keyword">boolean</span> ignoreExceptions)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, filter, layout, ignoreExceptions);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">append</span><span class="params">(LogEvent logEvent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Boolean.FALSE.equals(ThreadLocalLogUtil.getIsLog())) &#123;</span><br><span class="line">            <span class="comment">// 不需要记录调用日志</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (logEvent == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String traceKey = ThreadContext.get(OsConstant.THEAD_CONTEXT_TRACE_KEY);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(traceKey)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">byte</span>[] bytes = getLayout().toByteArray(logEvent);</span><br><span class="line">        String log = <span class="keyword">new</span> String(bytes);</span><br><span class="line">        Object serviceObj = SpringBeanUtils.getBean(DEBUG_LOG_SERVICE);</span><br><span class="line">        <span class="keyword">if</span> (serviceObj <span class="keyword">instanceof</span> DebugLogService) &#123;</span><br><span class="line">            DebugLogService debugLogService = (DebugLogService) serviceObj;</span><br><span class="line">            debugLogService.appendDebugLog(traceKey, log);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下面这个方法可以接收配置文件中的参数信息</span></span><br><span class="line">    <span class="meta">@PluginFactory</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> LogAppender <span class="title">createAppender</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            @PluginAttribute(<span class="string">"name"</span>)</span> String name,</span></span><br><span class="line"><span class="function">            @<span class="title">PluginElement</span><span class="params">(<span class="string">"Filter"</span>)</span> <span class="keyword">final</span> Filter filter,</span></span><br><span class="line"><span class="function">            @<span class="title">PluginElement</span><span class="params">(<span class="string">"Layout"</span>)</span> Layout&lt;? extends Serializable&gt; layout,</span></span><br><span class="line"><span class="function">            @<span class="title">PluginAttribute</span><span class="params">(<span class="string">"ignoreExceptions"</span>)</span> <span class="keyword">boolean</span> ignoreExceptions) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(name)) &#123;</span><br><span class="line">            log.error(<span class="string">"No name provided for LogAppenderImpl"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (layout == <span class="keyword">null</span>) &#123;</span><br><span class="line">            layout = PatternLayout.createDefaultLayout();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> LogAppender(name, filter, layout, ignoreExceptions);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里需要注意一个上下文的问题，log4j2在dao层、service层初始化结束之前就已经初始化了，如果采用@Resource这种依赖注入的方式构建bean是行不通的，获取到的只能是null，但是ApplicationContext已经加载，可以通过ApplicationContext手动获取bean。</p><h3 id="Aspect"><a href="#Aspect" class="headerlink" title="Aspect"></a>Aspect</h3><p>为了降低对业务代码的侵入、以及兼顾代码的可拓展性，对接口调用的打标，接口返回debugLog等过程就通过切面实现了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Log</span>4j2</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogAspect</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> DebugLogService debugLogService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"execution(* com.kyrie.predict.service.AService.predict(..))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">doAround</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        setIsLogFlag(pjp);</span><br><span class="line"></span><br><span class="line">        Object result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = pjp.proceed();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">"LogAspect-doAround-e:"</span>, e);</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            addDebugLog(result);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ThreadLocal设置是否返回debug日志标签</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pjp</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setIsLogFlag</span><span class="params">(ProceedingJoinPoint pjp)</span> </span>&#123;</span><br><span class="line">        Boolean isLogFlag = Boolean.FALSE;</span><br><span class="line"></span><br><span class="line">        Object[] args = pjp.getArgs();</span><br><span class="line">        <span class="keyword">if</span> (args != <span class="keyword">null</span> &amp;&amp; args.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            Object arg = args[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (arg <span class="keyword">instanceof</span> OsInputData) &#123;</span><br><span class="line">                OsInputData osInputData = (OsInputData) arg;</span><br><span class="line">                String source = osInputData.getSource();</span><br><span class="line">                <span class="keyword">if</span> (StringUtils.isNotBlank(source) &amp;&amp; OsConstant.SOURCE_SJ_DEBUG.equals(source)) &#123;</span><br><span class="line">                    isLogFlag = Boolean.TRUE;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">"打印debug日志：&#123;&#125;"</span>, isLogFlag);</span><br><span class="line">        ThreadLocalLogUtil.setIsLog(isLogFlag);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回结果设置debugLog</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> result</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addDebugLog</span><span class="params">(Object result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!ThreadLocalLogUtil.getIsLog()) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String traceKey = ThreadContext.get(OsConstant.THEAD_CONTEXT_TRACE_KEY);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isNotBlank(traceKey)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (result == <span class="keyword">null</span>) &#123;</span><br><span class="line">                result = <span class="keyword">new</span> OsOutputData();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (result <span class="keyword">instanceof</span> OsOutputData) &#123;</span><br><span class="line">                OsOutputData osOutputData = (OsOutputData) result;</span><br><span class="line">                List&lt;String&gt; debugLog = debugLogService.getDebugLog(traceKey);</span><br><span class="line">                osOutputData.setDebugLogs(debugLog);</span><br><span class="line">            &#125;</span><br><span class="line">            debugLogService.removeDebugLog(traceKey);</span><br><span class="line">        &#125;</span><br><span class="line">        ThreadLocalLogUtil.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里有个地方可能会遗漏，对于这个接口的产生的异常，我们也是需要进行捕获，同时追加到返回debug日志中的。</p><h3 id="log4j2-xml"><a href="#log4j2-xml" class="headerlink" title="log4j2.xml"></a>log4j2.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">status</span>=<span class="string">"WARN"</span> <span class="attr">monitorInterval</span>=<span class="string">"3600"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">LogAppender</span> <span class="attr">name</span>=<span class="string">"logAppender"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"info"</span> <span class="attr">onMatch</span>=<span class="string">"ACCEPT"</span> <span class="attr">onMismatch</span>=<span class="string">"DENY"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;[%-5level]%m[%C.%M:%L][%X&#123;traceKey&#125;]- %n"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">LogAppender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 需要返回debug日志 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"com.kyrie.predict"</span> <span class="attr">level</span>=<span class="string">"debug"</span> <span class="attr">additivity</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"logAppender"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 配置日志的根节点 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"console"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"file"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"error"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里还有个需要注意的地方是debug日志的logger需要将additivity置为true，不影响根日志的正常输出，关于配置的属性详情，可以参考我的上一篇文章。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在开篇&quot;&gt;&lt;a href=&quot;#写在开篇&quot; class=&quot;headerlink&quot; title=&quot;写在开篇&quot;&gt;&lt;/a&gt;写在开篇&lt;/h2&gt;&lt;p&gt;最近工作中涉及实时算法工程框架相关的开发，由于发现实时预测的结果和线下预测结果有偏差，需要向业务提供接口调用过程中的debu
      
    
    </summary>
    
      <category term="Java乐园" scheme="https://kyrie17.github.io/categories/Java%E4%B9%90%E5%9B%AD/"/>
    
    
      <category term="log" scheme="https://kyrie17.github.io/tags/log/"/>
    
  </entry>
  
  <entry>
    <title>日志框架log4j</title>
    <link href="https://kyrie17.github.io/2022/11/21/%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6log4j/"/>
    <id>https://kyrie17.github.io/2022/11/21/日志框架log4j/</id>
    <published>2022-11-20T16:01:48.000Z</published>
    <updated>2022-11-20T16:14:42.903Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在开篇"><a href="#写在开篇" class="headerlink" title="写在开篇"></a>写在开篇</h2><p>本文主要介绍了log4j、xml方式的配置以及插件的使用。</p><h2 id="sl4j与log4j"><a href="#sl4j与log4j" class="headerlink" title="sl4j与log4j"></a>sl4j与log4j</h2><h3 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h3><p>slf4j不是具体的日志解决方案，而是一种适配器的实现方式，为我们提供一个一致的API，开发者只需要关注slf4j的api接口，而不用关心具体日志是由log4j、log4j2还是logback等日志框架实现的。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/log4j1.png" alt="log4j1" title>                </div>                <div class="image-caption">log4j1</div>            </figure></p><h3 id="适配过程"><a href="#适配过程" class="headerlink" title="适配过程"></a>适配过程</h3><p>上面讲到sl4j是适配层，那么它是怎么适配到日志框架的呢？我们一起通过源码来看一下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.log;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogDemo</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 调用slf4j的api，首先我们需要获它的logger</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(LogDemo.class);</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">"log4j2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>LoggerFactory类中获取logger的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Logger <span class="title">getLogger</span><span class="params">(Class&lt;?&gt; clazz)</span> </span>&#123;</span><br><span class="line">    Logger logger = getLogger(clazz.getName());</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="keyword">return</span> logger;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Logger <span class="title">getLogger</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    ILoggerFactory iLoggerFactory = getILoggerFactory();</span><br><span class="line">    <span class="keyword">return</span> iLoggerFactory.getLogger(name);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 获取ILoggerFactory</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ILoggerFactory <span class="title">getILoggerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 双重校验锁创建单例的LoggerFactory</span></span><br><span class="line">    <span class="keyword">if</span> (INITIALIZATION_STATE == UNINITIALIZED) &#123;</span><br><span class="line">        Class var0 = LoggerFactory.class;</span><br><span class="line">        <span class="keyword">synchronized</span>(LoggerFactory.class) &#123;</span><br><span class="line">            <span class="keyword">if</span> (INITIALIZATION_STATE == UNINITIALIZED) &#123;</span><br><span class="line">                INITIALIZATION_STATE = ONGOING_INITIALIZATION;</span><br><span class="line">                <span class="comment">// 初始化ILoggerFactory的核心方法</span></span><br><span class="line">                performInitialization();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (INITIALIZATION_STATE) &#123;</span><br><span class="line">        <span class="keyword">case</span> ONGOING_INITIALIZATION:</span><br><span class="line">            <span class="keyword">return</span> SUBST_FACTORY;</span><br><span class="line">        <span class="keyword">case</span> FAILED_INITIALIZATION:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"org.slf4j.LoggerFactory in failed state."</span>);</span><br><span class="line">        <span class="keyword">case</span> SUCCESSFUL_INITIALIZATION:</span><br><span class="line">            <span class="keyword">return</span> StaticLoggerBinder.getSingleton().getLoggerFactory();</span><br><span class="line">        <span class="keyword">case</span> NOP_FALLBACK_INITIALIZATION:</span><br><span class="line">            <span class="keyword">return</span> NOP_FALLBACK_FACTORY;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Unreachable code"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化ILoggerFactory。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">performInitialization</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    bind();</span><br><span class="line">    <span class="keyword">if</span> (INITIALIZATION_STATE == SUCCESSFUL_INITIALIZATION) &#123;</span><br><span class="line">        versionSanityCheck();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">bind</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String msg;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Set&lt;URL&gt; staticLoggerBinderPathSet = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (!isAndroid()) &#123;</span><br><span class="line">            <span class="comment">// 找出绑定的日志的path，即StaticLoggerBinder.class文件</span></span><br><span class="line">            staticLoggerBinderPathSet = findPossibleStaticLoggerBinderPathSet();</span><br><span class="line">            <span class="comment">// 我们只需要一个实现的日志框架，如果有多个要上报</span></span><br><span class="line">            reportMultipleBindingAmbiguity(staticLoggerBinderPathSet);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 实例化StaticLoggerBinder</span></span><br><span class="line">        StaticLoggerBinder.getSingleton();</span><br><span class="line">        INITIALIZATION_STATE = SUCCESSFUL_INITIALIZATION;</span><br><span class="line">        reportActualBinding(staticLoggerBinderPathSet);</span><br><span class="line">        fixSubstituteLoggers();</span><br><span class="line">        replayEvents();</span><br><span class="line">        SUBST_FACTORY.clear();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoClassDefFoundError var2) &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception var4) &#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 找到所有的StaticLoggerBinder</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> Set&lt;URL&gt; <span class="title">findPossibleStaticLoggerBinderPathSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Set&lt;URL&gt; staticLoggerBinderPathSet = <span class="keyword">new</span> LinkedHashSet();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 获取LoggerFactory，即slf4j-api的类加载器</span></span><br><span class="line">        ClassLoader loggerFactoryClassLoader = LoggerFactory.class.getClassLoader();</span><br><span class="line">        Enumeration paths;</span><br><span class="line">        <span class="keyword">if</span> (loggerFactoryClassLoader == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 说明是由Bootstrap Classloader加载的，则转为App Classloader去加载</span></span><br><span class="line">            paths = ClassLoader.getSystemResources(STATIC_LOGGER_BINDER_PATH);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 用slf4j的Classloader去加载</span></span><br><span class="line">            paths = loggerFactoryClassLoader.getResources(STATIC_LOGGER_BINDER_PATH);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span>(paths.hasMoreElements()) &#123;</span><br><span class="line">            URL path = (URL)paths.nextElement();</span><br><span class="line">            staticLoggerBinderPathSet.add(path);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException var4) &#123;</span><br><span class="line">        Util.report(<span class="string">"Error getting resources from path"</span>, var4);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> staticLoggerBinderPathSet;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这我们已经可以知道，各个日志框架是通过实现<code>org/slf4j/impl/StaticLoggerBinder</code>来对sl4j进行适配的。下图是log4j2实现的StaticLoggerBinder。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/log4j2.png" alt="log4j2" title>                </div>                <div class="image-caption">log4j2</div>            </figure><p>从类加载器的用法可以看出<code>org/slf4j/impl/StaticLoggerBinder.class</code>要和slf4j-api.jar包在同一个类加载器中，一般来说即要求放在同一路径下比较稳妥。</p><p>我们来浅窥下log4j2中对于StaticLoggerBinder的具体实现。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.slf4j.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.logging.slf4j.Log4jLoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.ILoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.spi.LoggerFactoryBinder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticLoggerBinder</span> <span class="keyword">implements</span> <span class="title">LoggerFactoryBinder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String REQUESTED_API_VERSION = <span class="string">"1.6"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String LOGGER_FACTORY_CLASS_STR = Log4jLoggerFactory.class.getName();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> StaticLoggerBinder SINGLETON = <span class="keyword">new</span> StaticLoggerBinder();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ILoggerFactory loggerFactory = <span class="keyword">new</span> Log4jLoggerFactory();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">StaticLoggerBinder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> StaticLoggerBinder <span class="title">getSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> SINGLETON;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ILoggerFactory <span class="title">getLoggerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.loggerFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLoggerFactoryClassStr</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LOGGER_FACTORY_CLASS_STR;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们只需要关心，log4j2是通过Log4jLoggerFactory继承了ILoggerFactory、以及Log4jLogger继承了Logger，来实现适配到slf4j的即可。</p><h2 id="log4j2配置"><a href="#log4j2配置" class="headerlink" title="log4j2配置"></a>log4j2配置</h2><p>关于日志我们一开始不免会关心两个问题：<br>1、开发时日志是怎么输出到控制台，生产环境的日志是怎么输出的磁盘文件中的？<br>2、日志输出的格式为什么是这样的？</p><p>那我们就需要介绍下log4j2的配置了。</p><h3 id="log4j2-xml"><a href="#log4j2-xml" class="headerlink" title="log4j2.xml"></a>log4j2.xml</h3><p>log4j2支持xml、json、yaml、properties四种配置方式，不过本文将通过大家常用的xml方式来介绍。</p><p>我们通过这个简单的xml配置来介绍。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">name</span>=<span class="string">"ConfigTest"</span> <span class="attr">status</span>=<span class="string">"ERROR"</span> <span class="attr">monitorInterval</span>=<span class="string">"5"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">SystemPropertyArbiter</span> <span class="attr">propertyName</span>=<span class="string">"env"</span> <span class="attr">propertyValue</span>=<span class="string">"dev"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">"Out"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"%m%n"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">SystemPropertyArbiter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">SystemPropertyArbiter</span> <span class="attr">propertyName</span>=<span class="string">"env"</span> <span class="attr">propertyValue</span>=<span class="string">"prod"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">List</span> <span class="attr">name</span>=<span class="string">"Out"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">List</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">SystemPropertyArbiter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Logger</span> <span class="attr">name</span>=<span class="string">"org.apache.test"</span> <span class="attr">level</span>=<span class="string">"trace"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">"Out"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Logger</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">"error"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">"Out"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到，同体上来说，主要Configuration构成分为两个部分。</p><h4 id="Appender"><a href="#Appender" class="headerlink" title="Appender"></a>Appender</h4><blockquote><p>通过appender指定一个日志的输出方式，目前支持的Appender主要有<code>Console</code>、<code>File</code>、<code>RollingFile</code>、<code>Async</code>、<code>Routing</code>等 </p></blockquote><ul><li>Console<ul><li>将日志打印到控制台</li><li>name 指定Appender的名字</li><li>target SYSTEM_OUT或SYSTEM_ERR</li><li>PatternLayout pattern指定输出格式，不设置默认为:%m%n</li></ul></li><li>File<ul><li>将日志打印到文件</li><li>name 指定Appender的名字</li><li>filename 指定输出日志的目的文件带全路径的文件名</li><li>PatternLayout pattern指定输出格式，不设置默认为:%m%n</li></ul></li><li>RollingFile<ul><li>将日志打印到文件，文件可以滚动保存</li><li>name 指定Appender的名字</li><li>filename 指定输出日志的目的文件带全路径的文件名</li><li>filepattern 指定新建日志文件的名称格式</li><li>filePermissions 指定日志文件权限</li><li>PatternLayout pattern指定输出格式，不设置默认为:%m%n</li><li>Policies 指定滚动日志的策略（支持基于时间、指定文件大小等滚动策略）</li></ul></li><li>Routing<ul><li>指定日志路由，可以指定规则与Appender进行绑定</li><li>name 指定Appender的名字</li><li>pattern 根据所有注册的Lookups进行评估并将结果用于选择路由</li></ul></li></ul><h4 id="Logger"><a href="#Logger" class="headerlink" title="Logger"></a>Logger</h4><blockquote><p>指定logger与appeder进行关联，将logger中的日志输出到appender，由appender实现日志的控制台输出或者文件记录。 </p></blockquote><ul><li>Root<ul><li>用来指定项目的根日志</li><li>level 日志输出级别</li><li>AppenderRef 用来指定该日志输出到哪个Appender</li></ul></li><li>Logger<ul><li>自定义的子日志 </li><li>level 日志输出级别</li><li>name 用来指定该Logger所适用的类或者类所在的包全路径,继承自Root节点</li><li>additivity 日志是否在父Logger中输出，如果为false，只在自定义的Appender中进行输出</li><li>AppenderRef 用来指定该日志输出到哪个Appender,如果没有指定，就会默认继承自Root</li></ul></li></ul><h2 id="log4j2插件"><a href="#log4j2插件" class="headerlink" title="log4j2插件"></a>log4j2插件</h2><p>在我们的自定义插件上需要使用@Plugin表明此时一个log4j2的插件，定义插件的名称和属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Plugin</span>(name = <span class="string">"MyAppender"</span>, category = <span class="string">"Core"</span>, elementType = <span class="string">"layout"</span>, printObject = <span class="keyword">true</span>)</span><br></pre></td></tr></table></figure><p>log4j为我们提供了Core、Converters、KeyProviders、Lookups、TypeConverters、Developer Notes等几种插件方式，我们下面将选取几个有代表性的为大家详细说明。</p><h3 id="Core"><a href="#Core" class="headerlink" title="Core"></a>Core</h3><blockquote><p>Core插件是指那些由配置文件中的元素直接表示的插件，例如Appender、Layout、Logger或Filter。</p></blockquote><p>在介绍core插件之前，先需要了解以下三个注解。</p><ul><li>@PluginFactory用于提供所有选项作为方法参数的静态工厂方法，即可以将xml中配置属性传递进方法中</li><li>@PluginAttribute 插件的属性</li><li>@PluginElement 插件的子元素</li></ul><h4 id="自定义appender插件"><a href="#自定义appender插件" class="headerlink" title="自定义appender插件"></a>自定义appender插件</h4><p>支持自定义appender：即指定日志输出目的地。</p><p>1、需要用@PluginFactory声明createAppender方法，创建一个Appender，<br>2、继承AbstractAppender，实现append方法，处理日志</p><p>在使用场景上，可以应用至将分布式服务的单机上日志输出到统一的机器上。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Log</span>4j2</span><br><span class="line"><span class="meta">@Plugin</span>(name = <span class="string">"TestLogAppender"</span>, category = Node.CATEGORY, elementType = Appender.ELEMENT_TYPE, printObject = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLogAppender</span> <span class="keyword">extends</span> <span class="title">AbstractAppender</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestLogAppender</span><span class="params">(String name, Filter filter, Layout&lt;? extends Serializable&gt; layout, <span class="keyword">boolean</span> ignoreExceptions)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, filter, layout, ignoreExceptions);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">append</span><span class="params">(LogEvent logEvent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (logEvent == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">byte</span>[] bytes = getLayout().toByteArray(logEvent);</span><br><span class="line">        String log = <span class="keyword">new</span> String(bytes);</span><br><span class="line">        rpcService.doLog(log);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 下面这个方法可以接收配置文件中的参数信息</span></span><br><span class="line">    <span class="meta">@PluginFactory</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TestLogAppender <span class="title">createAppender</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            @PluginAttribute(<span class="string">"name"</span>)</span> String name,</span></span><br><span class="line"><span class="function">            @<span class="title">PluginElement</span><span class="params">(<span class="string">"Filter"</span>)</span> <span class="keyword">final</span> Filter filter,</span></span><br><span class="line"><span class="function">            @<span class="title">PluginElement</span><span class="params">(<span class="string">"Layout"</span>)</span> Layout&lt;? extends Serializable&gt; layout,</span></span><br><span class="line"><span class="function">            @<span class="title">PluginAttribute</span><span class="params">(<span class="string">"ignoreExceptions"</span>)</span> <span class="keyword">boolean</span> ignoreExceptions) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isBlank(name)) &#123;</span><br><span class="line">            log.error(<span class="string">"No name provided for TestLogAppender"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (layout == <span class="keyword">null</span>) &#123;</span><br><span class="line">            layout = PatternLayout.createDefaultLayout();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> TestLogAppender(name, filter, layout, ignoreExceptions);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">status</span>=<span class="string">"WARN"</span> <span class="attr">monitorInterval</span>=<span class="string">"3600"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 控制台输出 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">"console"</span> <span class="attr">target</span>=<span class="string">"SYSTEM_OUT"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"debug"</span> <span class="attr">onMatch</span>=<span class="string">"ACCEPT"</span> <span class="attr">onMismatch</span>=<span class="string">"DENY"</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 输出日志的格式 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread]] %-5level %logger&#123;36&#125; %F:%L - %msg %ex%n"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Console</span>&gt;</span>&gt;</span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">TestLogAppender</span> <span class="attr">name</span>=<span class="string">"testLogAppender"</span> <span class="attr">append</span>=<span class="string">"true"</span> &gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ThresholdFilter</span> <span class="attr">level</span>=<span class="string">"info"</span> <span class="attr">onMatch</span>=<span class="string">"ACCEPT"</span> <span class="attr">onMismatch</span>=<span class="string">"DENY"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125;[%-5level]%m[%C.%M:%L]"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">TestLogAppender</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置日志的根节点 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"info"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"console"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"testLogAppender"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="自定义layout插件"><a href="#自定义layout插件" class="headerlink" title="自定义layout插件"></a>自定义layout插件</h4><p>支持自定义layout：即负责对输出日志格式化。</p><p>1、需要用@PluginFactory声明createAppender方法，创建一个Appender<br>2、继承AbstractAppender，实现toSerializable方法，处理日志</p><p>在使用场景上，可以替换日志中的敏感信息。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Plugin</span>(name = <span class="string">"Log4jEncodeLayout"</span>, category = Node.CATEGORY, elementType = Layout.ELEMENT_TYPE, printObject = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Log4jEncodeLayout</span> <span class="keyword">extends</span> <span class="title">AbstractStringLayout</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手机号正则匹配式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Pattern PHONE_PATTERN = Pattern.compile(<span class="string">"(?&lt;![0-9a-zA-Z])1[345789]\d&#123;9&#125;(?![0-9a-zA-Z])"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> PatternLayout patternLayout;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">Log4jEncodeLayout</span><span class="params">(Charset charset, String pattern)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用父类设置基本参数</span></span><br><span class="line">        <span class="keyword">super</span>(charset);</span><br><span class="line">        <span class="comment">//PatternLayout 是原本的输出对象，用来获取到原本要输出的日志字符串</span></span><br><span class="line">        patternLayout = PatternLayout.newBuilder().withPattern(pattern).build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toSerializable</span><span class="params">(LogEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 调用原本的 toSerializable 方法，获取到原本要输出的日志</span></span><br><span class="line">        String message = patternLayout.toSerializable(event);</span><br><span class="line">        <span class="comment">// 在原本输出的字符串上做正则匹配过滤</span></span><br><span class="line">        Matcher match = PHONE_PATTERN.matcher(message);</span><br><span class="line"></span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">while</span> (match.find()) &#123;</span><br><span class="line">            match.appendReplacement(sb, <span class="string">"***"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        match.appendTail(sb);<span class="comment">// 增加</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将脱敏后的日志输出</span></span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义插件传入的参数</span></span><br><span class="line">    <span class="meta">@PluginFactory</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Layout <span class="title">createLayout</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            @PluginAttribute(value = <span class="string">"pattern"</span>)</span> <span class="keyword">final</span> String pattern,</span></span><br><span class="line"><span class="function">            @<span class="title">PluginAttribute</span><span class="params">(value = <span class="string">"charset"</span>)</span> <span class="keyword">final</span> Charset charset) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Log4jEncodeLayout(charset, pattern);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">status</span>=<span class="string">"INFO"</span> <span class="attr">name</span>=<span class="string">"XMLConfigTest"</span> <span class="attr">packages</span>=<span class="string">"org.apache.logging.log4j.test,com.zyx.demo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Property</span> <span class="attr">name</span>=<span class="string">"PATTERN"</span>&gt;</span></span><br><span class="line">            %d&#123;yyyy-MM-dd HH:mm:ss SSS&#125; [%p] [c=%c&#123;1&#125;] [%thread] %m%n</span><br><span class="line">        <span class="tag">&lt;/<span class="name">Property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"MODULE_NAME"</span>&gt;</span>log4j2-demo<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_HOME"</span>&gt;</span>/data<span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">"STDOUT"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;PatternLayout&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--    &lt;pattern&gt;$&#123;PATTERN&#125;&lt;/pattern&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;/PatternLayout&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--将原先的日志输出替换为自定义的日志输出appender插件--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Log4jEncodeLayout</span> <span class="attr">pattern</span>=<span class="string">"$&#123;PATTERN&#125;"</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">"ROLLINGFILE"</span> <span class="attr">fileName</span>=<span class="string">"$&#123;LOG_HOME&#125;/$&#123;MODULE_NAME&#125;.log"</span></span></span><br><span class="line"><span class="tag">                     <span class="attr">filePattern</span>=<span class="string">"$&#123;LOG_HOME&#125;/log/$&#123;MODULE_NAME&#125;-%d&#123;yyyy-MM-dd&#125;-%i.log.gz"</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--&lt;PatternLayout--&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--pattern="[$&#123;MODULE_NAME&#125;] %d&#123;yyyy-MM-dd HH:mm:ss SSS&#125; [%p] [c=%c&#123;1&#125;] [%thread] %m%n"/&gt;--&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--将原先的日志输出替换为自定义的日志输出appender插件--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Log4jEncodeLayout</span> <span class="attr">pattern</span>=<span class="string">"[$&#123;MODULE_NAME&#125;] %d&#123;yyyy-MM-dd HH:mm:ss SSS&#125; [%p] [c=%c&#123;1&#125;] [%thread] %m%n"</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">TimeBasedTriggeringPolicy</span> <span class="attr">modulate</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">                                           <span class="attr">interval</span>=<span class="string">"1"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">"100MB"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">CronTriggeringPolicy</span> <span class="attr">schedule</span>=<span class="string">"0 0 * * * ?"</span>/&gt;</span> </span><br><span class="line">            <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span> <span class="attr">max</span>=<span class="string">"100"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Delete</span> <span class="attr">basePath</span>=<span class="string">"$&#123;LOG_HOME&#125;"</span> <span class="attr">maxDepth</span>=<span class="string">"3"</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">IfFileName</span> <span class="attr">glob</span>=<span class="string">"*/$&#123;MODULE_NAME&#125;-*.log.gz"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">IfLastModified</span> <span class="attr">age</span>=<span class="string">"30d"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">Delete</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">DefaultRolloverStrategy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Root</span> <span class="attr">level</span>=<span class="string">"INFO"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">"STDOUT"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">"ROLLINGFILE"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="Lookups"><a href="#Lookups" class="headerlink" title="Lookups"></a>Lookups</h3><p>Lookups自定义插件支持对属性的key进行查找功能。而且自定义操作过程也很简单，只需要实现StrLookup，实现lookup方法。</p><p>在下面这个不同线程打印日志例子中我们看到Lookups的简单应用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Plugin</span>(name = <span class="string">"threadName"</span>, category = StrLookup.CATEGORY)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadName</span> <span class="keyword">implements</span> <span class="title">StrLookup</span> </span>&#123;</span><br><span class="line"><span class="comment">// 插件的功能即根据key值获取相应结果，这里我们直接返回线程名字</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">lookup</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Thread.currentThread().getName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">lookup</span><span class="params">(LogEvent event, String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> event.getThreadName() == <span class="keyword">null</span> ? Thread.currentThread().getName()</span><br><span class="line">                : event.getThreadName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Configuration</span> <span class="attr">name</span>=<span class="string">"log-demo-config"</span> <span class="attr">status</span>=<span class="string">"error"</span> <span class="attr">monitorInterval</span>=<span class="string">"10"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Appenders</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--  默认保留Console,用于控制台日志输出 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Console</span> <span class="attr">name</span>=<span class="string">"Console"</span> <span class="attr">target</span>=<span class="string">"SYSTEM_OUT"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"[%d&#123;yyyy-MM-dd;HH:mm:ss.SSS Z&#125;] [%-5p] [%t] [%c] %m%n"</span>&gt;</span><span class="tag">&lt;/<span class="name">PatternLayout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Console</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Routing</span> <span class="attr">name</span>=<span class="string">"Routing"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Routes</span> <span class="attr">pattern</span>=<span class="string">"$$&#123;threadName:threadName&#125;"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">Route</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">RollingFile</span> <span class="attr">name</span>=<span class="string">"RollingFile-$&#123;threadName:threadName&#125;"</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">fileName</span>=<span class="string">"export\log\thread-$&#123;threadName:threadName&#125;.log"</span></span></span><br><span class="line"><span class="tag">                                 <span class="attr">filePattern</span>=<span class="string">"export\log\thread-$&#123;threadName:threadName&#125;-%i.log"</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">PatternLayout</span> <span class="attr">pattern</span>=<span class="string">"[%d&#123;yyyy-MM-dd HH:mm:ss,SSS Z&#125;] [%-5p] [%t] [%c %L] %m%n"</span>/&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">Policies</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">SizeBasedTriggeringPolicy</span> <span class="attr">size</span>=<span class="string">"10 MB"</span> /&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">Policies</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">DefaultRolloverStrategy</span> <span class="attr">max</span>=<span class="string">"10"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">RollingFile</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">Route</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">Routes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Routing</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Appenders</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Loggers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Logger</span> <span class="attr">name</span>=<span class="string">"com.demo.log"</span> <span class="attr">level</span>=<span class="string">"INFO"</span> <span class="attr">additivity</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">AppenderRef</span> <span class="attr">ref</span>=<span class="string">"Routing"</span>&gt;</span><span class="tag">&lt;/<span class="name">AppenderRef</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">Logger</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>巨人的肩膀：<br><a href="https://logging.apache.org/log4j/2.x/" target="_blank" rel="noopener">https://logging.apache.org/log4j/2.x/</a><br><a href="https://blog.csdn.net/numb_zl/category_11244831.html" target="_blank" rel="noopener">https://blog.csdn.net/numb_zl/category_11244831.html</a><br><a href="https://blog.csdn.net/huangjinjin520/article/details/120600251" target="_blank" rel="noopener">https://blog.csdn.net/huangjinjin520/article/details/120600251</a><br><a href="https://blog.csdn.net/zyx1260168395/article/details/126539475" target="_blank" rel="noopener">https://blog.csdn.net/zyx1260168395/article/details/126539475</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在开篇&quot;&gt;&lt;a href=&quot;#写在开篇&quot; class=&quot;headerlink&quot; title=&quot;写在开篇&quot;&gt;&lt;/a&gt;写在开篇&lt;/h2&gt;&lt;p&gt;本文主要介绍了log4j、xml方式的配置以及插件的使用。&lt;/p&gt;
&lt;h2 id=&quot;sl4j与log4j&quot;&gt;&lt;a href=
      
    
    </summary>
    
      <category term="Java乐园" scheme="https://kyrie17.github.io/categories/Java%E4%B9%90%E5%9B%AD/"/>
    
    
      <category term="log" scheme="https://kyrie17.github.io/tags/log/"/>
    
  </entry>
  
  <entry>
    <title>二分查找算法</title>
    <link href="https://kyrie17.github.io/2020/12/07/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/"/>
    <id>https://kyrie17.github.io/2020/12/07/二分查找算法/</id>
    <published>2020-12-07T15:44:30.000Z</published>
    <updated>2020-12-07T15:47:31.983Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在开篇"><a href="#写在开篇" class="headerlink" title="写在开篇"></a>写在开篇</h2><p>二分模板一共有两个，分别适用于不同情况。</p><h2 id="满足某个条件的第一个数"><a href="#满足某个条件的第一个数" class="headerlink" title="满足某个条件的第一个数"></a>满足某个条件的第一个数</h2><p>当我们将区间[l, r]划分成[l, mid]和[mid + 1, r]时，其更新操作是r = mid或者l = mid + 1;，计算mid时不需要加1。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bsearch_1</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (check(mid)) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="满足某个条件的最后一个数"><a href="#满足某个条件的最后一个数" class="headerlink" title="满足某个条件的最后一个数"></a>满足某个条件的最后一个数</h2><p>当我们将区间[l, r]划分成[l, mid - 1]和[mid, r]时，其更新操作是r = mid - 1或者l = mid;，此时为了防止死循环，计算mid时需要加1。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bsearch_2</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (check(mid)) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当我们将区间[l, r]划分成[r, mid - 1]和[mid, r]时，其更新操作是r = mid - 1或l = mid，此时为防止死循环，计算mid时需要+1，即：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/erfen01.jpg" alt="二分查找01" title>                </div>                <div class="image-caption">二分查找01</div>            </figure></p><h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><p>二分只有上述两种情况：</p><ul><li>找大于等于给定数的第一个数</li><li>找小于等于给定数的最后一个数<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/erfen02.png" alt="二分查找02" title>                </div>                <div class="image-caption">二分查找02</div>            </figure></li></ul><p>下面给一个对比的例子（leetcode34）：<br>Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.<br>If target is not found in the array, return [-1, -1].<br>Follow up: Could you write an algorithm with O(log n) runtime complexity?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Example 1:</span><br><span class="line">Input: nums = [5,7,7,8,8,10], target = 8</span><br><span class="line">Output: [3,4]</span><br></pre></td></tr></table></figure><p>思路：分别找出第一次出现的位置和最后一次出现的位置，即分别对应模板1和模板2。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span>[] searchRange(<span class="keyword">int</span>[] nums, <span class="keyword">int</span> target) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nums == <span class="keyword">null</span> || nums.length == <span class="number">0</span>) <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> l = <span class="number">0</span>, r = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt;= target) </span><br><span class="line">                r = mid;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (nums[l] != target) <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;-<span class="number">1</span>, -<span class="number">1</span>&#125;;</span><br><span class="line">        <span class="keyword">int</span> start = l;</span><br><span class="line"></span><br><span class="line">        l = <span class="number">0</span>;</span><br><span class="line">        r = nums.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (l &lt; r) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &lt;= target) </span><br><span class="line">                l = mid;</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                r = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> end = r;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">int</span>[] &#123;start, end&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>巨人的肩膀：</p><ul><li>acwing.com</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在开篇&quot;&gt;&lt;a href=&quot;#写在开篇&quot; class=&quot;headerlink&quot; title=&quot;写在开篇&quot;&gt;&lt;/a&gt;写在开篇&lt;/h2&gt;&lt;p&gt;二分模板一共有两个，分别适用于不同情况。&lt;/p&gt;
&lt;h2 id=&quot;满足某个条件的第一个数&quot;&gt;&lt;a href=&quot;#满足某个条件
      
    
    </summary>
    
      <category term="算法" scheme="https://kyrie17.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="二分" scheme="https://kyrie17.github.io/tags/%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>心跳包设计</title>
    <link href="https://kyrie17.github.io/2020/11/29/%E5%BF%83%E8%B7%B3%E5%8C%85%E8%AE%BE%E8%AE%A1/"/>
    <id>https://kyrie17.github.io/2020/11/29/心跳包设计/</id>
    <published>2020-11-29T15:06:10.000Z</published>
    <updated>2020-11-29T15:08:14.451Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一个socket长连接"><a href="#一个socket长连接" class="headerlink" title="一个socket长连接"></a>一个socket长连接</h2><p>长连接会存在以下两种情况：</p><ol><li>一个客户端连接服务器以后，如果长期没有和服务器有数据来往，可能会被防火墙程序关闭连接，有时候我们并不想要被关闭连接。要求必须保持客户端与服务器之间的连接正常，就是我们通常所说的<strong>保活</strong></li><li>通常情况下，服务器与某个客户端一般不是位于同一个网络，其之间可能经过数个路由器和交换机，如果其中某个必经路由器或者交换器出现了故障，并且一段时间内没有恢复，导致这之间的链路不再畅通，而此时服务器与客户端之间也没有数据进行交换，由于TCP连接是状态机，对于这种情况，无论是客户端或者服务器都无法感知与对方的连接是否正常，这类连接我们一般称之为<strong>死链</strong></li></ol><p>根据上面的分析，可以看到，心跳检测一般有两个作用：</p><ul><li>保活</li><li>检测死链</li></ul><h2 id="TCP-keepalive选项"><a href="#TCP-keepalive选项" class="headerlink" title="TCP keepalive选项"></a>TCP keepalive选项</h2><p>熟悉socket编程的读者可能会熟悉下面的这个方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setKeepAlive</span><span class="params">(<span class="keyword">boolean</span> on)</span> <span class="keyword">throws</span> SocketException </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (isClosed())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> SocketException(<span class="string">"Socket is closed"</span>);</span><br><span class="line">    getImpl().setOption(SocketOptions.SO_KEEPALIVE, Boolean.valueOf(on));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>setKeepAlive字面意思是<strong>保持</strong>活着，这个方法也确实是提供用来保持一个TCP连接的，但是为什么我们在设计一个通信系统的时候往往不会直接使用这个方法呢，而是自己实现一个<strong>保活</strong>机制，不推荐使用SO_KEEPALIVE为什么呢？</p><p>我们通过了解TCPKeepAlive的原理，来找到这个问题的答案。</p><p>TCP内嵌有心跳包，以服务端为例,当server检测到超过一定时间(2小时)没有数据传输，那么会向client端发送一个keepalive packet，此时client端有三种反应:</p><ol><li>client端连接正常,返回一个ACK。server端收到ACK后重置计时器，在2小时后在发送探测。如果2小时内连接上有数据传输，那么在该时间的基础上向后推延2小时发送探测包</li><li>客户端异常关闭，或网络断开。client无响应，server收不到ACK，在一定时间(75秒)后重发keepalive packet, 并且重发一定次数(9次)</li><li>客户端曾经崩溃，但已经重启。server收到的探测响应是一个复位(reset)，server端终止连接</li></ol><p>注意：两个小时才会发一次。也就是说，在没有实际数据通信的时候，我把网线拔了，你的应用程序要经过两个小时才会知道。</p><h2 id="应用层的心跳包机制设计"><a href="#应用层的心跳包机制设计" class="headerlink" title="应用层的心跳包机制设计"></a>应用层的心跳包机制设计</h2><p>由于keepalive选项需要为每个连接中的socket开启，这不一定是必须的，可能会产生大量无意义的带宽浪费，且keepalive选项不能与应用层很好地交互，因此一般实际的服务开发中，还是建议读者在应用层设计自己的心跳包机制。那么如何设计呢？</p><p>假定现在有一对已经连接的socket，在以下情况发生时候，socket将不再可用：</p><ol><li>某一端关闭是socket：主动关闭的一方会发送FIN，通知对方要关闭TCP连接。在这种情况下，另一端如果去读socket，将会读到EoF（End of File），于是我们知道对方关闭了socket</li><li>应用程序奔溃：此时socket会由内核关闭，结果跟情况1一样</li><li>系统奔溃：这时候系统是来不及发送FIN的，因为它已经跪了。此时对方无法得知这一情况。对方在尝试读取数据时，最后会返回read time out；如果写数据，则是host unreachable之类的错误（如果没有对socket进行读写，两边都不知道发生了事故）</li><li>电缆被挖断、网线被拔：跟情况3差不多，如果没有对socket进行读写，两边都不知道发生了事故。跟情况3不同的是，如果我们把网线接回去，socket依旧可以正常使用</li></ol><p>在上面的几种情形中，有一个共同点就是，<strong>只要去读、写socket，只要socket连接不正常，我们就能够知道</strong>。基于这一点，要实现一个socket长连接，我们需要做的就是不断地给对方写数据，然后读取对方的数据，也就是所谓的心跳。只要心还在跳，socket就是活的。写数据的间隔，需要根据实际的应用需求来决定。</p><p>心跳包不是实际的业务数据，根据通信协议的不同，需要做不同的处理。比方说，我们使用JSON进行通信，那么，可以为协议包加一个type字段，表面这个JSON是心跳还是业务数据：<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    "msgType": 0,  // 0 表示心跳  // 1 表示真实的通信数据</span><br><span class="line">    // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>需要注意的是：一般是客户端主动给服务器端发送心跳包，服务器端做心跳检测决定是否断开连接。而不是反过来，从客户端的角度来说，客户端为了让自己得到服务器端的正常服务有必要主动和服务器保持连接状态正常，而服务器端不会局限于某个特定的客户端，如果客户端不能主动和其保持连接，那么就会主动回收与该客户端的连接。当然，服务器端在收到客户端的心跳包时应该给客户端一个心跳应答。</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>我们看一个LongLiveSocket类，这个类就是长连接保活的类。也是实现长连接的一个核心类。我们就来看看这个类的实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Runnable mHeartBeatTask = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">byte</span>[] mHeartBeat = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ++mSeqNumHeartBeatSent;</span><br><span class="line">        <span class="comment">// 我们使用长度为 0 的数据作为 heart beat</span></span><br><span class="line">        write(mHeartBeat, <span class="keyword">new</span> WritingCallback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="comment">// 每隔 HEART_BEAT_INTERVAL_MILLIS 发送一次</span></span><br><span class="line">                mWriterHandler.postDelayed(mHeartBeatTask, HEART_BEAT_INTERVAL_MILLIS);</span><br><span class="line">                <span class="comment">// At this point, the heart-beat might be received and handled</span></span><br><span class="line">                <span class="keyword">if</span> (mSeqNumHeartBeatRecv &lt; mSeqNumHeartBeatSent) &#123;</span><br><span class="line">                    mUIHandler.postDelayed(mHeartBeatTimeoutTask, HEART_BEAT_TIMEOUT_MILLIS);</span><br><span class="line">                    <span class="comment">// double check</span></span><br><span class="line">                    <span class="keyword">if</span> (mSeqNumHeartBeatRecv == mSeqNumHeartBeatSent) &#123;</span><br><span class="line">                        mUIHandler.removeCallbacks(mHeartBeatTimeoutTask);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFail</span><span class="params">(<span class="keyword">byte</span>[] data, <span class="keyword">int</span> offset, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">                <span class="comment">// nop</span></span><br><span class="line">                <span class="comment">// write() 方法会处理失败</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Runnable mHeartBeatTimeoutTask = () -&gt; &#123;</span><br><span class="line">    Log.e(TAG, <span class="string">"mHeartBeatTimeoutTask#run: heart beat timeout"</span>);</span><br><span class="line">    closeSocket();</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>可以看出来这个发送心跳频率包的核心方法的实现是：</p><ol><li>有两个心跳包计数器，mSeqNumHeartBeatSent发送心跳包计数器，每次发送一个心跳包，mSeqNumHeartBeatSent+1 。mSeqNumHeartBeatRecv接收的心跳包计数器，每次接收客户端发来的心跳包mSeqNumHeartBeatRecv+1</li><li>这个心跳包的大小是0个字节，rivate byte[] mHeartBeat = new byte[0]</li><li>如果mSeqNumHeartBeatRecv &lt; mSeqNumHeartBeatSent则认为对端断开连接，关闭socket</li></ol><p>客户端client代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EchoClient</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String TAG = <span class="string">"EchoClient"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> LongLiveSocket mLongLiveSocket;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EchoClient</span><span class="params">(String host, <span class="keyword">int</span> port)</span> </span>&#123;</span><br><span class="line">        mLongLiveSocket = <span class="keyword">new</span> LongLiveSocket(</span><br><span class="line">            host, port,</span><br><span class="line">            <span class="comment">// 回调函数</span></span><br><span class="line">            (data, offset, len) -&gt; Log.i(TAG, <span class="string">"EchoClient: received: "</span> + <span class="keyword">new</span> String(data, offset, len)),</span><br><span class="line">            <span class="comment">// 发生错误的回调函数，返回 true，所以只要出错，就会一直重连</span></span><br><span class="line">            () -&gt; <span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">send</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        mLongLiveSocket.write(msg.getBytes(), <span class="keyword">new</span> LongLiveSocket.WritingCallback() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Log.d(TAG, <span class="string">"onSuccess: "</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFail</span><span class="params">(<span class="keyword">byte</span>[] data, <span class="keyword">int</span> offset, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">                Log.w(TAG, <span class="string">"onFail: fail to write: "</span> + <span class="keyword">new</span> String(data, offset, len));</span><br><span class="line">                <span class="comment">// 连接成功后，还会发送这个消息</span></span><br><span class="line">                mLongLiveSocket.write(data, offset, len, <span class="keyword">this</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>就这样，一个带 socket 长连接的客户端就完成了。剩余代码跟我们这里的主题没有太大关系。</p><p>输出如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">03:54:55.583 12691-12713/com.example.echo I/LongLiveSocket: readResponse: heart beat received</span><br><span class="line">03:55:00.588 12691-12713/com.example.echo I/LongLiveSocket: readResponse: heart beat received</span><br><span class="line">03:55:05.594 12691-12713/com.example.echo I/LongLiveSocket: readResponse: heart beat received</span><br><span class="line">03:55:09.638 12691-12710/com.example.echo D/EchoClient: onSuccess:</span><br><span class="line">03:55:09.639 12691-12713/com.example.echo I/EchoClient: EchoClient: received: hello</span><br><span class="line">03:55:10.595 12691-12713/com.example.echo I/LongLiveSocket: readResponse: heart beat received</span><br><span class="line">03:55:14.652 12691-12710/com.example.echo D/EchoClient: onSuccess:</span><br><span class="line">03:55:14.654 12691-12713/com.example.echo I/EchoClient: EchoClient: received: echo</span><br><span class="line">03:55:15.596 12691-12713/com.example.echo I/LongLiveSocket: readResponse: heart beat received</span><br><span class="line">03:55:20.597 12691-12713/com.example.echo I/LongLiveSocket: readResponse: heart beat received</span><br><span class="line">03:55:25.602 12691-12713/com.example.echo I/LongLiveSocket: readResponse: heart beat received</span><br></pre></td></tr></table></figure></p><p>巨人的肩膀：</p><ul><li><a href="https://mp.weixin.qq.com/s/dFn-4Gkm6NNeJkDlupqDvw" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/dFn-4Gkm6NNeJkDlupqDvw</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一个socket长连接&quot;&gt;&lt;a href=&quot;#一个socket长连接&quot; class=&quot;headerlink&quot; title=&quot;一个socket长连接&quot;&gt;&lt;/a&gt;一个socket长连接&lt;/h2&gt;&lt;p&gt;长连接会存在以下两种情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一个客户端连接
      
    
    </summary>
    
      <category term="I/O" scheme="https://kyrie17.github.io/categories/I-O/"/>
    
    
      <category term="socket" scheme="https://kyrie17.github.io/tags/socket/"/>
    
  </entry>
  
  <entry>
    <title>JVM内存管理</title>
    <link href="https://kyrie17.github.io/2020/11/17/JVM%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/"/>
    <id>https://kyrie17.github.io/2020/11/17/JVM内存管理/</id>
    <published>2020-11-17T11:37:33.000Z</published>
    <updated>2020-11-17T11:41:50.197Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在开篇"><a href="#写在开篇" class="headerlink" title="写在开篇"></a>写在开篇</h2><p>本文主要介绍了JVM内存管理和垃圾收集器。</p><h2 id="垃圾收集概念"><a href="#垃圾收集概念" class="headerlink" title="垃圾收集概念"></a>垃圾收集概念</h2><p>我们把还被GC Roots引用的对象称为活的，把不再被引用的对象认为是死的，也就是我们说的垃圾，GC的工作就是找到死的对象，回收它们占用的空间。</p><p>我们把GC管理的内存称为堆（heap），垃圾收集启动的时机取决于各个垃圾收集器，通常，垃圾收集发生于整个堆或堆的部分已经被使用光了，或者使用的空间达到了某个百分比阈值。</p><p>对于内存分配请求，实现的难点在于在堆中找到一块没有被使用的确定大小的内存空间。所以，对于大部分垃圾回收算法来说避免内存碎片化是非常重要的，它将使得空间分配更加高效。</p><h3 id="垃圾收集器的理想特征"><a href="#垃圾收集器的理想特征" class="headerlink" title="垃圾收集器的理想特征"></a>垃圾收集器的理想特征</h3><ul><li>安全和全面：活的对象一定不能被清理掉，死的对象一定不能在几个回收周期结束后还在内存中。</li><li>高效：不能将我们的应用程序挂起太长时间。我们需要在时间、空间、频次上作出权衡。比如，如果堆内存很小，每次垃圾收集就会很快，但是频次会增加。如果堆内存很大，很久才会被填满，但是每一次回收需要的时间很长。</li><li>尽量少的内存碎片：每次将垃圾对象释放以后，这些空间可能分布在各个地方，最糟糕的情况就是，内存中到处都是碎片，在给一个大对象分配空间的时候没有内存可用，实际上内存是够的。消除碎片的方式就是压缩。</li><li>可扩展性：在多核多线程应用中，内存分配和垃圾回收都不应该成为可扩展性的瓶颈。原文提到的这一点，我的理解是：单线程垃圾回收在多核系统中会浪费CPU资源，如果我理解错误，请指正我。</li></ul><h3 id="设计上的权衡"><a href="#设计上的权衡" class="headerlink" title="设计上的权衡"></a>设计上的权衡</h3><p>往下看之前，我们需要先分清楚这里的两个概念：并发和并行</p><ul><li>并行：多个垃圾回收线程同时工作，而不是只有一个垃圾回收线程在工作</li><li>并发：垃圾回收线程和应用程序线程同时工作，应用程序不需要挂起</li></ul><p>在设计或选择垃圾回收算法的时候，我们需要作出以下几个权衡：</p><ul><li>串行 vs 并行<br>串行收集的情况，即使是多核 CPU，也只有一个核心参与收集。使用并行收集器的话，垃圾收集的工作将分配给多个线程在不同的 CPU 上同时进行。并行可以让收集工作更快，缺点是带来的复杂性和内存碎片问题。</li><li>并发 vs Stop-the-world<br>当 stop-the-world 垃圾收集器工作的时候，应用将完全被挂起。与之相对的，并发收集器在大部分工作中都是并发进行的，也许会有少量的 stop-the-world。<br>stop-the-world 垃圾收集器比并发收集器简单很多，因为应用挂起后堆空间不再发生变化，它的缺点是在某些场景下挂起的时间我们是不能接受的（如 web 应用）。<br>相应的，并发收集器能够降低挂起时间，但是也更加复杂，因为在收集的过程中，也会有新的垃圾产生，同时，需要有额外的空间用于在垃圾收集过程中应用程序的继续使用。</li><li>压缩 vs 不压缩 vs 复制<br>当垃圾收集器标记出内存中哪些是活的，哪些是垃圾对象后，收集器可以进行压缩，将所有活的对象移到一起，这样新的内存分配就可以在剩余的空间中进行了。经过压缩后，分配新对象的内存空间是非常简单快速的。<br>相对的，不压缩的收集器只会就地释放空间，不会移动存活对象。优点就是快速完成垃圾收集，缺点就是潜在的碎片问题。通常，这种情况下，分配对象空间会比较慢比较复杂，比如为新的一个大对象找到合适的空间。<br>还有一个选择就是复制收集器，将活的对象复制到另一块空间中，优点就是原空间被清空了，这样后续分配对象空间非常迅速，缺点就是需要进行复制操作和占用额外的空间。</li></ul><h3 id="性能指标"><a href="#性能指标" class="headerlink" title="性能指标"></a>性能指标</h3><p>以下几个是评估垃圾收集器性能的一些指标：</p><ul><li>吞吐量：应用程序的执行时间占总时间的百分比，当然是越高越好</li><li>垃圾收集开销：垃圾收集时间占总时间的百分比（1 - 吞吐量）</li><li>停顿时间：垃圾收集过程中导致的应用程序挂起时间</li><li>频次：相对于应用程序来说，垃圾收集的频次</li><li>空间：垃圾收集占用的内存</li><li>及时性：一个对象从成为垃圾到该对象空间再次可用的时间</li></ul><p>在交互式程序中，通常希望是低延时的，而对于非交互式程序，总运行时间比较重要。实时应用程序既要求每次停顿时间足够短，也要求总的花费在收集的时间足够短。在小型个人计算机和嵌入式系统中，则希望占用更小的空间。</p><h3 id="分代收集介绍"><a href="#分代收集介绍" class="headerlink" title="分代收集介绍"></a>分代收集介绍</h3><p>当我们使用分代垃圾收集器时，内存将被分为不同的代(generation)，最常见的就是分为年轻代和老年代。</p><p>在不同的分代中，可以根据不同的特点使用不同的算法。分代垃圾收集基于 weak generational hypothesis 假设（通常国人会翻译成 弱分代假设）：</p><ul><li>大部分对象都是短命的，它们在年轻的时候就会死去</li><li>极少老年对象对年轻对象的引用</li></ul><p>年轻代中的收集是非常频繁的、高效的、快速的，因为年轻代空间中，通常都是小对象，同时有非常多的不再被引用的对象。</p><p>那些经历过多次年轻代垃圾收集还存活的对象会晋升到老年代中，老年代的空间更大，而且占用空间增长比较慢。这样，老年代的垃圾收集是不频繁的，但是进行一次垃圾收集需要的时间更长。</p><p>对于新生代，需要选择速度比较快的垃圾回收算法，因为新生代的垃圾回收是频繁的。</p><p>对于老年代，需要考虑的是空间，因为老年代占用了大部分堆内存，而且针对该部分的垃圾回收算法，需要考虑到这个区域的垃圾密度比较低。</p><h2 id="JVM中的垃圾收集器"><a href="#JVM中的垃圾收集器" class="headerlink" title="JVM中的垃圾收集器"></a>JVM中的垃圾收集器</h2><h3 id="HotSpot分代"><a href="#HotSpot分代" class="headerlink" title="HotSpot分代"></a>HotSpot分代</h3><p>在 HotSpot 虚拟机中，内存被组织成三个分代：年轻代、老年代、永久代。</p><ul><li>大部分对象初始化的时候都是在年轻代中的</li><li>老年代存放经过了几次年轻代垃圾收集依然还活着的对象，还有部分大对象因为比较大所以分配的时候直接在老年代分配</li><li>永久代，通常也叫 方法区，用于存储已加载类的元数据，以及存储运行时常量池等</li></ul><h3 id="垃圾回收类型"><a href="#垃圾回收类型" class="headerlink" title="垃圾回收类型"></a>垃圾回收类型</h3><p>当年轻代被填满后，会进行一次年轻代垃圾收集（也叫做minor GC）。</p><p>当老年代或永久代被填满了，会触发full GC（也叫做 major GC），full GC 会收集所有区域，先进行年轻代的收集，使用年轻代专用的垃圾回收算法，然后使用老年代的垃圾回收算法回收老年代和永久代。如果算法带有压缩，每个代分别独立地进行压缩。</p><p>如果先进行年轻代垃圾收集，会使得老年代不能容纳要晋升上来的对象，这种情况下，不会先进行young gc，所有的收集器都会（除了CMS）直接采用老年代收集算法对整个堆进行收集（CMS收集器比较特殊，因为它不能收集年轻代的垃圾）。</p><h3 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h3><h4 id="指针碰撞"><a href="#指针碰撞" class="headerlink" title="指针碰撞"></a>指针碰撞</h4><p>如果垃圾收集完成后，存在大片连续的内存可用于分配给新对象，这种情况下分配空间是非常简单快速的，只要一个简单的指针碰撞就可以了（bump-the-pointer），每次分配对象空间只要检测一下是否有足够的空间，如果有，指针往前移动N位就分配好空间了，然后就可以初始化这个对象了。</p><h4 id="TLABs"><a href="#TLABs" class="headerlink" title="TLABs"></a>TLABs</h4><p>对于多线程应用，对象分配必须要保证线程安全性，如果使用全局锁，那么分配空间将成为瓶颈并降低程序性能。HotSpot使用了称之为Thread-Local Allocation Buffers(TLABs) 的技术，该技术能改善多线程空间分配的吞吐量。首先，给予每个线程一部分内存作为缓存区，每个线程都在自己的缓存区中进行指针碰撞，这样就不用获取全局锁了。只有当一个线程使用完了它的TLAB，它才需要使用同步来获取一个新的缓冲区。HotSpot使用了多项技术来降低TLAB对于内存的浪费。比如，TLAB的平均大小被限制在Eden区大小的1%之内。TLABs和使用指针碰撞的线性分配结合，使得内存分配非常简单高效，只需要大概10条机器指令就可以完成。</p><h3 id="串行收集器"><a href="#串行收集器" class="headerlink" title="串行收集器"></a>串行收集器</h3><p>使用串行收集器，年轻代和老年代都使用单线程进行收集（使用一个CPU），收集过程中会stop-the-world。所以当在垃圾收集的时候，应用程序是完全停止的。</p><h4 id="在年轻代中使用串行收集器"><a href="#在年轻代中使用串行收集器" class="headerlink" title="在年轻代中使用串行收集器"></a>在年轻代中使用串行收集器</h4><p>下图展示了年轻代中使用串行收集器的流程。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/jvmncgl01.png" alt="jvm内存管理01" title>                </div>                <div class="image-caption">jvm内存管理01</div>            </figure></p><p>年轻代分为一个Eden区和两个Survivor区（From区和To区）。年轻代垃圾收集时，将Eden中活着的对象复制到空的Survivor-To区，Survivor-From区的对象分两类，一类是年轻的，也是复制到Survivor-To区，还有一类是老家伙，晋升到老年代中。</p><p>如果复制的过程中，发现Survivor-To空间满了，将剩下还没复制到Survivor-To的来自于Eden和Survivor-From区的对象直接晋升到老年代。</p><p>年轻代垃圾收集完成后，Eden区和Survivor-From就干净了，此时，将Survivor-From和 Survivor-To交换一下角色。得到下面这个样子：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/jvmncgl02.png" alt="jvm内存管理02" title>                </div>                <div class="image-caption">jvm内存管理02</div>            </figure></p><h4 id="在老年代中使用串行收集器"><a href="#在老年代中使用串行收集器" class="headerlink" title="在老年代中使用串行收集器"></a>在老年代中使用串行收集器</h4><p>如果使用串行收集器，在老年代和永久代将通过使用 标记 -&gt; 清除 -&gt; 压缩算法。标记阶段，收集器识别出哪些对象是活的；清除阶段将遍历一下老年代和永久代，识别出哪些是垃圾；然后执行压缩，将活的对象左移到老年代的起始端（永久代类似），这样就留下了右边一片连续可用的空间，后续就可以通过指针碰撞的方式快速分配对象空间。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/jvmncgl03.png" alt="jvm内存管理03" title>                </div>                <div class="image-caption">jvm内存管理03</div>            </figure></p><h4 id="何时应该使用串行收集器"><a href="#何时应该使用串行收集器" class="headerlink" title="何时应该使用串行收集器"></a>何时应该使用串行收集器</h4><p>串行收集器适用于运行在client模式下的大部分程序，它们不要求低延时。在现代硬件条件下，串行收集器可以高效管理64M堆内存，并且能将full GC控制在半秒内完成。</p><h3 id="并行收集器"><a href="#并行收集器" class="headerlink" title="并行收集器"></a>并行收集器</h3><p>现在大多数Java应用都运行在大内存、多核环境中，并行收集器，也就是大家熟知的<strong>吞吐量收集器</strong>，利用多核的优势来进行垃圾收集，而不是像串行收集器一样将程序挂起后只使用单线程来收集垃圾。</p><h4 id="在年轻代中使用并行收集器"><a href="#在年轻代中使用并行收集器" class="headerlink" title="在年轻代中使用并行收集器"></a>在年轻代中使用并行收集器</h4><p>并行收集器在年轻代中其实就是串行收集器收集算法的并行版本。它仍然使用 stop-the-world 和复制算法，只不过使用了多核的优势并行执行，降低垃圾收集的时间，从而提高吞吐量。下图示意了在年轻代中，串行收集器和并行收集器的区别：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/jvmncgl04.png" alt="jvm内存管理04" title>                </div>                <div class="image-caption">jvm内存管理04</div>            </figure></p><h4 id="在老年代中使用并行收集器"><a href="#在老年代中使用并行收集器" class="headerlink" title="在老年代中使用并行收集器"></a>在老年代中使用并行收集器</h4><p>在老年代中，并行收集器使用的是和串行收集器一样的算法：单线程，标记 -&gt; 清除 -&gt; 压缩。</p><p>ps：是的，并行收集器只能在年轻代中并行。</p><h4 id="何时使用并行收集器"><a href="#何时使用并行收集器" class="headerlink" title="何时使用并行收集器"></a>何时使用并行收集器</h4><p>其适用于多核、不要求低停顿的应用，因为老年代的收集虽然不频繁，但是每次老年代的单线程垃圾收集依然可能会需要很长时间。比如说，它可以应用在批处理、账单计算、科学计算等。</p><p>你应该不会想要这个收集器，而是要一个可以对每个代都采用并行收集的并行压缩收集器，下一节将介绍这个。</p><h3 id="并行压缩收集器"><a href="#并行压缩收集器" class="headerlink" title="并行压缩收集器"></a>并行压缩收集器</h3><p>并行压缩收集器于J2SE 5.0 update 6引入，和并行收集器的区别在于它在老年代也使用并行收集算法。注意：并行压缩收集器终将会取代并行收集器。</p><h4 id="在年轻代中使用并行压缩收集器"><a href="#在年轻代中使用并行压缩收集器" class="headerlink" title="在年轻代中使用并行压缩收集器"></a>在年轻代中使用并行压缩收集器</h4><p>并行压缩收集器在年轻代中使用了和并行收集器一样的算法。即使用 并行、stop-the-world、复制 算法。</p><h4 id="在老年代中使用并行压缩收集器"><a href="#在老年代中使用并行压缩收集器" class="headerlink" title="在老年代中使用并行压缩收集器"></a>在老年代中使用并行压缩收集器</h4><p>在老年代和永久代中，其使用 并行、stop-the-world、滑动压缩 算法。</p><p>一次收集分三个阶段，首先，将老年代或永久代逻辑上分为固定大小的区块。</p><ul><li>标记阶段，将GC Roots分给多个垃圾收集线程，每个线程并行地去标记存活的对象，一旦标记一个存活对象，在该对象所在的区块记录这个对象的大小和对象所在的位置</li><li>汇总阶段，此阶段针对区块进行。由于之前的垃圾回收影响，老年代和永久代的左侧是 存活对象密集区，对这部分区域直接进行压缩的代价是不值得的，能清理出来的空间有限。所以第一件事就是，检查每个区块的密度，从左边第一个开始，直到找到一个区块满足：对右侧的所有区块进行压缩获得的空间抵得上压缩它们的成本。这个区块左边的区域过于密集，不会有对象移动到这个区域中。然后，计算并保存右侧区域中每个区块被压缩后的新位置首字节地址<br>右侧的区域将被压缩，对于右侧的每个区块，由于每个区块中保存了该区块的存活对象信息，所以很容易计算每个区块的新位置。注意：汇总阶段目前被实现为串行进行，这个阶段修改为并行也是可行的，不过没有在标记阶段和下面的压缩阶段并行那么重要</li><li>压缩阶段，在汇总阶段已经完成了每个区块新位置的计算，所以压缩阶段每个回收线程并行将每个区块复制到新位置即可。压缩结束后，就清出来了右侧一大片连续可用的空间</li></ul><h4 id="何时使用并行压缩收集器"><a href="#何时使用并行压缩收集器" class="headerlink" title="何时使用并行压缩收集器"></a>何时使用并行压缩收集器</h4><p>首先是多核上的并行优势，这个就不重复了。其次，前面的并行收集器对于老年代和永久代使用串行，而并行压缩收集器在这些区域使用并行，能降低停顿时间。</p><p>并行压缩收集器不适合运行在大型共享主机上（如SunRays），因为它在收集的时候会独占几个CPU，在这种机器上，可以考虑减少垃圾收集的线程数（通过 –XX:ParallelGCThreads=n），或者就选择其他收集器。</p><h3 id="Concurrent-Mark-Sweep（CMS）收集器"><a href="#Concurrent-Mark-Sweep（CMS）收集器" class="headerlink" title="Concurrent Mark-Sweep（CMS）收集器"></a>Concurrent Mark-Sweep（CMS）收集器</h3><p>重头戏CMS登场了，至少对于我这个web开发者来说，目前CMS最常用（使用JDK8的应用一般都切换到G1收集器了）。前面介绍的都是并行收集，这里要介绍并发收集了，也就是垃圾回收线程和应用程序线程同时运行。</p><p>对于许多程序来说，吞吐量不如响应时间来得重要。通常年轻代的垃圾收集不会停顿多长时间，但是，老年代垃圾回收，虽然不频繁，但是可能导致长时间的停顿，尤其当堆内存比较大的时候。为了解决这个问题，HotSpot虚拟机提供了CMS收集器，也叫做<strong>低延时收集器</strong>。</p><h4 id="在年轻代中使用CMS收集器"><a href="#在年轻代中使用CMS收集器" class="headerlink" title="在年轻代中使用CMS收集器"></a>在年轻代中使用CMS收集器</h4><p>在年轻代中，CMS和并行收集器一样，即：并行、stop-the-world、复制。</p><h4 id="在老年代中使用-CMS-收集器"><a href="#在老年代中使用-CMS-收集器" class="headerlink" title="在老年代中使用 CMS 收集器"></a>在老年代中使用 CMS 收集器</h4><p>在老年代的垃圾收集过程中，大部分收集任务是和应用程序<strong>并发</strong>执行的。</p><p>CMS收集过程首先是一段小停顿stop-the-world，叫做<strong>初始标记阶段</strong>（initial mark），用于确定GC Roots。然后是<strong>并发标记阶段</strong>（concurrent mark），标记GC Roots可达的所有存活对象，由于这个阶段应用程序同时也在运行，所以并发标记阶段结束后，并不能标记出所有的存活对象。为了解决这个问题，需要再次停顿应用程序，称为<strong>再次标记阶段</strong>（remark），遍历在并发标记阶段应用程序修改的对象（标记出应用程序在这个期间的活对象），由于这次停顿比初始标记要长得多，<strong>所以会使用多线程并行执行来增加效率</strong>。</p><p>再次标记阶段结束后，能保证所有存活对象都被标记完成，所以接下来的<strong>并发清理阶段</strong>（concurrent sweep） 将就地回收垃圾对象所占空间。下图示意了老年代中<strong>串行、标记 -&gt; 清理 -&gt; 压缩收集器</strong>和<strong>CMS收集器</strong>的区别：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/jvmncgl05.png" alt="jvm内存管理05" title>                </div>                <div class="image-caption">jvm内存管理05</div>            </figure></p><p>由于部分任务增加了收集器的工作，如遍历并发阶段应用程序修改的对象，所以增加了CMS收集器的负载。对于大部分试图降低停顿时间的收集器来说，这是一种权衡方案。</p><p>CMS收集器是<strong>唯一不进行压缩的收集器</strong>，在它释放了垃圾对象占用的空间后，它不会移动存活对象到一边去。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/jvmncgl06.png" alt="jvm内存管理06" title>                </div>                <div class="image-caption">jvm内存管理06</div>            </figure></p><p>这将节省垃圾回收的时间，但是由于之后空闲空间不是连续的，所以也就不能使用简单的<strong>指针碰撞</strong>进行对象空间分配了。它需要维护一个<strong>空闲列表</strong>，将所有的空闲区域连接起来，当分配空间时，需要寻找到一个可以容纳该对象的区域。显然，它比使用简单的指针碰撞成本要高。同时它也会加大年轻代垃圾收集的负载，因为年轻代中的对象如果要晋升到老年代中，需要老年代进行空间分配。</p><p>另外一个缺点就是，CMS收集器相比其他收集器需要使用更大的堆内存。因为在并发标记阶段，程序还需要执行，所以需要留足够的空间给应用程序。另外，虽然收集器能保证在标记阶段识别出所有的存活对象，但是由于应用程序并发运行，所以刚刚标记的存活对象很可能立马成为垃圾，而且这部分由于已经被标记为<strong>存活对象</strong>，所以只能到下次老年代收集才会被清理，这部分垃圾称为<strong>浮动垃圾</strong>。</p><p>最后，由于缺少压缩环节，堆将会出现碎片化问题。为了解决这个问题，CMS 收集器需要追踪统计最常用的对象大小，评估将来的分配需求，可能还需要分割或合并空闲区域。</p><p>不像其他垃圾收集器，CMS收集器不能等到老年代满了才开始收集。否则的话，CMS收集器将退化到使用更加耗时的<strong>stop-the-world、标记-清除-压缩</strong>算法。为了避免这个，CMS收集器需要统计之前每次垃圾收集的时间和老年代空间被消耗的速度。另外，如果老年代空间被消耗了<strong>预设占用率</strong>（initiating occupancy），也将会触发一次垃圾收集，这个占用率通过 –XX:CMSInitiatingOccupancyFraction=n 进行设置，n为老年代空间的占用百分比，默认值是68。</p><p>总结下来，和并行收集器相比，CMS收集器<strong>降低了老年代收集时的停顿时间</strong>（有时是显著降低），<strong>稍微增加了一些年轻代收集的时间、降低了吞吐量</strong>以及<strong>需要更多的堆内存</strong>。</p><h4 id="何时使用CMS收集器"><a href="#何时使用CMS收集器" class="headerlink" title="何时使用CMS收集器"></a>何时使用CMS收集器</h4><p>适用于应用程序要求低停顿，同时能接受在垃圾收集阶段和垃圾收集线程一起共享CPU资源的场景，典型的就是web应用了。</p><p>在web应用中，低延时非常重要，所以CMS几乎就是唯一选择，直到后来G1的出现。</p><h3 id="G1"><a href="#G1" class="headerlink" title="G1"></a>G1</h3><p>G1的主要关注点在于达到可控的停顿时间，在这个基础上尽可能提高吞吐量，这一点非常重要。</p><p>G1被设计用来长期取代CMS收集器，和CMS相同的地方在于，它们都属于并发收集器，在大部分的收集阶段都不需要挂起应用程序。区别在于，G1没有CMS的碎片化问题（或者说不那么严重），同时提供了更加可控的停顿时间。</p><p>如果你的应用使用了较大的堆（如6GB及以上）而且还要求有较低的垃圾收集停顿时间（如0.5秒），那么G1是你绝佳的选择，是时候放弃CMS了。</p><h3 id="G1总览"><a href="#G1总览" class="headerlink" title="G1总览"></a>G1总览</h3><p>首先是内存划分上，之前介绍的分代收集器将整个堆分为年轻代、老年代和永久代，每个代的空间是确定的。</p><p>而G1将整个堆划分为一个个大小相等的小块（每一块称为一个region），每一块的内存是连续的。和分代算法一样，G1中每个块也会充当Eden、Survivor、Old三种角色，但是它们不是固定的，这使得内存使用更加地灵活。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/jvmncgl07.png" alt="JVM内存管理07" title>                </div>                <div class="image-caption">JVM内存管理07</div>            </figure></p><p>执行垃圾收集时，和CMS一样，G1收集线程在标记阶段和应用程序线程<strong>并发</strong>执行，标记结束后，G1也就知道哪些区块基本上是垃圾，存活对象极少，G1会先从这些区块下手，因为从这些区块能很快释放得到很大的可用空间，<strong>这也是为什么G1被取名为Garbage-First的原因</strong>。</p><p>在G1中，目标停顿时间非常非常重要，用-XX:MaxGCPauseMillis=200指定期望的停顿时间。</p><p>G1使用了停顿预测模型来满足用户指定的停顿时间目标，并基于目标来选择进行垃圾回收的区块数量。G1采用增量回收的方式，每次回收一些区块，而不是整堆回收。</p><p>我们要知道G1不是一个实时收集器，它会尽力满足我们的停顿时间要求，但也不是绝对的，它基于之前垃圾收集的数据统计，估计出在用户指定的停顿时间内能收集多少个区块。</p><p><strong>注意</strong>：G1有和应用程序一起运行的<strong>并发</strong>阶段，也有stop-the-world的<strong>并行</strong>阶段。但是，Full GC的时候还是<strong>单线程</strong>运行的，所以我们应该尽量避免发生Full GC，后面我们也会介绍什么时候会触发Full GC。</p><h4 id="G1内存占用"><a href="#G1内存占用" class="headerlink" title="G1内存占用"></a>G1内存占用</h4><p>G1比ParallelOld和CMS会需要更多的内存消耗，那是因为有部分内存消耗于簿记（accounting）上，如以下两个数据结构：</p><ul><li>Remembered Sets：每个区块都有一个RSet，用于记录进入该区块的对象引用（如区块 A 中的对象引用了区块B，区块B的Rset需要记录这个信息），它用于实现收集过程的并行化以及使得区块能进行独立收集。总体上Remembered Sets消耗的内存小于5%</li><li>Collection Sets：将要被回收的区块集合。GC时，在这些区块中的对象会被复制到其他区块中，总体上Collection Sets消耗的内存小于1%</li></ul><h4 id="G1工作流程"><a href="#G1工作流程" class="headerlink" title="G1工作流程"></a>G1工作流程</h4><p>G1收集器主要包括了以下4种操作：</p><ol><li>年轻代收集</li><li>并发收集，和应用线程同时执行</li><li>混合式垃圾收集</li><li>必要时的 Full GC</li></ol><h5 id="年轻代收集"><a href="#年轻代收集" class="headerlink" title="年轻代收集"></a>年轻代收集</h5><p>首先，我们来看下 G1 的堆结构：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/jvmncgl08.png" alt="jvm内存管理08" title>                </div>                <div class="image-caption">jvm内存管理08</div>            </figure></p><p>年轻代中的垃圾收集流程（Young GC）：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/jvmncgl09.png" alt="jvm内存管理09" title>                </div>                <div class="image-caption">jvm内存管理09</div>            </figure></p><p>我们可以看到，年轻代收集概念上和之前介绍的其他分代收集器大差不差的，但是它的年轻代会动态调整。</p><h5 id="Old-GC-并发标记周期"><a href="#Old-GC-并发标记周期" class="headerlink" title="Old GC / 并发标记周期"></a>Old GC / 并发标记周期</h5><p>接下来是Old GC的流程（含Young GC阶段），其实把Old GC理解为并发周期是比较合理的，不要单纯地认为是清理老年代的区块，因为这一步和年轻代收集也是相关的。下面我们介绍主要流程：</p><ul><li>初始标记：stop-the-world，它伴随着一次普通的Young GC发生，然后对Survivor区（root region）进行标记，因为该区可能存在对老年代的引用<br>因为Young GC是需要stop-the-world的，所以并发周期直接重用这个阶段，虽然会增加CPU开销，但是停顿时间只是增加了一小部分</li><li>扫描根引用区：因为先进行了一次YGC，所以当前年轻代只有Survivor区有存活对象，它被称为根引用区。扫描Survivor到老年代的引用，该阶段必须在下一次Young GC发生前结束<br>这个阶段不能发生年轻代收集，如果中途Eden区真的满了，也要等待这个阶段结束才能进行Young GC</li><li>并发标记：寻找整个堆的存活对象，该阶段可以被Young GC中断<br>这个阶段是并发执行的，中间可以发生多次Young GC，Young GC会中断标记过程</li><li>重新标记：stop-the-world，完成最后的存活对象标记。使用了比CMS收集器更加高效的snapshot-at-the-beginning(SATB)算法<br>Oracle的资料显示，这个阶段会回收完全空闲的区块</li><li>清理：清理阶段真正回收的内存很少</li></ul><p>到这里，G1的一个并发周期就算结束了，其实就是主要完成了垃圾定位的工作，定位出了哪些分区是垃圾最多的。因为整堆一般比较大，所以这个周期应该会比较长，中间可能会被多次stop-the-world的Young GC打断。</p><h5 id="混合垃圾回收周期"><a href="#混合垃圾回收周期" class="headerlink" title="混合垃圾回收周期"></a>混合垃圾回收周期</h5><p>并发周期结束后是混合垃圾回收周期，不仅进行年轻代垃圾收集，而且回收之前标记出来的老年代的垃圾最多的部分区块。</p><p>混合垃圾回收周期会持续进行，直到几乎所有的被标记出来的分区（垃圾占比大的分区）都得到回收，然后恢复到常规的年轻代垃圾收集，最终再次启动并发周期。</p><h5 id="Full-GC"><a href="#Full-GC" class="headerlink" title="Full GC"></a>Full GC</h5><p>到这里我们已经说了年轻代收集、并发周期、混合回收周期了，大家要熟悉这几个阶段的工作。</p><p>下面我们来介绍特殊情况，那就是会导致Full GC的情况，也是我们需要极力避免的：</p><ul><li>concurrent mode failure：并发模式失败，CMS 收集器也有同样的概念。G1并发标记期间，如果在标记结束前，老年代被填满，G1会放弃标记<br>这个时候说明堆需要增加了，或者需要调整并发周期，如增加并发标记的线程数量，让并发标记尽快结束，或者就是更早地进行并发周期，默认是整堆内存的45% 被占用就开始进行并发周期</li><li>晋升失败：并发周期结束后，是混合垃圾回收周期，伴随着年轻代垃圾收集，进行清理老年代空间，如果这个时候清理的速度小于消耗的速度，导致老年代不够用，那么会发生晋升失败<br>说明混合垃圾回收需要更迅速完成垃圾收集，也就是说在混合回收阶段，每次年轻代的收集应该处理更多的老年代已标记区块</li><li>疏散失败：年轻代垃圾收集的时候，如果 Survivor 和 Old 区没有足够的空间容纳所有的存活对象。这种情况肯定是非常致命的，因为基本上已经没有多少空间可以用了，这个时候会触发 Full GC 也是很合理的<br>最简单的就是增加堆大小</li><li>大对象分配失败，我们应该尽可能地不创建大对象，尤其是大于一个区块大小的那种对象</li></ul><h5 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h5><p>首先，最好不要把上面的Old GC当做是一次GC来看，而应该当做并发标记周期来理解，虽然它确实会释放出一些内存。</p><p>并发标记结束后，G1也就知道了哪些区块是最适合被回收的，那些完全空闲的区块会在这这个阶段被回收。如果这个阶段释放了足够的内存出来，其实也就可以认为结束了一次GC。</p><p>我们假设并发标记结束了，那么下次GC的时候，还是会先回收年轻代，如果从年轻代中得到了足够的内存，那么结束；过了几次后，年轻代垃圾收集不能满足需要了，那么就需要利用之前并发标记的结果，选择一些活跃度最低的老年代区块进行回收。直到最后，老年代会进入下一个并发周期。</p><p>那么什么时候会启动并发标记周期呢？这个是通过参数控制的，下面马上要介绍这个参数了，此参数默认值是45，也就是说当堆空间使用了45%后，G1就会进入并发标记周期。</p><p>G1调优的目标是尽量避免出现Full GC，其实就是给老年代足够的空间，或相对更多的空间。</p><p>有以下几点我们可以进行调整的方向：</p><ul><li>增加堆大小，或调整老年代和年轻代的比例，这个很好理解</li><li>增加并发周期的线程数量，其实就是为了加快并发周期快点结束</li><li>让并发周期尽早开始，这个是通过设置堆使用占比来调整的（默认45%）</li><li>在混合垃圾回收周期中回收更多的老年代区块</li></ul><p>G1的很重要的目标是达到可控的停顿时间，所以很多的行为都以这个目标为出发点开展的。</p><p>我们通过设置-XX:MaxGCPauseMillis=N来指定停顿时间（单位ms，默认200ms），如果没有达到这个目标，G1会通过各种方式来补救：调整年轻代和老年代的比例，调整堆大小，调整晋升的年龄阈值，调整混合垃圾回收周期中处理的老年代的区块数量等等。</p><p>当然了，调整每个参数满足了一个条件的同时往往也会引入另一个问题，比如为了降低停顿时间，我们可以减小年轻代的大小，可是这样的话就会增加年轻代垃圾收集的频率。如果我们减少混合垃圾回收周期处理的老年代区块数量，虽然可以更容易满足停顿时间要求，可是这样就会增加Full GC的风险等等。</p><p>文章大篇幅整理自：</p><ul><li><a href="https://www.javadoop.com/" target="_blank" rel="noopener">https://www.javadoop.com/</a> 垃圾收集器相关文章。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在开篇&quot;&gt;&lt;a href=&quot;#写在开篇&quot; class=&quot;headerlink&quot; title=&quot;写在开篇&quot;&gt;&lt;/a&gt;写在开篇&lt;/h2&gt;&lt;p&gt;本文主要介绍了JVM内存管理和垃圾收集器。&lt;/p&gt;
&lt;h2 id=&quot;垃圾收集概念&quot;&gt;&lt;a href=&quot;#垃圾收集概念&quot; cl
      
    
    </summary>
    
      <category term="Java乐园" scheme="https://kyrie17.github.io/categories/Java%E4%B9%90%E5%9B%AD/"/>
    
    
      <category term="JVM" scheme="https://kyrie17.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>Java类是如何被加载的</title>
    <link href="https://kyrie17.github.io/2020/11/16/Java%E7%B1%BB%E6%98%AF%E5%A6%82%E4%BD%95%E8%A2%AB%E5%8A%A0%E8%BD%BD%E7%9A%84/"/>
    <id>https://kyrie17.github.io/2020/11/16/Java类是如何被加载的/</id>
    <published>2020-11-15T16:37:14.000Z</published>
    <updated>2020-11-15T16:38:28.584Z</updated>
    
    <content type="html"><![CDATA[<h2 id="何时加载类"><a href="#何时加载类" class="headerlink" title="何时加载类"></a>何时加载类</h2><ol><li>遇到new、getstatic、putstatic等指令时</li><li>对类进行反射调用的时候</li><li>初始化某个类的子类的时候</li><li>虚拟机启动时会先加载设置的程序主类</li><li>使用JDK1.7 的动态语言支持的时候</li></ol><p>其实就是，当运行过程中需要这个类的时候。</p><h2 id="怎么加载类"><a href="#怎么加载类" class="headerlink" title="怎么加载类"></a>怎么加载类</h2><p>利用ClassLoader加载类很简单，直接调用ClassLoder的loadClass()方法即可<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException </span>&#123;</span><br><span class="line">        Test.class.getClassLoader().loadClass(<span class="string">"com.wangxiandeng.test.Dog"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="JVM-是怎么加载类的"><a href="#JVM-是怎么加载类的" class="headerlink" title="JVM 是怎么加载类的"></a>JVM 是怎么加载类的</h2><p>JVM默认用于加载用户程序的ClassLoader为AppClassLoader，不过无论是什么ClassLoader，它的根父类都是java.lang.ClassLoader。最终会调用到ClassLoader.definClass1()，这是一个native方法。</p><p>Java_java_lang_ClassLoader_defineClass1()<br>-&gt; JVM_DefineClassWithSource()<br>-&gt; jvm_define_class_common() // 利用ClassFileStream将要加载的class文件转成文件流<br>-&gt; SystemDictionary::resolve_from_stream() // 将Class文件加载成内存中的Klass</p><p>resolve_from_stream()便是重中之重！主要逻辑有下面几步：</p><h3 id="判断是否允许并行加载类，并根据判断结果进行加锁"><a href="#判断是否允许并行加载类，并根据判断结果进行加锁" class="headerlink" title="判断是否允许并行加载类，并根据判断结果进行加锁"></a>判断是否允许并行加载类，并根据判断结果进行加锁</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">bool DoObjectLock = <span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">if</span> (is_parallelCapable(class_loader)) &#123;</span><br><span class="line">    DoObjectLock = <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">ClassLoaderData* loader_data = register_loader(class_loader, CHECK_NULL);</span><br><span class="line">Handle lockObject = compute_loader_lock_object(class_loader, THREAD);</span><br><span class="line">check_loader_lock_contention(lockObject, THREAD);</span><br><span class="line"><span class="function">ObjectLocker <span class="title">ol</span><span class="params">(lockObject, THREAD, DoObjectLock)</span></span>;</span><br></pre></td></tr></table></figure><p>如果允许并行加载，则不会对ClassLoader进行加锁，只对SystemDictionary加锁。否则，便会利用ObjectLocker对ClassLoader加锁，保证同一个ClassLoader在同一时刻只能加载一个类。ObjectLocker会在其构造函数中获取锁，并在析构函数中释放锁。<br>允许并行加载的好处便是精细化了锁粒度，这样可以在同一时刻加载多个Class文件。</p><h3 id="解析文件流，生成InstanceKlass"><a href="#解析文件流，生成InstanceKlass" class="headerlink" title="解析文件流，生成InstanceKlass"></a>解析文件流，生成InstanceKlass</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">InstanceKlass* k = NULL;</span><br><span class="line">k = KlassFactory::create_from_stream(st,</span><br><span class="line">                                     class_name,</span><br><span class="line">                                     loader_data,</span><br><span class="line">                                     protection_domain,</span><br><span class="line">                                     NULL, <span class="comment">// host_klass</span></span><br><span class="line">                                     NULL, <span class="comment">// cp_patches</span></span><br><span class="line">                                     CHECK_NULL);</span><br></pre></td></tr></table></figure><p>Klass就是JVM用来定义一个Java Class的数据结构。不过Klass只是一个基类，Java Class真正的数据结构定义在InstanceKlass中。InstanceKlass中记录了一个Java类的所有属性，包括注解、方法、字段、内部类、常量池等信息。这些信息本来被记录在Class文件中，所以说，InstanceKlass就是一个Java Class文件被加载到内存后的形式。</p><p>生成InstanceKlass调用的是KlassFactory::create_from_stream()，它的主要逻辑如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ClassFileParser <span class="title">parser</span><span class="params">(stream,</span></span></span><br><span class="line"><span class="function"><span class="params">                       name,</span></span></span><br><span class="line"><span class="function"><span class="params">                       loader_data,</span></span></span><br><span class="line"><span class="function"><span class="params">                       protection_domain,</span></span></span><br><span class="line"><span class="function"><span class="params">                       host_klass,</span></span></span><br><span class="line"><span class="function"><span class="params">                       cp_patches,</span></span></span><br><span class="line"><span class="function"><span class="params">                       ClassFileParser::BROADCAST, // publicity level</span></span></span><br><span class="line"><span class="function"><span class="params">                       CHECK_NULL)</span></span>;</span><br><span class="line"></span><br><span class="line">InstanceKlass* result = parser.create_instance_klass(old_stream != stream, CHECK_NULL);</span><br></pre></td></tr></table></figure></p><p>可以看到，ClassFileParser才是真正的主角啊！它才是将Class文件升华成InstanceKlass的幕后大佬！</p><p>create_instance_klass()主要就干了两件事：</p><h4 id="为-InstanceKlass分配内存"><a href="#为-InstanceKlass分配内存" class="headerlink" title="为 InstanceKlass分配内存"></a>为 InstanceKlass分配内存</h4><p>内存分配代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> size = InstanceKlass::size(parser.vtable_size(),</span><br><span class="line">                                     parser.itable_size(),</span><br><span class="line">                                     nonstatic_oop_map_size(parser.total_oop_map_count()),</span><br><span class="line">                                     parser.is_interface(),</span><br><span class="line">                                     parser.is_anonymous(),</span><br><span class="line">                                     should_store_fingerprint(parser.is_anonymous()));</span><br><span class="line">ClassLoaderData* loader_data = parser.loader_data();</span><br><span class="line">InstanceKlass* ik;</span><br><span class="line">ik = <span class="keyword">new</span> (loader_data, size, THREAD) InstanceKlass(parser, InstanceKlass::_misc_kind_other);</span><br></pre></td></tr></table></figure></p><p>这里首先计算了InstanceKlass在内存中的大小，要知道，这个大小在Class文件编译后就被确定了。</p><p>然后便new了一个新的InstanceKlass对象。这里并不是简单的在堆上分配内存，要注意的是Klass对new操作符进行了重载：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span>* Klass::<span class="function">operator <span class="title">new</span><span class="params">(size_t size, ClassLoaderData* loader_data, size_t word_size, TRAPS)</span> <span class="title">throw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Metaspace::allocate(loader_data, word_size, MetaspaceObj::ClassType, THREAD);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>分配InstanceKlass的时候调用了Metaspace::allocate()：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">MetaWord* Metaspace::allocate(ClassLoaderData* loader_data, size_t word_size,</span><br><span class="line">                              MetaspaceObj::Type type, TRAPS) &#123;</span><br><span class="line">    ......</span><br><span class="line">        MetadataType mdtype = (type == MetaspaceObj::ClassType) ? ClassType : NonClassType;</span><br><span class="line">    ......</span><br><span class="line">        MetaWord* result = loader_data-&gt;metaspace_non_null()-&gt;allocate(word_size, mdtype);</span><br><span class="line">    ......</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>由此可见，InstanceKlass 是分配在 ClassLoader的 Metaspace（元空间） 的方法区中。从 JDK8 开始，HotSpot 就没有了永久代，类都分配在 Metaspace 中。Metaspace 和永久代不一样，采用的是 Native Memory，永久代由于受限于 MaxPermSize，所以当内存不够时会内存溢出。</p><h4 id="分析Class文件，填充InstanceKlass内存区域"><a href="#分析Class文件，填充InstanceKlass内存区域" class="headerlink" title="分析Class文件，填充InstanceKlass内存区域"></a>分析Class文件，填充InstanceKlass内存区域</h4><p>ClassFileParser在构造的时候就会开始分析Class文件，所以fill_instance_klass()中只需要填充即可。填充结束后，还会调用 java_lang_Class::create_mirror()创建InstanceKlass在Java层的 Class对象。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> ClassFileParser::fill_instance_klass(InstanceKlass* ik, bool changed_by_loadhook, TRAPS) &#123;</span><br><span class="line">    .....</span><br><span class="line">        ik-&gt;set_class_loader_data(_loader_data);</span><br><span class="line">    ik-&gt;set_nonstatic_field_size(_field_info-&gt;nonstatic_field_size);</span><br><span class="line">    ik-&gt;set_has_nonstatic_fields(_field_info-&gt;has_nonstatic_fields);</span><br><span class="line">    ik-&gt;set_static_oop_field_count(_fac-&gt;count[STATIC_OOP]);</span><br><span class="line">    ik-&gt;set_name(_class_name);</span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">        java_lang_Class::create_mirror(ik,</span><br><span class="line">                                       Handle(THREAD, _loader_data-&gt;class_loader()),</span><br><span class="line">                                       module_handle,</span><br><span class="line">                                       _protection_domain,</span><br><span class="line">                                       CHECK);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>到这儿，Class文件已经完成了华丽的转身，由冷冰冰的二进制文件，变成了内存中充满生命力的InstanceKlass。</p><h3 id="利用SystemDictionary注册生成的Klass"><a href="#利用SystemDictionary注册生成的Klass" class="headerlink" title="利用SystemDictionary注册生成的Klass"></a>利用SystemDictionary注册生成的Klass</h3><p>先看一下注册的代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 允许并行加载，那么前面就不会对ClassLoader加锁</span></span><br><span class="line"><span class="comment">// 所以在同一时刻，可能对同一Class文件加载了多次</span></span><br><span class="line"><span class="comment">// 但是同一Class在同一ClassLoader中必须保持唯一性，所以这里会先利用SystemDictionary查询ClassLoader是否已经加载过相同Class</span></span><br><span class="line"><span class="keyword">if</span> (is_parallelCapable(class_loader)) &#123;</span><br><span class="line">    <span class="comment">// 如果没有查询到，那么就将刚刚加载的InstanceKlass注册到ClassLoader的Dictionary中</span></span><br><span class="line">    InstanceKlass* defined_k = find_or_define_instance_class(h_name, class_loader, k, THREAD);</span><br><span class="line">    <span class="keyword">if</span> (!HAS_PENDING_EXCEPTION &amp;&amp; defined_k != k) &#123;</span><br><span class="line">        <span class="comment">// 如果已经加载过，那么就将当前线程刚刚加载的InstanceKlass加入待回收列表，并将InstanceKlass* k重新指向利用SystemDictionary查询到的InstanceKlass</span></span><br><span class="line">        loader_data-&gt;add_to_deallocate_list(k);</span><br><span class="line">        k = defined_k;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 如果禁止了并行加载，那么直接利用SystemDictionary将 nstanceKlass注册到ClassLoader的Dictionary中即可</span></span><br><span class="line">    define_instance_class(k, THREAD);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>SystemDictionary是用来帮助保存ClassLoader加载过的类信息的。准确点说，SystemDictionary并不是一个容器，真正用来保存类信息的容器是Dictionary，每个ClassLoaderData中都保存着一个私有的Dictionary，而SystemDictionary只是一个拥有很多静态方法的工具类而已。</p><h2 id="双亲委派模型"><a href="#双亲委派模型" class="headerlink" title="双亲委派模型"></a>双亲委派模型</h2><p>我们知道， 双亲委派模型中，ClassLoader在加载类的时候，会先交由它的父ClassLoader加载，只有当父ClassLoader加载失败的情况下，才会尝试自己去加载。这样可以实现部分类的复用，又可以实现部分类的隔离，因为不同ClassLoader加载的类是互相隔离的。</p><p>但是在看完上面的分析后，你一定对 “不同ClassLoader加载的类是互相隔离的” 这句话的理解又上了一个台阶。</p><p>可以总结一下，即每个ClassLoader都有一个Dictionary用来保存它所加载的InstanceKlass信息。并且，每个ClassLoader通过锁，保证了对于同一个Class，它只会注册一份InstanceKlass到自己的 ictionary。</p><p>由于上面这些原因，如果所有的ClassLoader都由自己去加载Class文件，就会导致对于同一个Class文件，存在多份InstanceKlass，所以即使是同一个Class文件，不同InstanceKlasss衍生出来的实例类型也是不一样的。</p><p>文章大篇幅摘抄自：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/60328095" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/60328095</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;何时加载类&quot;&gt;&lt;a href=&quot;#何时加载类&quot; class=&quot;headerlink&quot; title=&quot;何时加载类&quot;&gt;&lt;/a&gt;何时加载类&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;遇到new、getstatic、putstatic等指令时&lt;/li&gt;
&lt;li&gt;对类进行反射调用的时候&lt;/
      
    
    </summary>
    
      <category term="Java乐园" scheme="https://kyrie17.github.io/categories/Java%E4%B9%90%E5%9B%AD/"/>
    
    
      <category term="JVM" scheme="https://kyrie17.github.io/tags/JVM/"/>
    
  </entry>
  
  <entry>
    <title>操作系统</title>
    <link href="https://kyrie17.github.io/2020/11/13/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <id>https://kyrie17.github.io/2020/11/13/操作系统/</id>
    <published>2020-11-13T11:10:48.000Z</published>
    <updated>2020-11-13T11:29:20.699Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在开篇"><a href="#写在开篇" class="headerlink" title="写在开篇"></a>写在开篇</h2><p>随着被字节和腾讯血虐，秋招告一段落了，接下来会好好总结，恢复更新博客。</p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><h3 id="基本特征"><a href="#基本特征" class="headerlink" title="基本特征"></a>基本特征</h3><ol><li><p>并发<br> 并发是指宏观上在一段时间内能同时运行多个程序，操作系统通过引入进程和线程，使得程序能够并发运行<br> 而并行则指同一时刻能运行多个指令，并行需要硬件支持，如多流水线、多核处理器或者分布式计算系统</p></li><li><p>共享</p><ul><li>互斥共享<br>   互斥共享的资源称为临界资源，例如打印机等，在同一时刻只允许一个进程访问，需要用同步机制来实现互斥访问</li><li>同时共享</li></ul></li><li><p>虚拟</p><ul><li><p>时（时间）分复用技术</p><p>多个进程能在同一个处理器上并发执行使用了时分复用技术，让每个进程轮流占用处理器，每次只执行一小个时间片并快速切换</p></li><li><p>空（空间）分复用技术</p><p>虚拟内存</p></li></ul></li><li><p>异步</p><p>异步指进程不是一次性执行完毕，而是走走停停，以不可知的速度向前推进</p></li></ol><h3 id="基本功能"><a href="#基本功能" class="headerlink" title="基本功能"></a>基本功能</h3><ol><li>进程管理</li><li>内存管理</li><li>文件管理</li><li>设备管理</li></ol><h3 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h3><ul><li>内核态</li><li>用户态</li></ul><p>Linux 的系统调用主要有以下这些：</p><table><thead><tr><th>Task</th><th>Commands</th></tr></thead><tbody><tr><td>进程控制</td><td>fork()、exit()、wait()</td></tr><tr><td>进程通信</td><td>pipe()、shmget()、mmap()</td></tr><tr><td>文件操作</td><td>open()、read()、write()</td></tr><tr><td>设备操作</td><td>ioctl()、read()、write()</td></tr><tr><td>信息维护</td><td>getpid()、alarm()、sleep()</td></tr><tr><td>安全</td><td>chmod()、umask()、chown()</td></tr></tbody></table><h3 id="中断"><a href="#中断" class="headerlink" title="中断"></a>中断</h3><ol><li>外中断<br> 由 CPU 执行指令以外的事件引起，如 I/O 完成中断，表示设备输入/输出处理已经完成，处理器能够发送下一个输入/输出请求。此外还有时钟中断、控制台中断等。</li><li>异常<br> 由 CPU 执行指令的内部事件引起，如非法操作码、地址越界、算术溢出等。</li><li>陷入<br> 在用户程序中使用系统调用。</li></ol><h2 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h2><h3 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h3><ul><li>概念<br>  QQ 和浏览器是两个进程，浏览器进程里面有很多线程，例如 HTTP 请求线程、事件响应线程、渲染线程等等，线程的并发执行使得在浏览器中点击一个新链接从而发起 HTTP 请求时，浏览器还可以响应用户的其它事件。</li><li>区别<ol><li>拥有的资源<br> 进程是资源分配的基本单位，但线程不拥有资源</li><li>系统开销<br> 创建或撤销进程时，系统都要为之分配或回收资源，如内存空间、I/O 设备，所付出的开销远大于创建或撤销线程时的开销<br> 在进行进程切换时，涉及当前执行进程 CPU 环境的保存及新调度进程 CPU 环境的设置，而线程切换时只需保存和设置少量寄存器内容，开销很小。</li><li>通信<br>线程间可以通过直接读写同一进程中的数据进行通信，但是进程通信需要借助 IPC</li></ol></li></ul><h3 id="进程状态的切换"><a href="#进程状态的切换" class="headerlink" title="进程状态的切换"></a>进程状态的切换</h3><ul><li>就绪状态（ready）：等待被调度</li><li>运行状态（running）</li><li>阻塞状态（waiting）：等待资源</li></ul><p>有就绪态和运行态可以相互转换，其它的都是单向转换。就绪状态的进程通过调度算法从而获得 CPU 时间，转为运行状态；而运行状态的进程，在分配给它的 CPU 时间片用完之后就会转为就绪状态，等待下一次调度。</p><p>阻塞状态是缺少需要的资源从而由运行状态转换而来，但是该资源不包括 CPU 时间，缺少 CPU 时间会从运行态转换为就绪态。</p><h3 id="进程同步"><a href="#进程同步" class="headerlink" title="进程同步"></a>进程同步</h3><h4 id="临界区"><a href="#临界区" class="headerlink" title="临界区"></a>临界区</h4><p>对临界资源进行访问的那段代码称为临界区。</p><p>为了互斥访问临界资源，每个进程在进入临界区之前，需要先进行检查。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// entry section</span><br><span class="line">// critical section;</span><br><span class="line">// exit section</span><br></pre></td></tr></table></figure></p><h4 id="同步与互斥"><a href="#同步与互斥" class="headerlink" title="同步与互斥"></a>同步与互斥</h4><ul><li>同步：多个进程因为合作产生的直接制约关系，使得进程有一定的先后执行关系</li><li>互斥：多个进程在同一时刻只有一个进程能进入临界区</li></ul><h4 id="信号量"><a href="#信号量" class="headerlink" title="信号量"></a>信号量</h4><ol><li>特点<br>信号量（Semaphore）是一个整型变量，可以对其执行 down 和 up 操作，也就是常见的 P 和 V 操作</li></ol><ul><li>down : 如果信号量大于 0 ，执行 -1 操作；如果信号量等于 0，进程睡眠，等待信号量大于 0</li><li>up ：对信号量执行 +1 操作，唤醒睡眠的进程让其完成 down 操作</li></ul><ol start="2"><li><p>原型<br>如果信号量的取值只能为 0 或者 1，那么就成为了 互斥量（Mutex） ，0 表示临界区已经加锁，1 表示临界区解锁。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> semaphore;</span><br><span class="line">semaphore mutex = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">P1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    down(&amp;mutex);</span><br><span class="line">    <span class="comment">// 临界区</span></span><br><span class="line">    up(&amp;mutex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">P2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    down(&amp;mutex);</span><br><span class="line">    <span class="comment">// 临界区</span></span><br><span class="line">    up(&amp;mutex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>例子</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> N 100</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> semaphore;</span><br><span class="line">semaphore mutex = <span class="number">1</span>;</span><br><span class="line">semaphore empty = N;</span><br><span class="line">semaphore full = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">producer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(TRUE) &#123;</span><br><span class="line">        <span class="keyword">int</span> item = produce_item();</span><br><span class="line">        down(&amp;empty);</span><br><span class="line">        down(&amp;mutex);</span><br><span class="line">        insert_item(item);</span><br><span class="line">        up(&amp;mutex);</span><br><span class="line">        up(&amp;full);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">consumer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(TRUE) &#123;</span><br><span class="line">        down(&amp;full);</span><br><span class="line">        down(&amp;mutex);</span><br><span class="line">        <span class="keyword">int</span> item = remove_item();</span><br><span class="line">        consume_item(item);</span><br><span class="line">        up(&amp;mutex);</span><br><span class="line">        up(&amp;empty);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="管程"><a href="#管程" class="headerlink" title="管程"></a>管程</h4><p>使用信号量机制实现的生产者消费者问题需要客户端代码做很多控制，而管程把控制的代码独立出来，不仅不容易出错，也使得客户端代码调用更容易。</p><h3 id="进程调度"><a href="#进程调度" class="headerlink" title="进程调度"></a>进程调度</h3><p>不同环境的调度算法目标不同，因此需要针对不同环境来讨论调度算法。</p><h4 id="批处理系统"><a href="#批处理系统" class="headerlink" title="批处理系统"></a>批处理系统</h4><p>批处理系统没有太多的用户操作，在该系统中，调度算法目标是保证吞吐量和周转时间（从提交到终止的时间）。</p><ol><li>先来先服务（fcfs）</li><li>短作业优先</li><li>最短剩余时间优先</li></ol><h4 id="交互式系统"><a href="#交互式系统" class="headerlink" title="交互式系统"></a>交互式系统</h4><p>交互式系统有大量的用户交互操作，在该系统中调度算法的目标是快速地进行响应。</p><ol><li>时间片轮转<br> 将所有就绪进程按 FCFS 的原则排成一个队列，每次调度时，把 CPU 时间分配给队首进程，该进程可以执行一个时间片。当时间片用完时，由计时器发出时钟中断，调度程序便停止该进程的执行，并将它送往就绪队列的末尾，同时继续把 CPU 时间分配给队首的进程。</li><li>优先级调度<br> 为每个进程分配一个优先级，按优先级进行调度。为了防止低优先级的进程永远等不到调度，可以随着时间的推移增加等待进程的优先级。</li><li>多级反馈队列<br> 一个进程需要执行 100 个时间片，如果采用时间片轮转调度算法，那么需要交换 100 次。<br>多级队列是为这种需要连续执行多个时间片的进程考虑，它设置了多个队列，每个队列时间片大小都不同，例如 1,2,4,8,..。进程在第一个队列没执行完，就会被移到下一个队列。这种方式下，之前的进程只需要交换 7 次。<br>每个队列优先权也不同，最上面的优先权最高。因此只有上一个队列没有进程在排队，才能调度当前队列上的进程。<br>可以将这种调度算法看成是时间片轮转调度算法和优先级调度算法的结合。<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/caozuoxitong03.png" alt="caozuoxitong03" title>                </div>                <div class="image-caption">caozuoxitong03</div>            </figure></li></ol><h4 id="实时系统"><a href="#实时系统" class="headerlink" title="实时系统"></a>实时系统</h4><p>实时系统要求一个请求在一个确定时间内得到响应。</p><p>分为硬实时和软实时，前者必须满足绝对的截止时间，后者可以容忍一定的超时。</p><h3 id="进程间通信"><a href="#进程间通信" class="headerlink" title="进程间通信"></a>进程间通信</h3><h4 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h4><ol><li>特点</li></ol><ul><li>它是半双工的（即数据只能在一个方向上流动），具有固定的读端和写端。</li><li>只能在父子进程或者兄弟进程中使用</li><li>它可以看成是一种特殊的文件，对于它的读写也可以使用普通的read、write 等函数。但是它不是普通的文件，并不属于其他任何文件系统，并且只存在于内存中。</li></ul><ol start="2"><li>原型<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pipe</span><span class="params">(<span class="keyword">int</span> fd[<span class="number">2</span>])</span></span>;</span><br></pre></td></tr></table></figure></li></ol><p>管道是通过调用 pipe 函数创建的，当一个管道建立时，它会创建两个文件描述符：fd[0] 用于读，fd[1] 用于写。</p><ol start="3"><li>例子<br>单个进程中的管道几乎没有任何用处。所以，通常调用 pipe 的进程接着调用 fork，这样就创建了父进程与子进程之间的 IPC 通道。</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/caozuoxitong.png" alt="caozuoxitong01" title>                </div>                <div class="image-caption">caozuoxitong01</div>            </figure><p>若要数据流从父进程流向子进程，则关闭父进程的读端（fd[0]）与子进程的写端（fd[1]）；反之，则可以使数据流从子进程流向父进程。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd[<span class="number">2</span>];  <span class="comment">// 两个文件描述符</span></span><br><span class="line">    <span class="keyword">pid_t</span> pid;</span><br><span class="line">    <span class="keyword">char</span> buff[<span class="number">20</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(pipe(fd) &lt; <span class="number">0</span>)  <span class="comment">// 创建管道</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Create Pipe Error!\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>((pid = fork()) &lt; <span class="number">0</span>)  <span class="comment">// 创建子进程</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Fork Error!\n"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(pid &gt; <span class="number">0</span>)  <span class="comment">// 父进程</span></span><br><span class="line">    &#123;</span><br><span class="line">        close(fd[<span class="number">0</span>]); <span class="comment">// 关闭读端</span></span><br><span class="line">        write(fd[<span class="number">1</span>], <span class="string">"hello world\n"</span>, <span class="number">12</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        close(fd[<span class="number">1</span>]); <span class="comment">// 关闭写端</span></span><br><span class="line">        read(fd[<span class="number">0</span>], buff, <span class="number">20</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s"</span>, buff);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="FIFO"><a href="#FIFO" class="headerlink" title="FIFO"></a>FIFO</h4><p>也称为命名管道，去除了管道只能在父子进程中使用的限制。</p><ol><li>特点</li></ol><ul><li>FIFO可以在无关的进程之间交换数据，与无名管道不同</li><li>FIFO有路径名与之相关联，它以一种特殊设备文件形式存在于文件系统中</li></ul><ol start="2"><li>原型<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="comment">// 返回值：成功返回0，出错返回-1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mkfifo</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *pathname, <span class="keyword">mode_t</span> mode)</span></span>;</span><br></pre></td></tr></table></figure></li></ol><p>其中的 mode 参数与open函数中的 mode 相同。一旦创建了一个 FIFO，就可以用一般的文件I/O函数操作它。</p><ol start="3"><li>例子<br>FIFO的通信方式类似于在进程中使用文件来传输数据，只不过FIFO类型文件同时具有管道的特性。在数据读出时，FIFO管道中同时清除数据，并且“先进先出”。</li></ol><p>write_fifo.c<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;   // exit</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fcntl.h&gt;    // O_WRONLY</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;time.h&gt;     // time</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd;</span><br><span class="line">    <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">time_t</span> tp;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"I am %d process.\n"</span>, getpid()); <span class="comment">// 说明进程ID</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>((fd = open(<span class="string">"fifo1"</span>, O_WRONLY)) &lt; <span class="number">0</span>) <span class="comment">// 以写打开一个FIFO</span></span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"Open FIFO Failed"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="number">10</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        time(&amp;tp);  <span class="comment">// 取系统当前时间</span></span><br><span class="line">        n=<span class="built_in">sprintf</span>(buf,<span class="string">"Process %d's time is %s"</span>,getpid(),ctime(&amp;tp));</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Send message: %s"</span>, buf); <span class="comment">// 打印</span></span><br><span class="line">        <span class="keyword">if</span>(write(fd, buf, n+<span class="number">1</span>) &lt; <span class="number">0</span>)  <span class="comment">// 写入到FIFO中</span></span><br><span class="line">        &#123;</span><br><span class="line">            perror(<span class="string">"Write FIFO Failed"</span>);</span><br><span class="line">            close(fd);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sleep(<span class="number">1</span>);  <span class="comment">// 休眠1秒</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    close(fd);  <span class="comment">// 关闭FIFO文件</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>read_fifo.c<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd;</span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">char</span> buf[<span class="number">1024</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(mkfifo(<span class="string">"fifo1"</span>, <span class="number">0666</span>) &lt; <span class="number">0</span> &amp;&amp; errno!=EEXIST) <span class="comment">// 创建FIFO管道</span></span><br><span class="line">        perror(<span class="string">"Create FIFO Failed"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>((fd = open(<span class="string">"fifo1"</span>, O_RDONLY)) &lt; <span class="number">0</span>)  <span class="comment">// 以读打开FIFO</span></span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"Open FIFO Failed"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>((len = read(fd, buf, <span class="number">1024</span>)) &gt; <span class="number">0</span>) <span class="comment">// 读取FIFO管道</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Read message: %s"</span>, buf);</span><br><span class="line"></span><br><span class="line">    close(fd);  <span class="comment">// 关闭FIFO文件</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在两个终端里用 gcc 分别编译运行上面两个文件，可以看到输出结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[cheesezh@localhost]$ ./write_fifo</span><br><span class="line">I am 5954 process.</span><br><span class="line">Send message: Process 5954&apos;s time is Mon Apr 20 12:37:28 2015</span><br><span class="line">Send message: Process 5954&apos;s time is Mon Apr 20 12:37:29 2015</span><br><span class="line">Send message: Process 5954&apos;s time is Mon Apr 20 12:37:30 2015</span><br><span class="line">Send message: Process 5954&apos;s time is Mon Apr 20 12:37:31 2015</span><br><span class="line">Send message: Process 5954&apos;s time is Mon Apr 20 12:37:32 2015</span><br><span class="line">Send message: Process 5954&apos;s time is Mon Apr 20 12:37:33 2015</span><br><span class="line">Send message: Process 5954&apos;s time is Mon Apr 20 12:37:34 2015</span><br><span class="line">Send message: Process 5954&apos;s time is Mon Apr 20 12:37:35 2015</span><br><span class="line">Send message: Process 5954&apos;s time is Mon Apr 20 12:37:36 2015</span><br><span class="line">Send message: Process 5954&apos;s time is Mon Apr 20 12:37:37 2015</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[cheesezh@localhost]$ ./read_fifo</span><br><span class="line">Read message: Process 5954&apos;s time is Mon Apr 20 12:37:28 2015</span><br><span class="line">Read message: Process 5954&apos;s time is Mon Apr 20 12:37:29 2015</span><br><span class="line">Read message: Process 5954&apos;s time is Mon Apr 20 12:37:30 2015</span><br><span class="line">Read message: Process 5954&apos;s time is Mon Apr 20 12:37:31 2015</span><br><span class="line">Read message: Process 5954&apos;s time is Mon Apr 20 12:37:32 2015</span><br><span class="line">Read message: Process 5954&apos;s time is Mon Apr 20 12:37:33 2015</span><br><span class="line">Read message: Process 5954&apos;s time is Mon Apr 20 12:37:34 2015</span><br><span class="line">Read message: Process 5954&apos;s time is Mon Apr 20 12:37:35 2015</span><br><span class="line">Read message: Process 5954&apos;s time is Mon Apr 20 12:37:36 2015</span><br><span class="line">Read message: Process 5954&apos;s time is Mon Apr 20 12:37:37 2015</span><br></pre></td></tr></table></figure><p>上述例子可以扩展成 客户进程—服务器进程 通信的实例，write_fifo的作用类似于客户端，可以打开多个客户端向一个服务器发送请求信息，read_fifo类似于服务器，它适时监控着FIFO的读端，当有数据时，读出并进行处理，但是有一个关键的问题是，每一个客户端必须预先知道服务器提供的FIFO接口，下图显示了这种安排：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/caozuoxitong02.png" alt="caozuoxitong02" title>                </div>                <div class="image-caption">caozuoxitong02</div>            </figure></p><h4 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h4><p>消息队列，是消息的链接表，存放在内核中。一个消息队列由一个标识符（即队列ID）来标识。</p><ol><li>特点</li></ol><ul><li>消息队列是面向记录的，其中的消息具有特定的格式以及特定的优先级</li><li>消息队列独立于发送与接收进程，进程终止时，消息队列及其内容并不会被删除</li><li>消息队列可以实现消息的随机查询，消息不一定要以先进先出的次序读取,也可以按消息的类型读取</li></ul><ol start="2"><li>原型<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/msg.h&gt;</span></span></span><br><span class="line"><span class="comment">// 创建或打开消息队列：成功返回队列ID，失败返回-1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">msgget</span><span class="params">(<span class="keyword">key_t</span> key, <span class="keyword">int</span> flag)</span></span>;</span><br><span class="line"><span class="comment">// 添加消息：成功返回0，失败返回-1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">msgsnd</span><span class="params">(<span class="keyword">int</span> msqid, <span class="keyword">const</span> <span class="keyword">void</span> *ptr, <span class="keyword">size_t</span> size, <span class="keyword">int</span> flag)</span></span>;</span><br><span class="line"><span class="comment">// 读取消息：成功返回消息数据的长度，失败返回-1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">msgrcv</span><span class="params">(<span class="keyword">int</span> msqid, <span class="keyword">void</span> *ptr, <span class="keyword">size_t</span> size, <span class="keyword">long</span> type,<span class="keyword">int</span> flag)</span></span>;</span><br><span class="line"><span class="comment">// 控制消息队列：成功返回0，失败返回-1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">msgctl</span><span class="params">(<span class="keyword">int</span> msqid, <span class="keyword">int</span> cmd, struct msqid_ds *buf)</span></span>;</span><br></pre></td></tr></table></figure></li></ol><p>函数msgrcv在读取消息队列时，type参数有下面几种情况：</p><ul><li>type == 0，返回队列中的第一个消息</li><li>type &gt; 0，返回队列中消息类型为 type 的第一个消息</li><li>type &lt; 0，返回队列中消息类型值小于或等于 type 绝对值的消息，如果有多个，则取类型值最小的消息</li></ul><p>可以看出，type值非 0 时用于以非先进先出次序读消息。也可以把 type 看做优先级的权值。</p><ol start="3"><li>例子<br>下面写了一个简单的使用消息队列进行IPC的例子，服务端程序一直在等待特定类型的消息，当收到该类型的消息以后，发送另一种特定类型的消息作为反馈，客户端读取该反馈并打印出来。</li></ol><p>msg_server.c<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/msg.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于创建一个唯一的key</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MSG_FILE <span class="meta-string">"/etc/passwd"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 消息结构</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">msg_form</span> &#123;</span></span><br><span class="line">    <span class="keyword">long</span> mtype;</span><br><span class="line">    <span class="keyword">char</span> mtext[<span class="number">256</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> msqid;</span><br><span class="line">    <span class="keyword">key_t</span> key;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">msg_form</span> <span class="title">msg</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取key值</span></span><br><span class="line">    <span class="keyword">if</span>((key = ftok(MSG_FILE,<span class="string">'z'</span>)) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"ftok error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印key值</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Message Queue - Server key is: %d.\n"</span>, key);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建消息队列</span></span><br><span class="line">    <span class="keyword">if</span> ((msqid = msgget(key, IPC_CREAT|<span class="number">0777</span>)) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"msgget error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印消息队列ID及进程ID</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"My msqid is: %d.\n"</span>, msqid);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"My pid is: %d.\n"</span>, getpid());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环读取消息</span></span><br><span class="line">    <span class="keyword">for</span>(;;)</span><br><span class="line">    &#123;</span><br><span class="line">        msgrcv(msqid, &amp;msg, <span class="number">256</span>, <span class="number">888</span>, <span class="number">0</span>);<span class="comment">// 返回类型为888的第一个消息</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Server: receive msg.mtext is: %s.\n"</span>, msg.mtext);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Server: receive msg.mtype is: %d.\n"</span>, msg.mtype);</span><br><span class="line"></span><br><span class="line">        msg.mtype = <span class="number">999</span>; <span class="comment">// 客户端接收的消息类型</span></span><br><span class="line">        <span class="built_in">sprintf</span>(msg.mtext, <span class="string">"hello, I'm server %d"</span>, getpid());</span><br><span class="line">        msgsnd(msqid, &amp;msg, <span class="keyword">sizeof</span>(msg.mtext), <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>msg_client.c<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/msg.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 用于创建一个唯一的key</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MSG_FILE <span class="meta-string">"/etc/passwd"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 消息结构</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">msg_form</span> &#123;</span></span><br><span class="line">    <span class="keyword">long</span> mtype;</span><br><span class="line">    <span class="keyword">char</span> mtext[<span class="number">256</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> msqid;</span><br><span class="line">    <span class="keyword">key_t</span> key;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">msg_form</span> <span class="title">msg</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取key值</span></span><br><span class="line">    <span class="keyword">if</span> ((key = ftok(MSG_FILE, <span class="string">'z'</span>)) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"ftok error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印key值</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Message Queue - Client key is: %d.\n"</span>, key);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打开消息队列</span></span><br><span class="line">    <span class="keyword">if</span> ((msqid = msgget(key, IPC_CREAT|<span class="number">0777</span>)) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"msgget error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 打印消息队列ID及进程ID</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"My msqid is: %d.\n"</span>, msqid);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"My pid is: %d.\n"</span>, getpid());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加消息，类型为888</span></span><br><span class="line">    msg.mtype = <span class="number">888</span>;</span><br><span class="line">    <span class="built_in">sprintf</span>(msg.mtext, <span class="string">"hello, I'm client %d"</span>, getpid());</span><br><span class="line">    msgsnd(msqid, &amp;msg, <span class="keyword">sizeof</span>(msg.mtext), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读取类型为777的消息</span></span><br><span class="line">    msgrcv(msqid, &amp;msg, <span class="number">256</span>, <span class="number">999</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Client: receive msg.mtext is: %s.\n"</span>, msg.mtext);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Client: receive msg.mtype is: %d.\n"</span>, msg.mtype);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="信号量-1"><a href="#信号量-1" class="headerlink" title="信号量"></a>信号量</h4><p>信号量（semaphore）与已经介绍过的 IPC 结构不同，它是一个计数器。信号量用于实现进程间的互斥与同步，而不是用于存储进程间通信数据。</p><ol><li>特点</li></ol><ul><li>信号量用于进程间同步，若要在进程间传递数据需要结合共享内存</li><li>信号量基于操作系统的 PV 操作，程序对信号量的操作都是原子操作</li><li>每次对信号量的 PV 操作不仅限于对信号量值加 1 或减 1，而且可以加减任意正整数</li><li>支持信号量组</li></ul><ol start="2"><li>原型<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/sem.h&gt;</span></span></span><br><span class="line"><span class="comment">// 创建或获取一个信号量组：若成功返回信号量集ID，失败返回-1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">semget</span><span class="params">(<span class="keyword">key_t</span> key, <span class="keyword">int</span> num_sems, <span class="keyword">int</span> sem_flags)</span></span>;</span><br><span class="line"><span class="comment">// 对信号量组进行操作，改变信号量的值：成功返回0，失败返回-1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">semop</span><span class="params">(<span class="keyword">int</span> semid, struct sembuf semoparray[], <span class="keyword">size_t</span> numops)</span></span>;</span><br><span class="line"><span class="comment">// 控制信号量的相关信息</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">semctl</span><span class="params">(<span class="keyword">int</span> semid, <span class="keyword">int</span> sem_num, <span class="keyword">int</span> cmd, ...)</span></span>;</span><br></pre></td></tr></table></figure></li></ol><p>当semget创建新的信号量集合时，必须指定集合中信号量的个数（即num_sems），通常为1； 如果是引用一个现有的集合，则将num_sems指定为 0 。</p><p>在semop函数中，sembuf结构的定义如下：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">short</span> sem_num; <span class="comment">// 信号量组中对应的序号，0～sem_nums-1</span></span><br><span class="line">    <span class="keyword">short</span> sem_op;  <span class="comment">// 信号量值在一次操作中的改变量</span></span><br><span class="line">    <span class="keyword">short</span> sem_flg; <span class="comment">// IPC_NOWAIT, SEM_UNDO</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其中 sem_op 是一次操作中的信号量的改变量：</p><ul><li>若sem_op &gt; 0，表示进程释放相应的资源数，将 sem_op 的值加到信号量的值上。如果有进程正在休眠等待此信号量，则换行它们</li><li>若sem_op &lt; 0，请求 sem_op 的绝对值的资源</li><li>若sem_op == 0，进程阻塞直到信号量的相应值为0</li></ul><ol start="3"><li>例子<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/sem.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 联合体，用于semctl初始化</span></span><br><span class="line"><span class="keyword">union</span> semun</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span>              val; <span class="comment">/*for SETVAL*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">semid_ds</span> *<span class="title">buf</span>;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span>  *<span class="built_in">array</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化信号量</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">init_sem</span><span class="params">(<span class="keyword">int</span> sem_id, <span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">union</span> semun tmp;</span><br><span class="line">    tmp.val = value;</span><br><span class="line">    <span class="keyword">if</span>(semctl(sem_id, <span class="number">0</span>, SETVAL, tmp) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"Init Semaphore Error"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// P操作:</span></span><br><span class="line"><span class="comment">//    若信号量值为1，获取资源并将信号量值-1</span></span><br><span class="line"><span class="comment">//    若信号量值为0，进程挂起等待</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sem_p</span><span class="params">(<span class="keyword">int</span> sem_id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span> <span class="title">sbuf</span>;</span></span><br><span class="line">    sbuf.sem_num = <span class="number">0</span>; <span class="comment">/*序号*/</span></span><br><span class="line">    sbuf.sem_op = <span class="number">-1</span>; <span class="comment">/*P操作*/</span></span><br><span class="line">    sbuf.sem_flg = SEM_UNDO;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(semop(sem_id, &amp;sbuf, <span class="number">1</span>) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"P operation Error"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// V操作：</span></span><br><span class="line"><span class="comment">//    释放资源并将信号量值+1</span></span><br><span class="line"><span class="comment">//    如果有进程正在挂起等待，则唤醒它们</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sem_v</span><span class="params">(<span class="keyword">int</span> sem_id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span> <span class="title">sbuf</span>;</span></span><br><span class="line">    sbuf.sem_num = <span class="number">0</span>; <span class="comment">/*序号*/</span></span><br><span class="line">    sbuf.sem_op = <span class="number">1</span>;  <span class="comment">/*V操作*/</span></span><br><span class="line">    sbuf.sem_flg = SEM_UNDO;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(semop(sem_id, &amp;sbuf, <span class="number">1</span>) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"V operation Error"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除信号量集</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">del_sem</span><span class="params">(<span class="keyword">int</span> sem_id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">union</span> semun tmp;</span><br><span class="line">    <span class="keyword">if</span>(semctl(sem_id, <span class="number">0</span>, IPC_RMID, tmp) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"Delete Semaphore Error"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sem_id;  <span class="comment">// 信号量集ID</span></span><br><span class="line">    <span class="keyword">key_t</span> key;</span><br><span class="line">    <span class="keyword">pid_t</span> pid;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取key值</span></span><br><span class="line">    <span class="keyword">if</span>((key = ftok(<span class="string">"."</span>, <span class="string">'z'</span>)) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"ftok error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建信号量集，其中只有一个信号量</span></span><br><span class="line">    <span class="keyword">if</span>((sem_id = semget(key, <span class="number">1</span>, IPC_CREAT|<span class="number">0666</span>)) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"semget error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化：初值设为0资源被占用</span></span><br><span class="line">    init_sem(sem_id, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>((pid = fork()) == <span class="number">-1</span>)</span><br><span class="line">        perror(<span class="string">"Fork Error"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(pid == <span class="number">0</span>) <span class="comment">/*子进程*/</span></span><br><span class="line">    &#123;</span><br><span class="line">        sleep(<span class="number">2</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Process child: pid=%d\n"</span>, getpid());</span><br><span class="line">        sem_v(sem_id);  <span class="comment">/*释放资源*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>  <span class="comment">/*父进程*/</span></span><br><span class="line">    &#123;</span><br><span class="line">        sem_p(sem_id);   <span class="comment">/*等待资源*/</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Process father: pid=%d\n"</span>, getpid());</span><br><span class="line">        sem_v(sem_id);   <span class="comment">/*释放资源*/</span></span><br><span class="line">        del_sem(sem_id); <span class="comment">/*删除信号量集*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>上面的例子如果不加信号量，则父进程会先执行完毕。这里加了信号量让父进程等待子进程执行完以后再执行。</p><h4 id="共享存储"><a href="#共享存储" class="headerlink" title="共享存储"></a>共享存储</h4><p>共享内存（Shared Memory），指两个或多个进程共享一个给定的存储区。</p><ol><li>特点</li></ol><ul><li>共享内存是最快的一种 IPC，因为进程是直接对内存进行存取</li><li>因为多个进程可以同时操作，所以需要进行同步</li><li>信号量+共享内存通常结合在一起使用，信号量用来同步对共享内存的访问</li></ul><ol start="2"><li>原型<figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="comment">// 创建或获取一个共享内存：成功返回共享内存ID，失败返回-1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shmget</span><span class="params">(<span class="keyword">key_t</span> key, <span class="keyword">size_t</span> size, <span class="keyword">int</span> flag)</span></span>;</span><br><span class="line"><span class="comment">// 连接共享内存到当前进程的地址空间：成功返回指向共享内存的指针，失败返回-1</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> *<span class="title">shmat</span><span class="params">(<span class="keyword">int</span> shm_id, <span class="keyword">const</span> <span class="keyword">void</span> *addr, <span class="keyword">int</span> flag)</span></span>;</span><br><span class="line"><span class="comment">// 断开与共享内存的连接：成功返回0，失败返回-1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shmdt</span><span class="params">(<span class="keyword">void</span> *addr)</span></span>;</span><br><span class="line"><span class="comment">// 控制共享内存的相关信息：成功返回0，失败返回-1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">shmctl</span><span class="params">(<span class="keyword">int</span> shm_id, <span class="keyword">int</span> cmd, struct shmid_ds *buf)</span></span>;</span><br></pre></td></tr></table></figure></li></ol><p>当用shmget函数创建一段共享内存时，必须指定其 size；而如果引用一个已存在的共享内存，则将 size 指定为0 。</p><p>当一段共享内存被创建以后，它并不能被任何进程访问。必须使用shmat函数连接该共享内存到当前进程的地址空间，连接成功后把共享内存区对象映射到调用进程的地址空间，随后可像本地空间一样访问。</p><p>shmdt函数是用来断开shmat建立的连接的。注意，这并不是从系统中删除该共享内存，只是当前进程不能再访问该共享内存而已。</p><p>shmctl函数可以对共享内存执行多种操作，根据参数 cmd 执行相应的操作。常用的是IPC_RMID（从系统中删除该共享内存）。</p><ol start="3"><li>例子<br>下面这个例子，使用了【共享内存+信号量+消息队列】的组合来实现服务器进程与客户进程间的通信。</li></ol><ul><li>共享内存用来传递数据</li><li>信号量用来同步</li><li>消息队列用来在客户端修改了共享内存后 通知服务器读取</li></ul><p>server.c<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/shm.h&gt;  // shared memory</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/sem.h&gt;  // semaphore</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/msg.h&gt;  // message queue</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;   // memcpy</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 消息队列结构</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">msg_form</span> &#123;</span></span><br><span class="line">    <span class="keyword">long</span> mtype;</span><br><span class="line">    <span class="keyword">char</span> mtext;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 联合体，用于semctl初始化</span></span><br><span class="line"><span class="keyword">union</span> semun</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span>              val; <span class="comment">/*for SETVAL*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">semid_ds</span> *<span class="title">buf</span>;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span>  *<span class="built_in">array</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化信号量</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">init_sem</span><span class="params">(<span class="keyword">int</span> sem_id, <span class="keyword">int</span> value)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">union</span> semun tmp;</span><br><span class="line">    tmp.val = value;</span><br><span class="line">    <span class="keyword">if</span>(semctl(sem_id, <span class="number">0</span>, SETVAL, tmp) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"Init Semaphore Error"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// P操作:</span></span><br><span class="line"><span class="comment">//  若信号量值为1，获取资源并将信号量值-1</span></span><br><span class="line"><span class="comment">//  若信号量值为0，进程挂起等待</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sem_p</span><span class="params">(<span class="keyword">int</span> sem_id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span> <span class="title">sbuf</span>;</span></span><br><span class="line">    sbuf.sem_num = <span class="number">0</span>; <span class="comment">/*序号*/</span></span><br><span class="line">    sbuf.sem_op = <span class="number">-1</span>; <span class="comment">/*P操作*/</span></span><br><span class="line">    sbuf.sem_flg = SEM_UNDO;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(semop(sem_id, &amp;sbuf, <span class="number">1</span>) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"P operation Error"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// V操作：</span></span><br><span class="line"><span class="comment">//  释放资源并将信号量值+1</span></span><br><span class="line"><span class="comment">//  如果有进程正在挂起等待，则唤醒它们</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sem_v</span><span class="params">(<span class="keyword">int</span> sem_id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span> <span class="title">sbuf</span>;</span></span><br><span class="line">    sbuf.sem_num = <span class="number">0</span>; <span class="comment">/*序号*/</span></span><br><span class="line">    sbuf.sem_op = <span class="number">1</span>;  <span class="comment">/*V操作*/</span></span><br><span class="line">    sbuf.sem_flg = SEM_UNDO;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(semop(sem_id, &amp;sbuf, <span class="number">1</span>) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"V operation Error"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除信号量集</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">del_sem</span><span class="params">(<span class="keyword">int</span> sem_id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">union</span> semun tmp;</span><br><span class="line">    <span class="keyword">if</span>(semctl(sem_id, <span class="number">0</span>, IPC_RMID, tmp) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"Delete Semaphore Error"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个信号量集</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">creat_sem</span><span class="params">(<span class="keyword">key_t</span> key)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sem_id;</span><br><span class="line">    <span class="keyword">if</span>((sem_id = semget(key, <span class="number">1</span>, IPC_CREAT|<span class="number">0666</span>)) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"semget error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    init_sem(sem_id, <span class="number">1</span>);  <span class="comment">/*初值设为1资源未占用*/</span></span><br><span class="line">    <span class="keyword">return</span> sem_id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">key_t</span> key;</span><br><span class="line">    <span class="keyword">int</span> shmid, semid, msqid;</span><br><span class="line">    <span class="keyword">char</span> *shm;</span><br><span class="line">    <span class="keyword">char</span> data[] = <span class="string">"this is server"</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">shmid_ds</span> <span class="title">buf1</span>;</span>  <span class="comment">/*用于删除共享内存*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">msqid_ds</span> <span class="title">buf2</span>;</span>  <span class="comment">/*用于删除消息队列*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">msg_form</span> <span class="title">msg</span>;</span>  <span class="comment">/*消息队列用于通知对方更新了共享内存*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取key值</span></span><br><span class="line">    <span class="keyword">if</span>((key = ftok(<span class="string">"."</span>, <span class="string">'z'</span>)) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"ftok error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建共享内存</span></span><br><span class="line">    <span class="keyword">if</span>((shmid = shmget(key, <span class="number">1024</span>, IPC_CREAT|<span class="number">0666</span>)) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"Create Shared Memory Error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接共享内存</span></span><br><span class="line">    shm = (<span class="keyword">char</span>*)shmat(shmid, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>((<span class="keyword">int</span>)shm == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"Attach Shared Memory Error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建消息队列</span></span><br><span class="line">    <span class="keyword">if</span> ((msqid = msgget(key, IPC_CREAT|<span class="number">0777</span>)) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"msgget error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建信号量</span></span><br><span class="line">    semid = creat_sem(key);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 读数据</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        msgrcv(msqid, &amp;msg, <span class="number">1</span>, <span class="number">888</span>, <span class="number">0</span>); <span class="comment">/*读取类型为888的消息*/</span></span><br><span class="line">        <span class="keyword">if</span>(msg.mtext == <span class="string">'q'</span>)  <span class="comment">/*quit - 跳出循环*/</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(msg.mtext == <span class="string">'r'</span>)  <span class="comment">/*read - 读共享内存*/</span></span><br><span class="line">        &#123;</span><br><span class="line">            sem_p(semid);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,shm);</span><br><span class="line">            sem_v(semid);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 断开连接</span></span><br><span class="line">    shmdt(shm);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*删除共享内存、消息队列、信号量*/</span></span><br><span class="line">    shmctl(shmid, IPC_RMID, &amp;buf1);</span><br><span class="line">    msgctl(msqid, IPC_RMID, &amp;buf2);</span><br><span class="line">    del_sem(semid);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>client.c<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/shm.h&gt;  // shared memory</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/sem.h&gt;  // semaphore</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;sys/msg.h&gt;  // message queue</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;   // memcpy</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 消息队列结构</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">msg_form</span> &#123;</span></span><br><span class="line">    <span class="keyword">long</span> mtype;</span><br><span class="line">    <span class="keyword">char</span> mtext;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 联合体，用于semctl初始化</span></span><br><span class="line"><span class="keyword">union</span> semun</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span>              val; <span class="comment">/*for SETVAL*/</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">semid_ds</span> *<span class="title">buf</span>;</span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">short</span>  *<span class="built_in">array</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// P操作:</span></span><br><span class="line"><span class="comment">//  若信号量值为1，获取资源并将信号量值-1</span></span><br><span class="line"><span class="comment">//  若信号量值为0，进程挂起等待</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sem_p</span><span class="params">(<span class="keyword">int</span> sem_id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span> <span class="title">sbuf</span>;</span></span><br><span class="line">    sbuf.sem_num = <span class="number">0</span>; <span class="comment">/*序号*/</span></span><br><span class="line">    sbuf.sem_op = <span class="number">-1</span>; <span class="comment">/*P操作*/</span></span><br><span class="line">    sbuf.sem_flg = SEM_UNDO;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(semop(sem_id, &amp;sbuf, <span class="number">1</span>) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"P operation Error"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// V操作：</span></span><br><span class="line"><span class="comment">//  释放资源并将信号量值+1</span></span><br><span class="line"><span class="comment">//  如果有进程正在挂起等待，则唤醒它们</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sem_v</span><span class="params">(<span class="keyword">int</span> sem_id)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">sembuf</span> <span class="title">sbuf</span>;</span></span><br><span class="line">    sbuf.sem_num = <span class="number">0</span>; <span class="comment">/*序号*/</span></span><br><span class="line">    sbuf.sem_op = <span class="number">1</span>;  <span class="comment">/*V操作*/</span></span><br><span class="line">    sbuf.sem_flg = SEM_UNDO;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(semop(sem_id, &amp;sbuf, <span class="number">1</span>) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"V operation Error"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">key_t</span> key;</span><br><span class="line">    <span class="keyword">int</span> shmid, semid, msqid;</span><br><span class="line">    <span class="keyword">char</span> *shm;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">msg_form</span> <span class="title">msg</span>;</span></span><br><span class="line">    <span class="keyword">int</span> flag = <span class="number">1</span>; <span class="comment">/*while循环条件*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取key值</span></span><br><span class="line">    <span class="keyword">if</span>((key = ftok(<span class="string">"."</span>, <span class="string">'z'</span>)) &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"ftok error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取共享内存</span></span><br><span class="line">    <span class="keyword">if</span>((shmid = shmget(key, <span class="number">1024</span>, <span class="number">0</span>)) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"shmget error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 连接共享内存</span></span><br><span class="line">    shm = (<span class="keyword">char</span>*)shmat(shmid, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span>((<span class="keyword">int</span>)shm == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"Attach Shared Memory Error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建消息队列</span></span><br><span class="line">    <span class="keyword">if</span> ((msqid = msgget(key, <span class="number">0</span>)) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"msgget error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取信号量</span></span><br><span class="line">    <span class="keyword">if</span>((semid = semget(key, <span class="number">0</span>, <span class="number">0</span>)) == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        perror(<span class="string">"semget error"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 写数据</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"***************************************\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"*                 IPC                 *\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"*    Input r to send data to server.  *\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"*    Input q to quit.                 *\n"</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"***************************************\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(flag)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">char</span> c;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Please input command: "</span>);</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%c"</span>, &amp;c);</span><br><span class="line">        <span class="keyword">switch</span>(c)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'r'</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Data to send: "</span>);</span><br><span class="line">                sem_p(semid);  <span class="comment">/*访问资源*/</span></span><br><span class="line">                <span class="built_in">scanf</span>(<span class="string">"%s"</span>, shm);</span><br><span class="line">                sem_v(semid);  <span class="comment">/*释放资源*/</span></span><br><span class="line">                <span class="comment">/*清空标准输入缓冲区*/</span></span><br><span class="line">                <span class="keyword">while</span>((c=getchar())!=<span class="string">'\n'</span> &amp;&amp; c!=EOF);</span><br><span class="line">                msg.mtype = <span class="number">888</span>;</span><br><span class="line">                msg.mtext = <span class="string">'r'</span>;  <span class="comment">/*发送消息通知服务器读数据*/</span></span><br><span class="line">                msgsnd(msqid, &amp;msg, <span class="keyword">sizeof</span>(msg.mtext), <span class="number">0</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'q'</span>:</span><br><span class="line">                msg.mtype = <span class="number">888</span>;</span><br><span class="line">                msg.mtext = <span class="string">'q'</span>;</span><br><span class="line">                msgsnd(msqid, &amp;msg, <span class="keyword">sizeof</span>(msg.mtext), <span class="number">0</span>);</span><br><span class="line">                flag = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"Wrong input!\n"</span>);</span><br><span class="line">                <span class="comment">/*清空标准输入缓冲区*/</span></span><br><span class="line">                <span class="keyword">while</span>((c=getchar())!=<span class="string">'\n'</span> &amp;&amp; c!=EOF);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 断开连接</span></span><br><span class="line">    shmdt(shm);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><ol><li>管道：速度慢，容量有限，只有父子进程能通讯</li><li>FIFO：任何进程间都能通讯，但速度慢</li><li>消息队列：容量受到系统限制，且要注意第一次读的时候，要考虑上一次没有读完数据的问题</li><li>信号量：不能传递复杂消息，只能用来同步</li><li>共享内存区：能够很容易控制容量，速度快，但要保持同步，比如一个进程在写的时候，另一个进程要注意读写的问题</li></ol><h2 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h2><h3 id="必要条件"><a href="#必要条件" class="headerlink" title="必要条件"></a>必要条件</h3><ul><li>互斥：每个资源要么已经分配给了一个进程，要么就是可用的</li><li>占有和等待：已经得到了某个资源的进程可以再请求新的资源</li><li>不可抢占：已经分配给一个进程的资源不能强制性地被抢占，它只能被占有它的进程显式地释放</li><li>环路等待：有两个或者两个以上的进程组成一条环路，该环路中的每个进程都在等待下一个进程所占有的资源</li></ul><h3 id="处理方法"><a href="#处理方法" class="headerlink" title="处理方法"></a>处理方法</h3><h4 id="鸵鸟策略"><a href="#鸵鸟策略" class="headerlink" title="鸵鸟策略"></a>鸵鸟策略</h4><p>把头埋在沙子里，假装根本没发生问题，因为解决死锁问题的代价很高，因此鸵鸟策略这种不采取任务措施的方案会获得更高的性能，当发生死锁时不会对用户造成多大影响，或发生死锁的概率很低，可以采用鸵鸟策略，大多数操作系统，包括 Unix，Linux 和 Windows，处理死锁问题的办法仅仅是忽略它。</p><h4 id="死锁检测与死锁恢复"><a href="#死锁检测与死锁恢复" class="headerlink" title="死锁检测与死锁恢复"></a>死锁检测与死锁恢复</h4><p>不试图阻止死锁，而是当检测到死锁发生时，采取措施进行恢复。</p><ol><li>死锁检测，类似银行家算法</li><li>死锁恢复</li></ol><h4 id="死锁预防"><a href="#死锁预防" class="headerlink" title="死锁预防"></a>死锁预防</h4><p>在程序运行之前预防发生死锁，即破坏死锁的四个比要条件。</p><h4 id="死锁避免"><a href="#死锁避免" class="headerlink" title="死锁避免"></a>死锁避免</h4><p>在程序运行时避免发生死锁。</p><p>检查状态是否是安全的：如果没有死锁发生，并且即使所有进程突然请求对资源的最大需求，也仍然存在某种调度次序能够使得每一个进程运行完毕，则称该状态是安全的。</p><p>安全状态的检测：银行家算法。</p><h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><h3 id="虚拟内存"><a href="#虚拟内存" class="headerlink" title="虚拟内存"></a>虚拟内存</h3><p>虚拟内存的目的是为了让物理内存扩充成更大的逻辑内存，从而让程序获得更多的可用内存。</p><p>为了更好的管理内存，操作系统将内存抽象成地址空间。每个程序拥有自己的地址空间，这个地址空间被分割成多个块，每一块称为一页。这些页被映射到物理内存，但不需要映射到连续的物理内存，也不需要所有页都必须在物理内存中。当程序引用到不在物理内存中的页时，由硬件执行必要的映射，将缺失的部分装入物理内存并重新执行失败的指令。</p><p>从上面的描述中可以看出，虚拟内存允许程序不用将地址空间中的每一页都映射到物理内存，也就是说一个程序不需要全部调入内存就可以运行，这使得有限的内存运行大程序成为可能。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/caozuoxitong04.png" alt="caozuoxitong04" title>                </div>                <div class="image-caption">caozuoxitong04</div>            </figure></p><h3 id="分页系统地址映射"><a href="#分页系统地址映射" class="headerlink" title="分页系统地址映射"></a>分页系统地址映射</h3><p>内存管理单元（MMU）管理着地址空间和物理内存的转换，其中的页表（Page table）存储着页（程序地址空间）和页框（物理内存空间）的映射表。</p><p>一个虚拟地址分成两个部分，一部分存储页面号，一部分存储偏移量。</p><p>下图的页表存放着 16 个页，这 16 个页需要用 4 个比特位来进行索引定位。例如对于虚拟地址（0010 000000000100），前 4 位是存储页面号 2，读取表项内容为（110 1），页表项最后一位表示是否存在于内存中，1 表示存在。后 12 位存储偏移量。这个页对应的页框的地址为 （110 000000000100）。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/caozuoxitong05.png" alt="caozuoxitong05" title>                </div>                <div class="image-caption">caozuoxitong05</div>            </figure></p><h3 id="页面置换算法"><a href="#页面置换算法" class="headerlink" title="页面置换算法"></a>页面置换算法</h3><p>在程序运行过程中，如果要访问的页面不在内存中，就发生缺页中断从而将该页调入内存中。此时如果内存已无空闲空间，系统必须从内存中调出一个页面到磁盘对换区中来腾出空间。</p><p>页面置换算法和缓存淘汰策略类似，可以将内存看成磁盘的缓存。在缓存系统中，缓存的大小有限，当有新的缓存到达时，需要淘汰一部分已经存在的缓存，这样才有空间存放新的缓存数据。</p><p>页面置换算法的主要目标是使页面置换频率最低（也可以说缺页率最低）。</p><h4 id="最佳"><a href="#最佳" class="headerlink" title="最佳"></a>最佳</h4><p>所选择的被换出的页面将是最长时间内不再被访问，通常可以保证获得最低的缺页率。是一种理论上的算法，因为无法知道一个页面多长时间不再被访问。</p><h4 id="最近最久未使用（LRU）"><a href="#最近最久未使用（LRU）" class="headerlink" title="最近最久未使用（LRU）"></a>最近最久未使用（LRU）</h4><p>虽然无法知道将来要使用的页面情况，但是可以知道过去使用页面的情况。LRU 将最近最久未使用的页面换出。</p><p>为了实现 LRU，需要在内存中维护一个所有页面的链表。当一个页面被访问时，将这个页面移到链表表头。这样就能保证链表表尾的页面是最近最久未访问的。</p><p>因为每次访问都需要更新链表，因此这种方式实现的 LRU 代价很高。</p><p>例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">4，7，0，7，1，0，1，2，1，2，6</span><br></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/caozuoxitong06.png" alt="caozuoxitong06" title>                </div>                <div class="image-caption">caozuoxitong06</div>            </figure><h4 id="先进先出-FIFO"><a href="#先进先出-FIFO" class="headerlink" title="先进先出(FIFO)"></a>先进先出(FIFO)</h4><p>选择换出的页面是最先进入的页面，导致缺页率升高。</p><p>引用：</p><ul><li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%20-%20%E7%9B%AE%E5%BD%95.md" target="_blank" rel="noopener">https://github.com/CyC2018/CS-Notes/blob/master/notes/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%20-%20%E7%9B%AE%E5%BD%95.md</a></li><li><a href="https://www.cnblogs.com/zgq0/p/8780893.html" target="_blank" rel="noopener">https://www.cnblogs.com/zgq0/p/8780893.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在开篇&quot;&gt;&lt;a href=&quot;#写在开篇&quot; class=&quot;headerlink&quot; title=&quot;写在开篇&quot;&gt;&lt;/a&gt;写在开篇&lt;/h2&gt;&lt;p&gt;随着被字节和腾讯血虐，秋招告一段落了，接下来会好好总结，恢复更新博客。&lt;/p&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
      <category term="操作系统" scheme="https://kyrie17.github.io/categories/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
    
      <category term="操作系统" scheme="https://kyrie17.github.io/tags/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>epoll的实现原理</title>
    <link href="https://kyrie17.github.io/2020/04/19/epoll%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <id>https://kyrie17.github.io/2020/04/19/epoll的实现原理/</id>
    <published>2020-04-19T07:45:06.000Z</published>
    <updated>2020-04-19T07:53:37.885Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在开篇"><a href="#写在开篇" class="headerlink" title="写在开篇"></a>写在开篇</h2><p>浅析epoll的实现原理。</p><h2 id="recv"><a href="#recv" class="headerlink" title="recv"></a>recv</h2><p>先看下只监听一个socket的程序流程：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建socket</span></span><br><span class="line"><span class="keyword">int</span> s = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);   </span><br><span class="line"><span class="comment">//绑定</span></span><br><span class="line">bind(s, ...)</span><br><span class="line"><span class="comment">//监听</span></span><br><span class="line">listen(s, ...)</span><br><span class="line"><span class="comment">//接受客户端连接</span></span><br><span class="line"><span class="keyword">int</span> c = accept(s, ...)</span><br><span class="line"><span class="comment">//接收客户端数据</span></span><br><span class="line">recv(c, ...);</span><br><span class="line"><span class="comment">//将数据打印出来</span></span><br><span class="line"><span class="built_in">printf</span>(...)</span><br></pre></td></tr></table></figure></p><p>这是一段最基础的网络编程代码，先新建socket对象，依次调用bind、listen与accept，最后调用recv接收数据。recv是个阻塞方法，当程序运行到recv时，它会一直等待，直到接收到数据才往下执行。</p><p>下图的计算机中运行着A、B与C三个进程，其中进程A执行着上述基础网络程序，一开始，这3个进程都被操作系统的工作队列所引用，处于运行状态，会分时执行。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/epoll01.jpg" alt="epoll01" title>                </div>                <div class="image-caption">epoll01</div>            </figure></p><h3 id="创建socket"><a href="#创建socket" class="headerlink" title="创建socket"></a>创建socket</h3><p>当进程A执行到创建socket的语句时，操作系统会创建一个由文件系统管理的socket对象。这个socket对象包含了发送缓冲区、接收缓冲区与等待队列等成员。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/epoll02.jpg" alt="epoll02" title>                </div>                <div class="image-caption">epoll02</div>            </figure></p><h3 id="阻塞进程"><a href="#阻塞进程" class="headerlink" title="阻塞进程"></a>阻塞进程</h3><p>当程序执行到recv时，操作系统会将进程A从工作队列移动到该socket的等待队列中。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/epoll03.jpg" alt="epoll03" title>                </div>                <div class="image-caption">epoll03</div>            </figure></p><h3 id="唤醒进程"><a href="#唤醒进程" class="headerlink" title="唤醒进程"></a>唤醒进程</h3><p>当socket接收到数据后，操作系统将该socket等待队列上的进程重新放回到工作队列。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/epoll04.jpg" alt="epoll04" title>                </div>                <div class="image-caption">epoll04</div>            </figure></p><p>那我们接下来要讨论的问题是如何同时监视多个socket的数据？</p><h2 id="select"><a href="#select" class="headerlink" title="select"></a>select</h2><p>下面是selec的用法：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> s = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);  </span><br><span class="line">bind(s, ...);</span><br><span class="line">listen(s, ...);</span><br><span class="line"><span class="keyword">int</span> fds[] =  存放需要监听的socket;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">int</span> n = select(..., fds, ...)</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i &lt; fds.count; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(FD_ISSET(fds[i], ...))&#123;</span><br><span class="line">            <span class="comment">//fds[i]的数据处理</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>先准备一个数组fds，让fds存放着所有需要监视的socket。然后调用select，如果fds中的所有socket都没有数据，select会阻塞，直到有一个socket接收到数据，select返回，唤醒进程。</p><p>select的实现思路很直接，假如程序同时监视如下图的sock1、sock2和sock3三个socket，那么在调用select之后，操作系统把进程A分别加入这三个socket的等待队列中。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/epoll05.jpg" alt="epoll05" title>                </div>                <div class="image-caption">epoll05</div>            </figure></p><p>假如sock2接收到了数据，中断程序唤起进程A。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/epoll06.jpg" alt="epoll06" title>                </div>                <div class="image-caption">epoll06</div>            </figure></p><p>所谓唤起进程，就是将进程从所有的等待队列中移除，加入到工作队列里面。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/epoll07.jpg" alt="epoll07" title>                </div>                <div class="image-caption">epoll07</div>            </figure></p><p>将进程A从所有等待队列中移除，再加入到工作队列里面。</p><p>经由这些步骤，当进程A被唤醒后，它知道至少有一个socket接收了数据。程序只需遍历一遍socket列表，就可以得到就绪的socket。</p><p>这种简单方式行之有效，在几乎所有操作系统都有对应的实现。</p><p>但是简单的方法往往有缺点，主要是：</p><ul><li>每次调用select都需要将进程加入到所有监视socket的等待队列，每次唤醒都需要从每个队列中移除。这里涉及了两次遍历，而且每次都要将整个fds列表传递给内核，有一定的开销。正是因为遍历操作开销大，出于效率的考量，才会规定select的最大监视数量，默认只能监视1024个socket。</li><li>进程被唤醒后，程序并不知道哪些socket收到数据，还需要遍历一次。</li></ul><h2 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h2><p>先看下epoll的程序流程：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> s = socket(AF_INET, SOCK_STREAM, <span class="number">0</span>);   </span><br><span class="line">bind(s, ...)</span><br><span class="line">listen(s, ...)</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> epfd = epoll_create(...);</span><br><span class="line">epoll_ctl(epfd, ...); <span class="comment">//将所有需要监听的socket添加到epfd中</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">int</span> n = epoll_wait(...)</span><br><span class="line">    <span class="keyword">for</span>(接收到数据的socket)&#123;</span><br><span class="line">        <span class="comment">//处理</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到epoll将select中的“维护等待队列”和“阻塞进程”这两个操作分开，先用epoll_ctl维护等待队列，再调用epoll_wait阻塞进程。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/epoll08.jpg" alt="epoll08" title>                </div>                <div class="image-caption">epoll08</div>            </figure><br>每次调用select都需要这两步操作，然而大多数应用场景中，需要监视的socket相对固定，并不需要每次都修改。epoll将这两个操作分开，先用epoll_ctl维护等待队列，再调用epoll_wait阻塞进程。显而易见地，效率就能得到提升。</p><p>我们接着讲epoll的工作流程：</p><h3 id="创建-epoll-对象"><a href="#创建-epoll-对象" class="headerlink" title="创建 epoll 对象"></a>创建 epoll 对象</h3><p>当某个进程调用epoll_create方法时，内核会创建一个eventpoll对象。而eventpoll维护着<strong>一个等待队列和一个就绪列表（rdlist）。</strong><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/epoll09.jpg" alt="epoll09" title>                </div>                <div class="image-caption">epoll09</div>            </figure></p><h3 id="维护监视列表"><a href="#维护监视列表" class="headerlink" title="维护监视列表"></a>维护监视列表</h3><p>创建epoll对象后，可以用epoll_ctl添加或删除所要监听的socket。</p><p>如果通过epoll_ctl添加sock1、sock2和sock3的监视，内核会将eventpoll添加到这三个socket的等待队列中。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/epoll10.jpg" alt="epoll10" title>                </div>                <div class="image-caption">epoll10</div>            </figure></p><h3 id="阻塞进程-1"><a href="#阻塞进程-1" class="headerlink" title="阻塞进程"></a>阻塞进程</h3><p>假设计算机中正在运行进程A和进程B，在某时刻进程A运行到了epoll_wait语句。如下图所示，内核会将进程A放入eventpoll的等待队列中，阻塞进程。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/epoll11.jpg" alt="epoll11" title>                </div>                <div class="image-caption">epoll11</div>            </figure></p><h3 id="唤醒进程-1"><a href="#唤醒进程-1" class="headerlink" title="唤醒进程"></a>唤醒进程</h3><p>当socket收到数据后，中断程序会操作eventpoll对象，而不是直接操作进程。</p><p>当socket接收到数据，中断程序一方面修改就绪列表，另一方面唤醒eventpoll等待队列中的进程，进程A再次进入运行状态（如下图）。也因为rdlist的存在，进程A可以知道哪些socket发生了变化。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/epoll12.jpg" alt="epoll12" title>                </div>                <div class="image-caption">epoll12</div>            </figure></p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>epoll在select和poll的基础上引入了eventpoll作为中间层，使用了先进的数据结构，是一种高效的多路复用技术。这里也以表格形式简单对比一下select、poll与epoll结束此文。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/epoll13.jpg" alt="epoll13" title>                </div>                <div class="image-caption">epoll13</div>            </figure></p><p>整理自：<a href="https://my.oschina.net/editorial-story/blog/3052308#comments" target="_blank" rel="noopener">https://my.oschina.net/editorial-story/blog/3052308#comments</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在开篇&quot;&gt;&lt;a href=&quot;#写在开篇&quot; class=&quot;headerlink&quot; title=&quot;写在开篇&quot;&gt;&lt;/a&gt;写在开篇&lt;/h2&gt;&lt;p&gt;浅析epoll的实现原理。&lt;/p&gt;
&lt;h2 id=&quot;recv&quot;&gt;&lt;a href=&quot;#recv&quot; class=&quot;headerl
      
    
    </summary>
    
      <category term="I/O" scheme="https://kyrie17.github.io/categories/I-O/"/>
    
    
  </entry>
  
  <entry>
    <title>Socket</title>
    <link href="https://kyrie17.github.io/2020/04/17/Socket/"/>
    <id>https://kyrie17.github.io/2020/04/17/Socket/</id>
    <published>2020-04-17T13:54:18.000Z</published>
    <updated>2020-04-17T13:55:18.756Z</updated>
    
    <content type="html"><![CDATA[<h2 id="I-O模型"><a href="#I-O模型" class="headerlink" title="I/O模型"></a>I/O模型</h2><p>一个输入操作通常包括两个阶段：</p><ul><li>等待数据准备好</li><li>从内核（kernel）向进程复制数据</li></ul><p>对于一个套接字上的输入操作，第一步通常涉及等待数据从网络中到达。当所等待数据到达时，它被复制到内核中的某个缓冲区。第二步就是把数据从内核缓冲区复制到应用进程缓冲区。</p><p>正是因为这两个阶段，linux系统产生了下面五种网络模式的方案。</p><ul><li>阻塞式I/O</li><li>非阻塞式I/O</li><li>I/O复用（select和poll）</li><li>信号驱动式I/O（SIGIO）</li><li>异步I/O（AIO）</li></ul><h3 id="阻塞式I-O（blocking-IO）"><a href="#阻塞式I-O（blocking-IO）" class="headerlink" title="阻塞式I/O（blocking IO）"></a>阻塞式I/O（blocking IO）</h3><p>应用进程被阻塞，直到数据从内核缓冲区复制到应用进程缓冲区中才返回，一个典型的读操作流程大概是这样：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/Socket01.png" alt="Socket01" title>                </div>                <div class="image-caption">Socket01</div>            </figure></p><p>可以看到blocking IO的特点就是在IO执行的两个阶段都被block了。</p><h3 id="非阻塞I-O（nonblocking-IO）"><a href="#非阻塞I-O（nonblocking-IO）" class="headerlink" title="非阻塞I/O（nonblocking IO）"></a>非阻塞I/O（nonblocking IO）</h3><p>应用进程执行系统调用之后，内核返回一个错误码。应用进程可以继续执行，但是需要不断的执行系统调用来获知I/O是否完成，这种方式称为轮询（polling）。</p><p>由于CPU要处理更多的系统调用，因此这种模型的CPU利用率比较低。</p><p>当对一个nonblocking socket执行读操作时，流程是这个样子：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/Socket02.png" alt="Socket02" title>                </div>                <div class="image-caption">Socket02</div>            </figure><br>当用户进程发出read操作时，如果kernel中的数据还没有准备好，那么它并不会block用户进程，而是立刻返回一个error。从用户进程角度讲，它发起一个read操作后，并不需要等待，而是马上就得到了一个结果。用户进程判断结果是一个error时，它就知道数据还没有准备好，于是它可以再次发送read操作。一旦kernel中的数据准备好了，并且又再次收到了用户进程的system call，那么它马上就将数据拷贝到了用户内存，然后返回。</p><p>所以，nonblocking IO的特点是用户进程需要不断的主动询问kernel数据好了没有。</p><h3 id="I-O多路复用（IO-multiplexing）"><a href="#I-O多路复用（IO-multiplexing）" class="headerlink" title="I/O多路复用（IO multiplexing）"></a>I/O多路复用（IO multiplexing）</h3><p>使用select或者poll等待数据，并且可以等待<strong>多个套接字</strong>中的任何一个变为可读。这一过程会被阻塞，当某一个套接字可读时返回，之后再使用recvfrom把数据从内核复制到进程中。</p><p>它可以让单个进程具有处理多个 I/O 事件的能力。又被称为Event Driven I/O，即事件驱动I/O。</p><p>如果一个Web服务器没有I/O复用，那么每一个Socket连接都需要创建一个线程去处理。如果同时有几万个连接，那么就需要创建相同数量的线程。相比于多进程和多线程技术，I/O复用不需要进程线程创建和切换的开销，系统开销更小。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/Socket03.png" alt="Socket03" title>                </div>                <div class="image-caption">Socket03</div>            </figure><p>当用户进程调用了select，那么整个进程会被block，而同时，kernel会“监视”<strong>所有select负责的socket</strong>，当任何一个socket中的数据准备好了，select就会返回。这个时候用户进程再调用read操作，将数据从kernel拷贝到用户进程。</p><p>这个图和blocking IO的图其实并没有太大的不同，事实上，还更差一些。因为这里需要使用两个system call(select和recvfrom)，而blocking IO只调用了一个system call(recvfrom)。但是，用select的优势在于它可以同时处理多个connection。</p><h3 id="信号驱动I-O（signal-driven-IO）"><a href="#信号驱动I-O（signal-driven-IO）" class="headerlink" title="信号驱动I/O（signal driven IO）"></a>信号驱动I/O（signal driven IO）</h3><p>应用进程使用sigaction系统调用，内核立即返回，应用进程可以继续执行，也就是说<strong>等待数据阶段应用进程是非阻塞的</strong>。内核在数据到达时向应用进程发送SIGIO信号，应用进程收到之后在信号处理程序中调用recvfrom将数据从内核复制到应用进程中。</p><p>相比于非阻塞式I/O的轮询方式，信号驱动I/O的CPU利用率更高。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/Socket04.png" alt="Socket04" title>                </div>                <div class="image-caption">Socket04</div>            </figure></p><h3 id="异步I-O（asynchronous-IO）"><a href="#异步I-O（asynchronous-IO）" class="headerlink" title="异步I/O（asynchronous IO）"></a>异步I/O（asynchronous IO）</h3><p>应用进程执行aio_read系统调用会立即返回，应用进程可以继续执行，不会被阻塞，内核会在所有操作完成之后向应用进程发送信号。</p><p>异步I/O与信号驱动I/O的区别在于，异步I/O的信号是通知应用进程I/O完成，而信号驱动I/O的信号是通知应用进程可以开始I/O。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/Socket05.png" alt="Socket05" title>                </div>                <div class="image-caption">Socket05</div>            </figure><br>用户进程发起read操作之后，立刻就可以开始去做其它的事。而另一方面，从kernel的角度，当它受到一个asynchronous read之后，首先它会立刻返回，所以不会对用户进程产生任何block。然后，kernel会等待数据准备完成，然后将数据拷贝到用户内存，当这一切都完成之后，kernel会给用户进程发送一个signal，告诉它read操作完成了。</p><h3 id="五大I-O模型比较"><a href="#五大I-O模型比较" class="headerlink" title="五大I/O模型比较"></a>五大I/O模型比较</h3><ul><li>同步I/O：将数据从内核缓冲区复制到应用进程缓冲区的阶段（第二阶段），应用进程会阻塞。</li><li>异步I/O：第二阶段应用进程不会阻塞。</li></ul><p>同步I/O包括阻塞式I/O、非阻塞式I/O、I/O复用和信号驱动I/O，它们的主要区别在第一个阶段。</p><p>非阻塞式I/O、信号驱动I/O和异步I/O在第一阶段不会阻塞。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/Socket06.png" alt="Socket06" title>                </div>                <div class="image-caption">Socket06</div>            </figure></p><h2 id="I-O复用"><a href="#I-O复用" class="headerlink" title="I/O复用"></a>I/O复用</h2><p>select/poll/epoll都是I/O多路复用的具体实现，select出现的最早，之后是poll，再是epoll。</p><h3 id="select"><a href="#select" class="headerlink" title="select"></a>select</h3><p>select允许应用程序监视一组文件描述符，等待一个或者多个描述符成为就绪状态，从而完成I/O操作。</p><ul><li>fd_set使用数组实现，数组大小使用FD_SETSIZE定义，所以只能监听少于 FD_SETSIZE数量的描述符。有三种类型的描述符类型：readset、writeset、exceptset，分别对应读、写、异常条件的描述符集合。</li><li>timeout为超时参数，调用select会一直阻塞直到有描述符的事件到达或者等待的时间超过timeout。</li><li>成功调用返回结果大于0，出错返回结果为-1，超时返回结果为0。</li></ul><h3 id="poll"><a href="#poll" class="headerlink" title="poll"></a>poll</h3><p>poll的功能与select类似，也是等待一组描述符中的一个成为就绪状态。</p><p>select和poll的功能基本相同，不过在一些实现细节上有所不同。</p><ul><li>select会修改描述符，而poll不会；</li><li>select的描述符类型使用数组实现，FD_SETSIZE大小默认为1024，因此默认只能监听少于1024个描述符。如果要监听更多描述符的话，需要修改FD_SETSIZE之后重新编译；而poll没有描述符数量的限制；</li><li>poll提供了更多的事件类型，并且对描述符的重复利用上比 select 高。</li><li>如果一个线程对某个描述符调用了select或者poll，另一个线程关闭了该描述符，会导致调用结果不确定。</li></ul><p>select和poll速度都比较慢，每次调用都需要将全部描述符从应用进程缓冲区复制到内核缓冲区。</p><p>几乎所有的系统都支持select，但是只有比较新的系统支持poll。</p><h3 id="epoll"><a href="#epoll" class="headerlink" title="epoll"></a>epoll</h3><p>epoll_ctl()用于向内核注册新的描述符或者是改变某个文件描述符的状态。已注册的描述符在内核中会被维护在一棵红黑树上，<strong>通过回调函数内核会将I/O准备好的描述符加入到一个链表中管理</strong>，进程调用epoll_wait()便可以得到事件完成的描述符。</p><p>从上面的描述可以看出，epoll只需要将描述符从进程缓冲区向内核缓冲区拷贝一次，并且进程不需要通过轮询来获得事件完成的描述符。</p><p>epoll仅适用于Linux OS。</p><p>epoll比select和poll更加灵活而且没有描述符数量限制。</p><p>epoll对多线程编程更有友好，一个线程调用了epoll_wait()另一个线程关闭了同一个描述符也不会产生像select和poll的不确定情况。</p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>很容易产生一种错觉认为只要用epoll就可以了，select和poll都已经过时了，其实它们都有各自的使用场景。</p><ol><li>select应用场景</li></ol><p>select的timeout参数精度为微秒，而poll和epoll为毫秒，因此select更加适用于实时性要求比较高的场景，比如核反应堆的控制。</p><p>select可移植性更好，几乎被所有主流平台所支持。</p><ol start="2"><li>poll 应用场景</li></ol><p>poll 没有最大描述符数量的限制，如果平台支持并且对实时性要求不高，应该使用 poll 而不是 select。</p><ol start="3"><li>epoll 应用场景</li></ol><p>只需要运行在 Linux 平台上，有大量的描述符需要同时轮询，并且这些连接最好是长连接。</p><p>需要同时监控小于 1000 个描述符，就没有必要使用 epoll，因为这个应用场景下并不能体现 epoll 的优势。</p><p>需要监控的描述符状态变化多，而且都是非常短暂的，也没有必要使用 epoll。因为 epoll 中的所有描述符都存储在内核中，造成每次需要对描述符的状态改变都需要通过 epoll_ctl() 进行系统调用，频繁系统调用降低效率。并且 epoll 的描述符存储在内核，不容易调试。</p><p>参考：</p><ul><li><a href="https://github.com/CyC2018/CS-Notes/blob/master/notes/Socket.md" target="_blank" rel="noopener">https://github.com/CyC2018/CS-Notes/blob/master/notes/Socket.md</a></li><li><a href="https://segmentfault.com/a/1190000003063859" target="_blank" rel="noopener">https://segmentfault.com/a/1190000003063859</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;I-O模型&quot;&gt;&lt;a href=&quot;#I-O模型&quot; class=&quot;headerlink&quot; title=&quot;I/O模型&quot;&gt;&lt;/a&gt;I/O模型&lt;/h2&gt;&lt;p&gt;一个输入操作通常包括两个阶段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;等待数据准备好&lt;/li&gt;
&lt;li&gt;从内核（kernel）向
      
    
    </summary>
    
      <category term="I/O" scheme="https://kyrie17.github.io/categories/I-O/"/>
    
    
  </entry>
  
  <entry>
    <title>ConcurrentHashMap源码分析-JDK1.8</title>
    <link href="https://kyrie17.github.io/2020/03/16/ConcurrentHashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-JDK1-8/"/>
    <id>https://kyrie17.github.io/2020/03/16/ConcurrentHashMap源码分析-JDK1-8/</id>
    <published>2020-03-15T16:18:50.000Z</published>
    <updated>2020-03-15T16:28:17.791Z</updated>
    
    <content type="html"><![CDATA[<p>浅析JDK1.8 ConcurrentHashMap源码，不得不感慨一下Doug Lea真的太强了！</p><h2 id="写在开篇"><a href="#写在开篇" class="headerlink" title="写在开篇"></a>写在开篇</h2><p>先贴张图看下ConcurrentHashMap JDK 1.8的结构：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/chm01.png" alt="CHM01" title>                </div>                <div class="image-caption">CHM01</div>            </figure></p><p>先大体介绍一下：ConcurrentHashMap JDK1.8抛弃了JDK1.7中原有的Segment分段锁，而采用了CAS + synchronized来保证并发安全性。</p><h2 id="类的继承关系"><a href="#类的继承关系" class="headerlink" title="类的继承关系"></a>类的继承关系</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcurrentHashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">ConcurrentMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Serializable</span> </span>&#123;</span><br></pre></td></tr></table></figure><p>继承于抽象的AbstractMap，ConcurrentMap，Serializable这两个接口。</p><h2 id="重要属性"><a href="#重要属性" class="headerlink" title="重要属性"></a>重要属性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 存储Node结点数据，默认初始大小为16</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">volatile</span> Node&lt;K,V&gt;[] table;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 扩容生成的新数组</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Node&lt;K,V&gt;[] nextTable;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于统计容器中Node结点数量，在下文计算结点数量会详细介绍</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="keyword">long</span> baseCount;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 控制 table 的初始化和扩容操作，默认为0</span></span><br><span class="line"><span class="comment"> * -1：table正在初始化</span></span><br><span class="line"><span class="comment"> * -N：有N-1个线程正在进行扩容操作</span></span><br><span class="line"><span class="comment"> * &gt;0：table.length * 0.75 扩容阈值调为table容量大小的0.75倍</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="keyword">int</span> sizeCtl;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 扩容时，当前转移的位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="keyword">int</span> transferIndex;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代表计数桶状态，默认空闲时0，忙是1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> <span class="keyword">int</span> cellsBusy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 计数桶，容器中计算Node的数量相加baseCount以及CounterCell[]的值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> CounterCell[] counterCells;</span><br></pre></td></tr></table></figure><h2 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h2><p>Node：将JDK1.7中存放数据的HashEntry改为Node。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">    <span class="keyword">final</span> K key;</span><br><span class="line">    <span class="keyword">volatile</span> V val;</span><br><span class="line">    <span class="keyword">volatile</span> Node&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">    Node(<span class="keyword">int</span> hash, K key, V val, Node&lt;K,V&gt; next) &#123;</span><br><span class="line">        <span class="keyword">this</span>.hash = hash;</span><br><span class="line">        <span class="keyword">this</span>.key = key;</span><br><span class="line">        <span class="keyword">this</span>.val = val;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>ForwardingNode：一个特殊的 Node 结点，hash值为-1，作为一个占位符放在原数组中表示当前结点在nextTbale中已经被移动。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">ForwardingNode</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">Node</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;K,V&gt;[] nextTable;</span><br><span class="line">    ForwardingNode(Node&lt;K,V&gt;[] tab) &#123;</span><br><span class="line">        <span class="keyword">super</span>(MOVED, <span class="keyword">null</span>, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">        <span class="keyword">this</span>.nextTable = tab;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    </span><br><span class="line">    <span class="function">Node&lt;K,V&gt; <span class="title">find</span><span class="params">(<span class="keyword">int</span> h, Object k)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 扩容时，get()会调用到，在下文会分析</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p>ConcurrentHashMapJDK1.8构造方法中，是还没有初始化Node[]的，没有参数的构造方法是个空方法，如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>其余的构造方法都只是设置了sizeCtl，举个例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    <span class="keyword">int</span> cap = ((initialCapacity &gt;= (MAXIMUM_CAPACITY &gt;&gt;&gt; <span class="number">1</span>)) ?</span><br><span class="line">               MAXIMUM_CAPACITY :</span><br><span class="line">               tableSizeFor(initialCapacity + (initialCapacity &gt;&gt;&gt; <span class="number">1</span>) + <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">this</span>.sizeCtl = cap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="put"><a href="#put" class="headerlink" title="put()"></a>put()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(key, value, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(K key, V value, <span class="keyword">boolean</span> onlyIfAbsent)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span> || value == <span class="keyword">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="comment">// 对key的hashcode做了处理，hash 计算多了一步 &amp; HASH_BITS（0x7fffffff）</span></span><br><span class="line">    <span class="comment">// 是为了消除高位上的负号，hash的负在ConcurrentHashMap中有特殊意义，表示在扩容或者是树结点</span></span><br><span class="line">    <span class="keyword">int</span> hash = spread(key.hashCode());</span><br><span class="line">    <span class="comment">// 计算该桶链表结点数，若大于TREEIFY_THRESHOLD，需要链表转成红黑树或者数组扩容</span></span><br><span class="line">    <span class="keyword">int</span> binCount = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = table;;) &#123;<span class="comment">// 无限循环</span></span><br><span class="line">        Node&lt;K,V&gt; f; <span class="keyword">int</span> n, i, fh;</span><br><span class="line">        <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>) <span class="comment">// 表为空</span></span><br><span class="line">        <span class="comment">// 初始化表</span></span><br><span class="line">            tab = initTable(); </span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i = (n - <span class="number">1</span>) &amp; hash)) == <span class="keyword">null</span>) &#123; <span class="comment">// 该桶没有结点</span></span><br><span class="line">            <span class="keyword">if</span> (casTabAt(tab, i, <span class="keyword">null</span>,</span><br><span class="line">                         <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key, value, <span class="keyword">null</span>))) <span class="comment">// 插入结点</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED) <span class="comment">// 正在扩容</span></span><br><span class="line">        <span class="comment">// 协助扩容</span></span><br><span class="line">            tab = helpTransfer(tab, f);</span><br><span class="line">        <span class="keyword">else</span> &#123; <span class="comment">// 该桶有结点</span></span><br><span class="line">            V oldVal = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">synchronized</span> (f) &#123; <span class="comment">// 加锁同步</span></span><br><span class="line">                <span class="keyword">if</span> (tabAt(tab, i) == f) &#123; <span class="comment">// 再次确认Node对象还是原来的那一个</span></span><br><span class="line">                    <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123; <span class="comment">// 链表结点</span></span><br><span class="line">                        binCount = <span class="number">1</span>;</span><br><span class="line">                        <span class="keyword">for</span> (Node&lt;K,V&gt; e = f;; ++binCount) &#123;</span><br><span class="line">                            K ek;</span><br><span class="line">                            <span class="comment">// key值相同</span></span><br><span class="line">                            <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                                ((ek = e.key) == key ||</span><br><span class="line">                                 (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek)))) &#123;</span><br><span class="line">                                oldVal = e.val;</span><br><span class="line">                                <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                                    e.val = value;</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            Node&lt;K,V&gt; pred = e;</span><br><span class="line">                            <span class="comment">// 插入新结点</span></span><br><span class="line">                            <span class="keyword">if</span> ((e = e.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                pred.next = <span class="keyword">new</span> Node&lt;K,V&gt;(hash, key,</span><br><span class="line">                                                          value, <span class="keyword">null</span>);</span><br><span class="line">                                <span class="keyword">break</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123; <span class="comment">// 树结点</span></span><br><span class="line">                        Node&lt;K,V&gt; p;</span><br><span class="line">                        binCount = <span class="number">2</span>;</span><br><span class="line">                        <span class="keyword">if</span> ((p = ((TreeBin&lt;K,V&gt;)f).putTreeVal(hash, key,</span><br><span class="line">                                                              value)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                            oldVal = p.val;</span><br><span class="line">                            <span class="keyword">if</span> (!onlyIfAbsent)</span><br><span class="line">                                p.val = value;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (binCount != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果binCount大于等于转为红黑树的阈值</span></span><br><span class="line">                <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD)</span><br><span class="line">                <span class="comment">// 转换或扩容</span></span><br><span class="line">                    treeifyBin(tab, i);</span><br><span class="line">                <span class="keyword">if</span> (oldVal != <span class="keyword">null</span>)</span><br><span class="line">                    <span class="keyword">return</span> oldVal;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// binCount++，并判断是否需要扩容</span></span><br><span class="line">    addCount(<span class="number">1L</span>, binCount);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="初始化数组"><a href="#初始化数组" class="headerlink" title="初始化数组"></a>初始化数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Node&lt;K,V&gt;[] initTable() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; <span class="keyword">int</span> sc;</span><br><span class="line">    <span class="comment">// 每次循环都会获取最新table</span></span><br><span class="line">    <span class="keyword">while</span> ((tab = table) == <span class="keyword">null</span> || tab.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((sc = sizeCtl) &lt; <span class="number">0</span>) <span class="comment">// 代表有线程在进行初始化工作了</span></span><br><span class="line">            Thread.yield(); <span class="comment">// 让出cpu</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc, -<span class="number">1</span>)) &#123; <span class="comment">// sizeCtl设为-1</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || tab.length == <span class="number">0</span>) &#123; <span class="comment">// 再检查一遍数组是否为空</span></span><br><span class="line">                <span class="comment">// table容量</span></span><br><span class="line">                    <span class="keyword">int</span> n = (sc &gt; <span class="number">0</span>) ? sc : DEFAULT_CAPACITY;</span><br><span class="line">                    <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">                    <span class="comment">// 创建数组</span></span><br><span class="line">                    Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node&lt;?,?&gt;[n];</span><br><span class="line">                    <span class="comment">// 将其赋值给table变量</span></span><br><span class="line">                    table = tab = nt;</span><br><span class="line">                    <span class="comment">// 相当于n * 0.75</span></span><br><span class="line">                    sc = n - (n &gt;&gt;&gt; <span class="number">2</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 设置扩容阈值</span></span><br><span class="line">                sizeCtl = sc;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="treeifyBin"><a href="#treeifyBin" class="headerlink" title="treeifyBin()"></a>treeifyBin()</h3><p>treeifyBin()不一定就会进行红黑树转换，也可能是仅仅做数组扩容。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">treeifyBin</span><span class="params">(Node&lt;K,V&gt;[] tab, <span class="keyword">int</span> index)</span> </span>&#123; </span><br><span class="line">    Node&lt;K,V&gt; b; <span class="keyword">int</span> n, sc;</span><br><span class="line">    <span class="keyword">if</span> (tab != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((n = tab.length) &lt; MIN_TREEIFY_CAPACITY) <span class="comment">// table长度小于最小的长度</span></span><br><span class="line">            tryPresize(n &lt;&lt; <span class="number">1</span>); <span class="comment">// 扩容，调整某个桶中结点数量过多的问题</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((b = tabAt(tab, index)) != <span class="keyword">null</span> &amp;&amp; b.hash &gt;= <span class="number">0</span>) &#123; <span class="comment">// 转为红黑树的情况</span></span><br><span class="line">            <span class="keyword">synchronized</span> (b) &#123; <span class="comment">// 加锁同步</span></span><br><span class="line">                <span class="keyword">if</span> (tabAt(tab, index) == b) &#123; <span class="comment">// 再次确认Node对象还是原来的那一个</span></span><br><span class="line">                    TreeNode&lt;K,V&gt; hd = <span class="keyword">null</span>, tl = <span class="keyword">null</span>;</span><br><span class="line">                    <span class="keyword">for</span> (Node&lt;K,V&gt; e = b; e != <span class="keyword">null</span>; e = e.next) &#123; <span class="comment">// 遍历桶中结点</span></span><br><span class="line">                    <span class="comment">// 创建TreeNode结点</span></span><br><span class="line">                        TreeNode&lt;K,V&gt; p =</span><br><span class="line">                            <span class="keyword">new</span> TreeNode&lt;K,V&gt;(e.hash, e.key, e.val,</span><br><span class="line">                                              <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">                        <span class="keyword">if</span> ((p.prev = tl) == <span class="keyword">null</span>) <span class="comment">// 该结点前驱为空</span></span><br><span class="line">                            hd = p; <span class="comment">// 设置为头结点</span></span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        <span class="comment">// 尾结点的next设为p</span></span><br><span class="line">                            tl.next = p;</span><br><span class="line">                        <span class="comment">// 尾结点赋值为p</span></span><br><span class="line">                        tl = p;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 设置table中下标为index的值为hd</span></span><br><span class="line">                    setTabAt(tab, index, <span class="keyword">new</span> TreeBin&lt;K,V&gt;(hd));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h2><h3 id="什么时候会扩容"><a href="#什么时候会扩容" class="headerlink" title="什么时候会扩容"></a>什么时候会扩容</h3><ol><li>addCount()：使用put()插入元素时会调用addCount()，检查是否需要扩容</li><li>tryPresize()：<ul><li>链表转红黑树过程，table容量小于MIN_TREEIFY_CAPACITY时</li><li>调用putAll()一次性加入大量元素时，会触发扩容</li></ul></li><li>helpTransfer()：使用put()插入元素时，发现Node为fwd时，会协助扩容</li></ol><h3 id="addCount"><a href="#addCount" class="headerlink" title="addCount()"></a>addCount()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">addCount</span><span class="params">(<span class="keyword">long</span> x, <span class="keyword">int</span> check)</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="comment">// 上面代码是计算容器中结点的数量，我们最后再讲</span></span><br><span class="line">    <span class="comment">// 现在只需要知道下面代码中的s是即是加入新元素后容器容量大小</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (check &gt;= <span class="number">0</span>) &#123; <span class="comment">// check为结点数量，有新元素加入成功才检查是否要扩容</span></span><br><span class="line">        Node&lt;K,V&gt;[] tab, nt; <span class="keyword">int</span> n, sc;</span><br><span class="line">        <span class="keyword">while</span> (s &gt;= (<span class="keyword">long</span>)(sc = sizeCtl) &amp;&amp; (tab = table) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">               (n = tab.length) &lt; MAXIMUM_CAPACITY) &#123; <span class="comment">// 容量大于当前扩容阈值并且小于最大扩容值才扩容</span></span><br><span class="line">            <span class="keyword">int</span> rs = resizeStamp(n); <span class="comment">// 看下面分析</span></span><br><span class="line">            <span class="keyword">if</span> (sc &lt; <span class="number">0</span>) &#123; <span class="comment">// 已有线程在进行扩容工作</span></span><br><span class="line">                <span class="keyword">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class="number">1</span> ||</span><br><span class="line">                    sc == rs + MAX_RESIZERS || (nt = nextTable) == <span class="keyword">null</span> ||</span><br><span class="line">                    transferIndex &lt;= <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc, sc + <span class="number">1</span>))</span><br><span class="line">                    transfer(tab, nt);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 没有线程在进行扩容</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc,</span><br><span class="line">                                         (rs &lt;&lt; RESIZE_STAMP_SHIFT) + <span class="number">2</span>))</span><br><span class="line">                transfer(tab, <span class="keyword">null</span>);</span><br><span class="line">            s = sumCount();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="resizeStamp"><a href="#resizeStamp" class="headerlink" title="resizeStamp()"></a>resizeStamp()</h4><p>在上面的代码中调用到这个方法，我们来看一下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> RESIZE_STAMP_BITS = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> RESIZE_STAMP_SHIFT = <span class="number">32</span> - RESIZE_STAMP_BITS;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">resizeStamp</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Integer.numberOfLeadingZeros(n) | (<span class="number">1</span> &lt;&lt; (RESIZE_STAMP_BITS - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Integer.numberOfLeadingZeros(n)：计算n转换成32位二进制之后1前面有几个0。因为ConcurrentHashMap的容量一定是2的幂次方，所以不同的容量n前面0的个数一定不同，这样可以保证是在原容量为n的情况下进行扩容。</p><p>1 &lt;&lt; (RESIZE_STAMP_BITS - 1)：即是1&lt;&lt;15，表示为二进制即是高16位为0，低16位为1：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0000 0000 0000 0000 1000 0000 0000 0000</span><br></pre></td></tr></table></figure></p><p>所以resizeStamp()的返回值（rs）：<strong>高16位置0，第16位为1，低15位存放当前容量n，用于表示是对n的扩容。</strong></p><p>rs与RESIZE_STAMP_SHIFT配合可以求出新的sizeCtl的值，分情况如下：</p><ul><li>sc &lt; 0：已经有线程在扩容，将sizeCtl+1并调用transfer()让当前线程参与扩容</li><li>sc &gt;= 0：没有线程在扩容，使用CAS将sizeCtl的值改为(rs &lt;&lt; RESIZE_STAMP_SHIFT) + 2)</li></ul><p>rs即resizeStamp(n)，记temp=rs &lt;&lt; RESIZE_STAMP_SHIFT。如当前容量为8时rs的值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//rs</span><br><span class="line">0000 0000 0000 0000 1000 0000 0000 1000</span><br><span class="line">//temp = rs &lt;&lt; RESIZE_STAMP_SHIFT，即 temp = rs &lt;&lt; 16，左移16后temp最高位为1，所以temp成了一个负数</span><br><span class="line">1000 0000 0000 1000 0000 0000 0000 0000</span><br><span class="line">//sc = (rs &lt;&lt; RESIZE_STAMP_SHIFT) + 2)</span><br><span class="line">1000 0000 0000 1000 0000 0000 0000 0010</span><br></pre></td></tr></table></figure></p><p>那么在扩容时sizeCtl值的意义：高15位为容量n，第16位位并行扩容线程数+1。</p><h3 id="tryPresize"><a href="#tryPresize" class="headerlink" title="tryPresize()"></a>tryPresize()</h3><p>和addCount()的实现很相似，不多赘述。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">tryPresize</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123; <span class="comment">// size传入时已*2</span></span><br><span class="line">    <span class="comment">// c：size 的 1.5 倍，再加 1，再往上取最近的 2 的 n 次方</span></span><br><span class="line">    <span class="keyword">int</span> c = (size &gt;= (MAXIMUM_CAPACITY &gt;&gt;&gt; <span class="number">1</span>)) ? MAXIMUM_CAPACITY :</span><br><span class="line">    tableSizeFor(size + (size &gt;&gt;&gt; <span class="number">1</span>) + <span class="number">1</span>); </span><br><span class="line">    <span class="keyword">int</span> sc;</span><br><span class="line">    <span class="keyword">while</span> ((sc = sizeCtl) &gt;= <span class="number">0</span>) &#123; <span class="comment">// 没有其他线程在初始化、扩容</span></span><br><span class="line">        Node&lt;K,V&gt;[] tab = table; <span class="keyword">int</span> n;</span><br><span class="line">        <span class="comment">// 这个if分支和前面的初始化数组的代码基本上是一样的，在这里，我们可以不用管这块代码</span></span><br><span class="line">        <span class="keyword">if</span> (tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>) &#123;</span><br><span class="line">            n = (sc &gt; c) ? sc : c;</span><br><span class="line">            <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc, -<span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (table == tab) &#123;</span><br><span class="line">                        <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">                        Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node&lt;?,?&gt;[n];</span><br><span class="line">                        table = nt;</span><br><span class="line">                        sc = n - (n &gt;&gt;&gt; <span class="number">2</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    sizeCtl = sc;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (c &lt;= sc || n &gt;= MAXIMUM_CAPACITY)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (tab == table) &#123;</span><br><span class="line">            <span class="keyword">int</span> rs = resizeStamp(n);</span><br><span class="line">            <span class="keyword">if</span> (sc &lt; <span class="number">0</span>) &#123; <span class="comment">// 已有线程在进行扩容工作</span></span><br><span class="line">                Node&lt;K,V&gt;[] nt;</span><br><span class="line">                <span class="keyword">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class="number">1</span> ||</span><br><span class="line">                    sc == rs + MAX_RESIZERS || (nt = nextTable) == <span class="keyword">null</span> ||</span><br><span class="line">                    transferIndex &lt;= <span class="number">0</span>)</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="comment">// 将sizeCtl加1，然后执行transfer()，此时nextTab不为null</span></span><br><span class="line">                <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc, sc + <span class="number">1</span>))</span><br><span class="line">                    transfer(tab, nt);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 将sizeCtl设置为(rs &lt;&lt; RESIZE_STAMP_SHIFT) + 2</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc,</span><br><span class="line">                                         (rs &lt;&lt; RESIZE_STAMP_SHIFT) + <span class="number">2</span>))</span><br><span class="line">                <span class="comment">// 调用transfer()，此时nextTab参数为null</span></span><br><span class="line">                transfer(tab, <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="helpTransfer"><a href="#helpTransfer" class="headerlink" title="helpTransfer()"></a>helpTransfer()</h3><p>和addCount()的实现很相似，不多赘述。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] helpTransfer(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt; f) &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] nextTab; <span class="keyword">int</span> sc;</span><br><span class="line">    <span class="keyword">if</span> (tab != <span class="keyword">null</span> &amp;&amp; (f <span class="keyword">instanceof</span> ForwardingNode) &amp;&amp;</span><br><span class="line">        (nextTab = ((ForwardingNode&lt;K,V&gt;)f).nextTable) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> rs = resizeStamp(tab.length);</span><br><span class="line">        <span class="keyword">while</span> (nextTab == nextTable &amp;&amp; table == tab &amp;&amp;</span><br><span class="line">               (sc = sizeCtl) &lt; <span class="number">0</span>) &#123; <span class="comment">// 已有线程在进行扩容工作</span></span><br><span class="line">            <span class="keyword">if</span> ((sc &gt;&gt;&gt; RESIZE_STAMP_SHIFT) != rs || sc == rs + <span class="number">1</span> ||</span><br><span class="line">                sc == rs + MAX_RESIZERS || transferIndex &lt;= <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">// sizeCtl加1，表示多一个线程进来协助扩容</span></span><br><span class="line">            <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc, sc + <span class="number">1</span>)) &#123;</span><br><span class="line">                transfer(tab, nextTab);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nextTab;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> table;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="transfer"><a href="#transfer" class="headerlink" title="transfer()"></a>transfer()</h3><p>我们可以看到上面三种方法最后都调用了transfer()，显然transfer()才是真正进行并行扩容的地方。</p><p>当外围调用此方法的时候，会保证第一个发起数据迁移的线程，nextTab参数为null，之后再调用此方法的时候，nextTab不会为null。 理解为有n个迁移任务，让每个线程每次负责一个小任务，每做完一个任务再检测是否有其他没做完的任务。</p><ul><li>Doug Lea使用了一个stride（步长），每个线程每次负责迁移其中的一部分，如每次迁移 16 个小任务。所以需要一个全局的调度者来安排哪个线程执行哪几个任务，这个就是属性 transferIndex 的作用。</li><li>transfer()并没有实现所有的迁移任务，每次调用这个方法只实现了transferIndex往前stride个位置的迁移工作，其他的需要由外围来控制。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Node&lt;K,V&gt;[] tab, Node&lt;K,V&gt;[] nextTab)</span> </span>&#123; <span class="comment">// 参数为原数组，扩展数组</span></span><br><span class="line">    <span class="keyword">int</span> n = tab.length, stride;</span><br><span class="line">    <span class="comment">//根据cpu个数找出扩容时的数组跨度大小即最小分组</span></span><br><span class="line">    <span class="keyword">if</span> ((stride = (NCPU &gt; <span class="number">1</span>) ? (n &gt;&gt;&gt; <span class="number">3</span>) / NCPU : n) &lt; MIN_TRANSFER_STRIDE)</span><br><span class="line">        stride = MIN_TRANSFER_STRIDE;</span><br><span class="line">    <span class="keyword">if</span> (nextTab == <span class="keyword">null</span>) &#123; <span class="comment">// 普通扩容nextTab为空，竞争帮助扩容时不为空</span></span><br><span class="line">        <span class="comment">// 初始化nextTable</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">            Node&lt;K,V&gt;[] nt = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node&lt;?,?&gt;[n &lt;&lt; <span class="number">1</span>];</span><br><span class="line">            nextTab = nt;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable ex) &#123;</span><br><span class="line">            sizeCtl = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        nextTable = nextTab;</span><br><span class="line">        <span class="comment">// 当前转移的位置，说明是逆序迁移</span></span><br><span class="line">        transferIndex = n;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> nextn = nextTab.length;</span><br><span class="line">    <span class="comment">// 扩容时的特殊节点，标明此节点正在进行迁移</span></span><br><span class="line">    ForwardingNode&lt;K,V&gt; fwd = <span class="keyword">new</span> ForwardingNode&lt;K,V&gt;(nextTab);</span><br><span class="line">    <span class="comment">// 当前线程是否需要继续寻找下一个可处理的节点</span></span><br><span class="line">    <span class="keyword">boolean</span> advance = <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">// 所有桶是否都已迁移完成。</span></span><br><span class="line">    <span class="keyword">boolean</span> finishing = <span class="keyword">false</span>; </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, bound = <span class="number">0</span>;;) &#123; <span class="comment">// 无限循环</span></span><br><span class="line">        Node&lt;K,V&gt; f; <span class="keyword">int</span> fh;</span><br><span class="line">        <span class="comment">// 此循环的作用是确定当前线程要迁移的桶的范围或通过更新i的值确定当前范围内下一个要处理的节点</span></span><br><span class="line">        <span class="keyword">while</span> (advance) &#123;</span><br><span class="line">            <span class="keyword">int</span> nextIndex, nextBound;</span><br><span class="line">            <span class="comment">// i为当前正在处理的Node数组下标，每次处理一个Node节点就会自减1</span></span><br><span class="line">            <span class="keyword">if</span> (--i &gt;= bound || finishing) <span class="comment">// 检查结束条件</span></span><br><span class="line">                advance = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> ((nextIndex = transferIndex) &lt;= <span class="number">0</span>) &#123; <span class="comment">// 迁移总进度&lt;=0，表示所有桶都已迁移完成</span></span><br><span class="line">                i = -<span class="number">1</span>;</span><br><span class="line">                advance = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapInt</span><br><span class="line">                     (<span class="keyword">this</span>, TRANSFERINDEX, nextIndex,</span><br><span class="line">                      nextBound = (nextIndex &gt; stride ?</span><br><span class="line">                                   nextIndex - stride : <span class="number">0</span>))) &#123;</span><br><span class="line">                <span class="comment">// 当前线程迁移桶的范围</span></span><br><span class="line">                bound = nextBound;</span><br><span class="line">                i = nextIndex - <span class="number">1</span>;</span><br><span class="line">                advance = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 1. 全部桶迁移完成</span></span><br><span class="line"><span class="comment">         * 2. 下面"i = n"后，再次进入循环时要做的边界检查</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span> || i &gt;= n || i + n &gt;= nextn) &#123;</span><br><span class="line">            <span class="keyword">int</span> sc;</span><br><span class="line">            <span class="keyword">if</span> (finishing) &#123; <span class="comment">// 所有线程迁移完成</span></span><br><span class="line">                nextTable = <span class="keyword">null</span>;</span><br><span class="line">                <span class="comment">// 替换table</span></span><br><span class="line">                table = nextTab;</span><br><span class="line">                <span class="comment">// sizeCtl为新容量的0.75倍</span></span><br><span class="line">                sizeCtl = (n &lt;&lt; <span class="number">1</span>) - (n &gt;&gt;&gt; <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (U.compareAndSwapInt(<span class="keyword">this</span>, SIZECTL, sc = sizeCtl, sc - <span class="number">1</span>)) &#123; <span class="comment">// 参与扩容线程数-1。</span></span><br><span class="line">                <span class="keyword">if</span> ((sc - <span class="number">2</span>) != resizeStamp(n) &lt;&lt; RESIZE_STAMP_SHIFT) <span class="comment">// 根据前面addCount()或tryPresize()中的sizeCtl+2这里就有-2，相等时说明没有线程在参与扩容了</span></span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                finishing = advance = <span class="keyword">true</span>;</span><br><span class="line">                i = n; <span class="comment">// 赋值i为n，让其进入上面if进行是否结束的检查，并完成扩容后续操作</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((f = tabAt(tab, i)) == <span class="keyword">null</span>) <span class="comment">// 原数组i位置无结点</span></span><br><span class="line">            advance = casTabAt(tab, i, <span class="keyword">null</span>, fwd); <span class="comment">// 插入fwd结点</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((fh = f.hash) == MOVED) <span class="comment">// 实际是检查上一步为null时CAS是否成功</span></span><br><span class="line">            advance = <span class="keyword">true</span>; <span class="comment">// 之后在上面的while中变更i后继续</span></span><br><span class="line">        <span class="keyword">else</span> &#123; <span class="comment">// 转移该桶</span></span><br><span class="line">            <span class="keyword">synchronized</span> (f) &#123; <span class="comment">// 加锁同步</span></span><br><span class="line">                <span class="keyword">if</span> (tabAt(tab, i) == f) &#123;</span><br><span class="line">                    <span class="comment">// 低位结点，高位结点</span></span><br><span class="line">                    Node&lt;K,V&gt; ln, hn;</span><br><span class="line">                    <span class="keyword">if</span> (fh &gt;= <span class="number">0</span>) &#123; <span class="comment">// 链表结点</span></span><br><span class="line">                        <span class="comment">// 由于n是2的幂次方（所有二进制位中只有一个1)</span></span><br><span class="line">                        <span class="comment">// 如n=16(0001 0000)，第4位为1，那么hash&amp;n后的值第4位只能为0或1。所以可以根据hash&amp;n的结果将所有结点分为两部分</span></span><br><span class="line">                        <span class="keyword">int</span> runBit = fh &amp; n;</span><br><span class="line">                        Node&lt;K,V&gt; lastRun = f;</span><br><span class="line">                        <span class="comment">// 找出最后一段完整的fh&amp;n不变的链表，这样最后这一段链表就不用重新创建新结点了</span></span><br><span class="line">                        <span class="keyword">for</span> (Node&lt;K,V&gt; p = f.next; p != <span class="keyword">null</span>; p = p.next) &#123;</span><br><span class="line">                            <span class="keyword">int</span> b = p.hash &amp; n;</span><br><span class="line">                            <span class="keyword">if</span> (b != runBit) &#123;</span><br><span class="line">                                runBit = b;</span><br><span class="line">                                lastRun = p;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (runBit == <span class="number">0</span>) &#123; <span class="comment">// runBit=0，表示此Node为低位Node</span></span><br><span class="line">                            ln = lastRun;</span><br><span class="line">                            hn = <span class="keyword">null</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123; <span class="comment">// 此Node为高位Node</span></span><br><span class="line">                            hn = lastRun;</span><br><span class="line">                            ln = <span class="keyword">null</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 迁移lastRun之前的结点</span></span><br><span class="line">                        <span class="keyword">for</span> (Node&lt;K,V&gt; p = f; p != lastRun; p = p.next) &#123;</span><br><span class="line">                            <span class="keyword">int</span> ph = p.hash; K pk = p.key; V pv = p.val;</span><br><span class="line">                            <span class="keyword">if</span> ((ph &amp; n) == <span class="number">0</span>)</span><br><span class="line">                                ln = <span class="keyword">new</span> Node&lt;K,V&gt;(ph, pk, pv, ln);</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hn = <span class="keyword">new</span> Node&lt;K,V&gt;(ph, pk, pv, hn);</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 低位链表放在i处</span></span><br><span class="line">                        setTabAt(nextTab, i, ln);</span><br><span class="line">                        <span class="comment">// 高位链表放在i+n处</span></span><br><span class="line">                        setTabAt(nextTab, i + n, hn);</span><br><span class="line">                        <span class="comment">// 在原table中设置ForwardingNode节点以提示该桶扩容完成</span></span><br><span class="line">                        setTabAt(tab, i, fwd);</span><br><span class="line">                        advance = <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (f <span class="keyword">instanceof</span> TreeBin) &#123; <span class="comment">// 红黑树结点</span></span><br><span class="line">                        TreeBin&lt;K,V&gt; t = (TreeBin&lt;K,V&gt;)f;</span><br><span class="line">                        TreeNode&lt;K,V&gt; lo = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                        TreeNode&lt;K,V&gt; hi = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                        <span class="keyword">int</span> lc = <span class="number">0</span>, hc = <span class="number">0</span>;</span><br><span class="line">                        <span class="keyword">for</span> (Node&lt;K,V&gt; e = t.first; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">                            <span class="keyword">int</span> h = e.hash;</span><br><span class="line">                            TreeNode&lt;K,V&gt; p = <span class="keyword">new</span> TreeNode&lt;K,V&gt;</span><br><span class="line">                                (h, e.key, e.val, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">                            <span class="keyword">if</span> ((h &amp; n) == <span class="number">0</span>) &#123;</span><br><span class="line">                                <span class="keyword">if</span> ((p.prev = loTail) == <span class="keyword">null</span>)</span><br><span class="line">                                    lo = p;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    loTail.next = p;</span><br><span class="line">                                loTail = p;</span><br><span class="line">                                ++lc;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="keyword">if</span> ((p.prev = hiTail) == <span class="keyword">null</span>)</span><br><span class="line">                                    hi = p;</span><br><span class="line">                                <span class="keyword">else</span></span><br><span class="line">                                    hiTail.next = p;</span><br><span class="line">                                hiTail = p;</span><br><span class="line">                                ++hc;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="comment">// 扩容后结点数量太少降为链表</span></span><br><span class="line">                        ln = (lc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(lo) :</span><br><span class="line">                        (hc != <span class="number">0</span>) ? <span class="keyword">new</span> TreeBin&lt;K,V&gt;(lo) : t;</span><br><span class="line">                        hn = (hc &lt;= UNTREEIFY_THRESHOLD) ? untreeify(hi) :</span><br><span class="line">                        (lc != <span class="number">0</span>) ? <span class="keyword">new</span> TreeBin&lt;K,V&gt;(hi) : t;</span><br><span class="line">                        setTabAt(nextTab, i, ln);</span><br><span class="line">                        setTabAt(nextTab, i + n, hn);</span><br><span class="line">                        setTabAt(tab, i, fwd);</span><br><span class="line">                        advance = <span class="keyword">true</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码有点长，在这里小结一下，这个方法主要分成两个部分：</p><ul><li>while循环：确定当前线程要迁移的桶的范围以及通过更新i的值确定当前范围内下一个要处理的结点</li><li>其他代码：转移桶中结点</li></ul><h2 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h2><p>这里我们主要关注扩容时，get()怎么做：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; e, p; <span class="keyword">int</span> n, eh; K ek;</span><br><span class="line">    <span class="keyword">int</span> h = spread(key.hashCode());</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (e = tabAt(tab, (n - <span class="number">1</span>) &amp; h)) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((eh = e.hash) == h) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((ek = e.key) == key || (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek)))</span><br><span class="line">                <span class="keyword">return</span> e.val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (eh &lt; <span class="number">0</span>) <span class="comment">// 在迁移或都是TreeBin</span></span><br><span class="line">            <span class="comment">// 调用节点对象的find方法查找值</span></span><br><span class="line">            <span class="keyword">return</span> (p = e.find(h, key)) != <span class="keyword">null</span> ? p.val : <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (e.hash == h &amp;&amp;</span><br><span class="line">                ((ek = e.key) == key || (ek != <span class="keyword">null</span> &amp;&amp; key.equals(ek))))</span><br><span class="line">                <span class="keyword">return</span> e.val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>内部类ForwardingNode中的find()：<br>这里的查找，是去新Node数组nextTable中查找的，过程与HashMap相似，不多赘述。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">Node&lt;K,V&gt; <span class="title">find</span><span class="params">(<span class="keyword">int</span> h, Object k)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// loop to avoid arbitrarily deep recursion on forwarding nodes</span></span><br><span class="line">    outer: <span class="keyword">for</span> (Node&lt;K,V&gt;[] tab = nextTable;;) &#123;</span><br><span class="line">        Node&lt;K,V&gt; e; <span class="keyword">int</span> n;</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="keyword">null</span> || tab == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span> ||</span><br><span class="line">            (e = tabAt(tab, (n - <span class="number">1</span>) &amp; h)) == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">int</span> eh; K ek;</span><br><span class="line">            <span class="keyword">if</span> ((eh = e.hash) == h &amp;&amp;</span><br><span class="line">                ((ek = e.key) == k || (ek != <span class="keyword">null</span> &amp;&amp; k.equals(ek))))</span><br><span class="line">                <span class="keyword">return</span> e;</span><br><span class="line">            <span class="keyword">if</span> (eh &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (e <span class="keyword">instanceof</span> ForwardingNode) &#123;</span><br><span class="line">                    tab = ((ForwardingNode&lt;K,V&gt;)e).nextTable;</span><br><span class="line">                    <span class="keyword">continue</span> outer;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">return</span> e.find(h, k);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> ((e = e.next) == <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="容器结点数量"><a href="#容器结点数量" class="headerlink" title="容器结点数量"></a>容器结点数量</h2><p>统计容器大小其实是用了两种思路：</p><ol><li><strong>CAS方式直接递增</strong>：在线程竞争不大的时候，直接使用CAS操作递增baseCount值即可，这里说的竞争不大指的是CAS操作不会失败的情况</li><li><strong>分而治之桶计数</strong>：若出现了CAS操作失败的情况，则证明此时有线程竞争了，计数方式从CAS方式转变为分而治之的桶计数方式</li></ol><h3 id="countCell"><a href="#countCell" class="headerlink" title="countCell"></a>countCell</h3><p>这里解释一下什么是计数桶：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/chm02.png" alt="CHM02" title>                </div>                <div class="image-caption">CHM02</div>            </figure><br>这样减少了线程的冲突，查询总数的时候sum = countCell[0] + countCell[1] + countCell[2] + countCell[3]</p><p>在设计中，使用了分而治之的思想，将每一个计数都分散到各个countCell对象里面（下面称之为桶），使竞争最小化，又使用了CAS操作，就算有竞争，也可以对失败了的线程进行其他的处理。乐观锁的实现方式与悲观锁不同之处就在于乐观锁可以对竞争失败了的线程进行其他策略的处理，而悲观锁只能等待锁释放，所以这里使用CAS操作对竞争失败的线程做了其他处理，很巧妙的运用了CAS乐观锁。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>CounterCell：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@sun</span>.misc.Contended <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">CounterCell</span> </span>&#123;</span><br><span class="line">  <span class="keyword">volatile</span> <span class="keyword">long</span> value;</span><br><span class="line">  CounterCell(<span class="keyword">long</span> x) &#123; value = x; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着补上addCount()我们在上面跳过的部分：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">addCount</span><span class="params">(<span class="keyword">long</span> x, <span class="keyword">int</span> check)</span> </span>&#123;</span><br><span class="line">    CounterCell[] as; <span class="keyword">long</span> b, s;</span><br><span class="line">    <span class="keyword">if</span> ((as = counterCells) != <span class="keyword">null</span> ||</span><br><span class="line">        !U.compareAndSwapLong(<span class="keyword">this</span>, BASECOUNT, b = baseCount, s = b + x)) &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 进入此语句块有两种可能</span></span><br><span class="line"><span class="comment">         * 1.counterCells被初始化完成了，不为null</span></span><br><span class="line"><span class="comment">         * 2.CAS操作递增baseCount值失败了，说明有竞争</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        CounterCell a; <span class="keyword">long</span> v; <span class="keyword">int</span> m;</span><br><span class="line">        <span class="comment">// 标志是否存在竞争</span></span><br><span class="line">        <span class="keyword">boolean</span> uncontended = <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 条件：</span></span><br><span class="line"><span class="comment">         * 1.计数桶是否还没初始化，若as == null，进入语句块</span></span><br><span class="line"><span class="comment">         * 2.计数桶是否为空，若桶为空进入语句块</span></span><br><span class="line"><span class="comment">         * 3.用一个线程变量随机数，与上（桶大小-1），若桶的这个位置为空，进入语句块</span></span><br><span class="line"><span class="comment">         * 4.到这里说明桶已经初始化了，且随机的这个位置不为空，尝试CAS操作使桶加1，失败设置uncontended值并进入语句块</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">if</span> (as == <span class="keyword">null</span> || (m = as.length - <span class="number">1</span>) &lt; <span class="number">0</span> ||</span><br><span class="line">            (a = as[ThreadLocalRandom.getProbe() &amp; m]) == <span class="keyword">null</span> ||</span><br><span class="line">            !(uncontended =</span><br><span class="line">              U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x))) &#123;</span><br><span class="line">            <span class="comment">// 初始化或扩容counterCell[]</span></span><br><span class="line">            fullAddCount(x, uncontended);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (check &lt;= <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        s = sumCount();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="初始化CounterCell"><a href="#初始化CounterCell" class="headerlink" title="初始化CounterCell[]"></a>初始化CounterCell[]</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">fullAddCount</span><span class="params">(<span class="keyword">long</span> x, <span class="keyword">boolean</span> wasUncontended)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h; <span class="comment">// 线程随机变量</span></span><br><span class="line">    <span class="keyword">if</span> ((h = ThreadLocalRandom.getProbe()) == <span class="number">0</span>) &#123;</span><br><span class="line">        ThreadLocalRandom.localInit();      </span><br><span class="line">        h = ThreadLocalRandom.getProbe();</span><br><span class="line">        wasUncontended = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">boolean</span> collide = <span class="keyword">false</span>;                </span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        CounterCell[] as; CounterCell a; <span class="keyword">int</span> n; <span class="keyword">long</span> v;</span><br><span class="line">        <span class="comment">// 此时计数桶为null，不走这部分if块</span></span><br><span class="line">        <span class="keyword">if</span> ((as = counterCells) != <span class="keyword">null</span> &amp;&amp; (n = as.length) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 进入此语句块进行计数桶的初始化</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cellsBusy == <span class="number">0</span> &amp;&amp; counterCells == as &amp;&amp;</span><br><span class="line">                 U.compareAndSwapInt(<span class="keyword">this</span>, CELLSBUSY, <span class="number">0</span>, <span class="number">1</span>)) &#123; <span class="comment">// CAS设置cellsBusy=1，表示现在计数桶Busy中</span></span><br><span class="line">            <span class="keyword">boolean</span> init = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;                           </span><br><span class="line">                <span class="keyword">if</span> (counterCells == as) &#123; <span class="comment">// 再次确认计数桶为空</span></span><br><span class="line">                    <span class="comment">// 初始化一个长度为2的计数桶</span></span><br><span class="line">                    CounterCell[] rs = <span class="keyword">new</span> CounterCell[<span class="number">2</span>];</span><br><span class="line">                    <span class="comment">// h为一个随机数，与上1则代表结果为0、1中随机的一个</span></span><br><span class="line">                    <span class="comment">// 也就是在0、1下标中随便选一个计数桶，x=1，放入1的值代表增加1个容量</span></span><br><span class="line">                    rs[h &amp; <span class="number">1</span>] = <span class="keyword">new</span> CounterCell(x);</span><br><span class="line">                    <span class="comment">// 将初始化好的计数桶赋值给ConcurrentHashMap</span></span><br><span class="line">                    counterCells = rs;</span><br><span class="line">                    init = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="comment">// 最后将busy标识设置为0，表示不busy了</span></span><br><span class="line">                cellsBusy = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (init)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 若有线程同时来初始化计数桶，则没有抢到busy资格的线程就先来CAS递增baseCount</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapLong(<span class="keyword">this</span>, BASECOUNT, v = baseCount, v + x))</span><br><span class="line">            <span class="keyword">break</span>;                          </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="扩容CounterCell"><a href="#扩容CounterCell" class="headerlink" title="扩容CounterCell[]"></a>扩容CounterCell[]</h3><p>从上面的分析中我们知道，计数桶初始化之后长度为2，在竞争大的时候肯定是不够用的，所以一定有计数桶的扩容操作：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">fullAddCount</span><span class="params">(<span class="keyword">long</span> x, <span class="keyword">boolean</span> wasUncontended)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> h;</span><br><span class="line">    <span class="keyword">if</span> ((h = ThreadLocalRandom.getProbe()) == <span class="number">0</span>) &#123;</span><br><span class="line">        ThreadLocalRandom.localInit();      </span><br><span class="line">        h = ThreadLocalRandom.getProbe();</span><br><span class="line">        wasUncontended = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">boolean</span> collide = <span class="keyword">false</span>;               </span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        CounterCell[] as; CounterCell a; <span class="keyword">int</span> n; <span class="keyword">long</span> v;</span><br><span class="line">        <span class="comment">// 计数桶初始化好了，进入该if块</span></span><br><span class="line">        <span class="keyword">if</span> ((as = counterCells) != <span class="keyword">null</span> &amp;&amp; (n = as.length) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((a = as[(n - <span class="number">1</span>) &amp; h]) == <span class="keyword">null</span>) &#123; <span class="comment">// 从计数桶数组随机选一个计数桶，若为null表示该桶位还没线程递增过</span></span><br><span class="line">                <span class="keyword">if</span> (cellsBusy == <span class="number">0</span>) &#123; <span class="comment">// 计数桶数组busy状态是否被标识</span></span><br><span class="line">                    <span class="comment">// 创建一个计数桶</span></span><br><span class="line">                    CounterCell r = <span class="keyword">new</span> CounterCell(x); </span><br><span class="line">                    <span class="comment">// 标志计数桶数组busy状态</span></span><br><span class="line">                    <span class="keyword">if</span> (cellsBusy == <span class="number">0</span> &amp;&amp;</span><br><span class="line">                        U.compareAndSwapInt(<span class="keyword">this</span>, CELLSBUSY, <span class="number">0</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">                        <span class="keyword">boolean</span> created = <span class="keyword">false</span>;</span><br><span class="line">                        <span class="keyword">try</span> &#123;               </span><br><span class="line">                            CounterCell[] rs; <span class="keyword">int</span> m, j;</span><br><span class="line">                            <span class="keyword">if</span> ((rs = counterCells) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">                                (m = rs.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">                                rs[j = (m - <span class="number">1</span>) &amp; h] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                                <span class="comment">// 将刚刚创建的计数桶赋值给对应位置</span></span><br><span class="line">                                rs[j] = r;</span><br><span class="line">                                created = <span class="keyword">true</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                            <span class="comment">// 标识不busy了</span></span><br><span class="line">                            cellsBusy = <span class="number">0</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (created)</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        <span class="keyword">continue</span>;        </span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                collide = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (!wasUncontended)</span><br><span class="line">                wasUncontended = <span class="keyword">true</span>;    </span><br><span class="line">            <span class="comment">// 走到这里代表计数桶不为null，尝试递增计数桶</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x))</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (counterCells != as || n &gt;= NCPU)</span><br><span class="line">                collide = <span class="keyword">false</span>;   </span><br><span class="line">            <span class="comment">// 若CAS操作失败了，到了这里，会先进入一次下面的if块，然后再走一次刚刚的for循环</span></span><br><span class="line">            <span class="comment">// 若是第二次for循环，collide=true，则不会走进去</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (!collide)</span><br><span class="line">                collide = <span class="keyword">true</span>;</span><br><span class="line">            <span class="comment">// 计数桶扩容，一个线程若走了两次for循环，也就是进行了多次CAS操作递增计数桶失败了</span></span><br><span class="line">            <span class="comment">// 则进行计数桶扩容，CAS标示计数桶busy中</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (cellsBusy == <span class="number">0</span> &amp;&amp;</span><br><span class="line">                     U.compareAndSwapInt(<span class="keyword">this</span>, CELLSBUSY, <span class="number">0</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 确认计数桶还是同一个</span></span><br><span class="line">                    <span class="keyword">if</span> (counterCells == as) &#123;</span><br><span class="line">                        <span class="comment">// 将长度扩大到2倍</span></span><br><span class="line">                        CounterCell[] rs = <span class="keyword">new</span> CounterCell[n &lt;&lt; <span class="number">1</span>];</span><br><span class="line">                        <span class="comment">// 遍历旧计数桶，将引用直接搬过来</span></span><br><span class="line">                        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">                            rs[i] = as[i];</span><br><span class="line">                        <span class="comment">// 赋值</span></span><br><span class="line">                        counterCells = rs;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">// 取消busy状态</span></span><br><span class="line">                    cellsBusy = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                collide = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">continue</span>;                 </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 重新设置线程随机数</span></span><br><span class="line">            h = ThreadLocalRandom.advanceProbe(h);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (cellsBusy == <span class="number">0</span> &amp;&amp; counterCells == as &amp;&amp;</span><br><span class="line">                 U.compareAndSwapInt(<span class="keyword">this</span>, CELLSBUSY, <span class="number">0</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">            <span class="comment">// 初始化计数桶...</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 初始化计数桶没抢到计数桶数组busy资格才能走到这</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (U.compareAndSwapLong(<span class="keyword">this</span>, BASECOUNT, v = baseCount, v + x))</span><br><span class="line">            <span class="keyword">break</span>;                         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>小结一下：</p><ul><li>在CAS操作递增计数桶失败了3次之后，会进行扩容计数桶操作，注意此时同时进行了两次随机定位计数桶来进行CAS递增的，所以此时可以保证大概率是因为计数桶不够用了，才会进行计数桶扩容</li><li>计数桶长度增加到两倍长度，数据直接遍历迁移过来，由于计数桶不像HashMap数据结构那么复杂，有hash算法的影响，加上计数桶只是存放一个long类型的计数值而已，所以直接赋值引用即可</li></ul><p>参考：<br><a href="https://blog.csdn.net/qq_41737716/article/details/90549847" target="_blank" rel="noopener">https://blog.csdn.net/qq_41737716/article/details/90549847</a><br><a href="https://blog.csdn.net/tp7309/article/details/76532366" target="_blank" rel="noopener">https://blog.csdn.net/tp7309/article/details/76532366</a><br><a href="https://www.jianshu.com/p/81d848ea6c1a" target="_blank" rel="noopener">https://www.jianshu.com/p/81d848ea6c1a</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;浅析JDK1.8 ConcurrentHashMap源码，不得不感慨一下Doug Lea真的太强了！&lt;/p&gt;
&lt;h2 id=&quot;写在开篇&quot;&gt;&lt;a href=&quot;#写在开篇&quot; class=&quot;headerlink&quot; title=&quot;写在开篇&quot;&gt;&lt;/a&gt;写在开篇&lt;/h2&gt;&lt;p&gt;先贴张图
      
    
    </summary>
    
      <category term="Java乐园" scheme="https://kyrie17.github.io/categories/Java%E4%B9%90%E5%9B%AD/"/>
    
    
      <category term="HashMap" scheme="https://kyrie17.github.io/tags/HashMap/"/>
    
  </entry>
  
  <entry>
    <title>Java代理模式</title>
    <link href="https://kyrie17.github.io/2020/03/10/Java%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>https://kyrie17.github.io/2020/03/10/Java代理模式/</id>
    <published>2020-03-10T13:43:00.000Z</published>
    <updated>2020-03-10T11:33:00.730Z</updated>
    
    <content type="html"><![CDATA[<p>Java代理模式: 为其他对象提供一种代理以控制对这个对象的访问。</p><p><a href="https://kyrie17.github.io/2019/04/20/Java反射/">在学习代理模式之前建议先了解Java反射技术</a></p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>为其他对象提供一种代理以控制对这个对象的访问。</p><p>如何理解呢，我先给大家举一个贴近生活的例子：<br>你的公司是一家软件公司，你是一位软件工程师。客户带着需求去找公司显然不会直接和你谈，而是去找商务谈，此时客户会认为商务就代表公司。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/proxy1.png" alt="proxy1" title>                </div>                <div class="image-caption">proxy1</div>            </figure><p>显然客户是通过商务去访问软件工程师的，那么商务（代理对象）的意义在于什么呢？商务可以进行谈判，软件的价格、交付、进度的时间节点等，或者项目完成后的商务追讨应收账单等，这些都不需要软件工程师来处理。因此，代理的作用就是，<strong>在真实对象访问之前或者之后加入对应的逻辑，或者根据其他规则是否使用真实对象</strong>， 显然在这个例子中商务控制了客户对软件工程师的访问。</p><p>经过上面的讨论，我们知道商务和软件工程师是代理和被代理的关系，客户就是经过商务去访问软件工程师的。此时客户就是程序中的调用着，商务就是代理对象，软件工程师就是真实对象。我们需要在调用者调用对象之前产生一个代理对象，而这个代理对象需要和真实对象建立代理关系，所以代理必须分为两个步骤：</p><ol><li>代理对象和真实对象建立代理关系。</li><li>实现代理对象的代理逻辑方法。</li></ol><h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><ul><li><p>抽象角色<br>我们先定义一个工程师的接口，他有实现用户需求的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Icoder</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">implDemands</span><span class="params">(String demandName)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>真实角色<br>接着定义一个Java工程师类，他通过Java语言实现需求。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaCoder</span> <span class="keyword">implements</span> <span class="title">ICoder</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JavaCoder</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">implDemands</span><span class="params">(String demandName)</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">" implemented demand:"</span> + demandName + <span class="string">" in JAVA!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>代理角色<br>委屈一下商务，将其命名为工程师代理类，同时让他实现ICoder接口。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoderProxy</span> <span class="keyword">implements</span> <span class="title">ICoder</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ICoder coder;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CoderProxy</span><span class="params">(ICoder coder)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.coder = coder;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">implDemands</span><span class="params">(String demandName)</span> </span>&#123;</span><br><span class="line">        coder.implDemands(demandName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>上面一个接口，两个类，就实现了代理模式。Are you kidding me？这么简单？是的，就是这么简单。 我们通过一个场景类，模拟用户找商务提需求。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        <span class="comment">//定义一个java码农</span></span><br><span class="line">        ICoder coder = <span class="keyword">new</span> JavaCoder(<span class="string">"Zhang"</span>);</span><br><span class="line">        <span class="comment">//定义一个产品经理</span></span><br><span class="line">        ICoder proxy = <span class="keyword">new</span> CoderProxy(coder);</span><br><span class="line">        <span class="comment">//让产品经理实现一个需求</span></span><br><span class="line">        proxy.implDemands();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行程序结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Zhang implemented demand:Add user manageMent in JAVA!</span><br></pre></td></tr></table></figure></p><p>这样我们就可以知道代理模式的优点了：</p><ol><li><strong>职责清晰</strong>真实角色只需关注业务逻辑的实现，非业务逻辑部分，后期通过代理类完成即可。</li><li><strong>高扩展性</strong> 不管真实角色如何变化，由于接口是固定的，代理类无需做任何改动。</li></ol><h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>前面讲的主要是静态代理。那么什么是动态代理呢？</p><p>假设有这么一个需求，在方法执行前和执行完成后，打印系统时间。这很简单嘛，非业务逻辑，只要在代理类调用真实角色的方法前、后输出时间就可以了。像上例，只有一个implDemands方法，这样实现没有问题。但如果真实角色有10个方法，那么我们要写10遍完全相同的代码。有点追求的码农，肯定会对这种方法感到非常不爽。让我们接着往下看：</p><p>代理类在程序运行时创建的代理方式被称为动态代理。也就是说，代理类并不需要在Java代码中定义，而是在运行时动态生成的。相比于静态代理， 动态代理的优势在于可以很方便的对代理类的函数进行统一的处理，而不用修改每个代理类的函数。对于上例打印时间的需求，通过使用动态代理，我们可以做一个“统一指示”，对所有代理类的方法进行统一处理，而不用逐一修改每个方法。下面我们来具体介绍下如何使用动态代理方式实现我们的需求。</p><p>Java中有多种动态代理技术，接下来我们会谈论两种最常使用的动态代理技术：JDK和CGLIB。</p><h3 id="JDK动态代理"><a href="#JDK动态代理" class="headerlink" title="JDK动态代理"></a>JDK动态代理</h3><p>JDK动态代理是JDK自带的功能，<strong>它必须借助一个接口才能产生代理对象</strong></p><p>与静态代理相比，抽象角色、真实角色都没有变化。变化的只有代理类。因此，抽象角色、真实角色，参考ICoder和JavaCoder。</p><p>在使用动态代理时，我们需要定义一个位于代理类与委托类之间的中介类，也叫动态代理类，这个类被要求实现InvocationHandler接口：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoderDynamicProxy</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span></span>&#123;</span><br><span class="line">     <span class="comment">//真实对象</span></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 建立代理对象和真实对象的代理关系</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> target真实对象</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> 代理对象</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">bind</span><span class="params">(Object target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> proxy 代理对象</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> method 当前调度的方法</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> args 当前方法参数</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> 代理结果返回</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(System.currentTimeMillis());</span><br><span class="line">        <span class="comment">//这行代码相当于调度真实对象的方法（只是通过反射实现而已）</span></span><br><span class="line">        Object result = method.invoke(target, args);</span><br><span class="line">        System.out.println(System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当我们调用代理类对象的方法时，这个“调用”会转送到中介类的invoke方法中，参数method标识了我们具体调用的是代理类的哪个方法，args为这个方法的参数。</p><p>我们通过一个场景类，模拟用户找产品经理更改需求。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicClient</span> </span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">            CoderDynamicProxy jdk = <span class="keyword">new</span> CoderDynamicProxy();</span><br><span class="line">            <span class="comment">//绑定关系</span></span><br><span class="line">            ICoder proxy = (ICoder)jdk.bind(<span class="keyword">new</span> JavaCoder(<span class="string">"Zhang"</span>));</span><br><span class="line">            <span class="comment">//此时Icode对象已经是一个代理对象，它会进入逻辑方法invoke中</span></span><br><span class="line">            proxy.implDemands(<span class="string">"Modify user management"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>执行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1556694750883</span><br><span class="line">Zhang implemented demand:Modify user management in JAVA!</span><br><span class="line">1556694750883</span><br></pre></td></tr></table></figure></p><p>通过上述代码，就实现了，在执行委托类的所有方法前、后打印时间。还是那个熟悉的小张，但我们并没有创建代理类，也没有时间ICoder接口。这就是动态代理。</p><h3 id="CGLIB动态代理"><a href="#CGLIB动态代理" class="headerlink" title="CGLIB动态代理"></a>CGLIB动态代理</h3><p>JDK动态代理必须提供接口才能使用，在一些不能提供接口的环境中，只能采取其他第三方技术，比如：CGLIB动态代理。它的优势在于不需要提供接口，只要一个非抽象类就能实现动态代理。</p><p>我们先修改一下JavaCoder，不实现ICoder接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaCoder</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JavaCoder</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">implDemands</span><span class="params">(String demandName)</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">" implemented demand:"</span> + demandName + <span class="string">" in JAVA!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接下来使用CGLIB动态代理技术，如下代码所示：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoderDynamicProxy</span> <span class="keyword">implements</span> <span class="title">MethodInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成CGLIB代理对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cls -- Class类</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Class类的CGLIB代理对象</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxy</span><span class="params">(Class cls, String name)</span></span>&#123;</span><br><span class="line">        <span class="comment">//CGLIB增强类对象</span></span><br><span class="line">        Enhancer enhancer = <span class="keyword">new</span> Enhancer();</span><br><span class="line">        <span class="comment">//设置增强类型</span></span><br><span class="line">        enhancer.setSuperclass(cls);</span><br><span class="line">        <span class="comment">//定义代理逻辑对象为当前对象，要求当前对象实现MethodInterceptor方法</span></span><br><span class="line">        enhancer.setCallback(<span class="keyword">this</span>);</span><br><span class="line">        <span class="comment">//生成并返回代理对象</span></span><br><span class="line">        <span class="keyword">return</span> enhancer.create(<span class="keyword">new</span> Class[]&#123;String.class&#125;,<span class="keyword">new</span> Object[]&#123;name&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 代理逻辑方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> proxy 代理对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> method 方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> args 方法参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> methodProxy 方法代理</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 代理逻辑返回</span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Object proxy, Method method, Object[] args, MethodProxy methodProxy)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println(System.currentTimeMillis());</span><br><span class="line">        <span class="comment">//这行代码相当于调度真实对象的方法（只是通过反射实现而已）</span></span><br><span class="line">        Object result = methodProxy.invokeSuper(proxy, args);</span><br><span class="line">        System.out.println(System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>测试CGLIB动态代理：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">        CoderDynamicProxy cglib = <span class="keyword">new</span> CoderDynamicProxy();</span><br><span class="line"></span><br><span class="line">        JavaCoder proxy = (JavaCoder)cglib.getProxy(JavaCoder.class, <span class="string">"zhang"</span>);</span><br><span class="line"></span><br><span class="line">        proxy.implDemands(<span class="string">"Modify user management"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>执行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1556694088088</span><br><span class="line">zhang implemented demand:Modify user management in JAVA!</span><br><span class="line">1556694088104</span><br></pre></td></tr></table></figure></p><h2 id="动态代理的优点"><a href="#动态代理的优点" class="headerlink" title="动态代理的优点"></a>动态代理的优点</h2><ol><li>Proxy类的代码量被固定下来，不会因为业务的逐渐庞大而庞大</li><li>可以实现AOP编程，实际上静态代理也可以实现，总的来说，AOP可以算作是代理模式的一个典型应用</li><li>解耦，通过参数就可以判断真实类，不需要事先实例化，更加灵活多变</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Java代理模式: 为其他对象提供一种代理以控制对这个对象的访问。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://kyrie17.github.io/2019/04/20/Java反射/&quot;&gt;在学习代理模式之前建议先了解Java反射技术&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;概述
      
    
    </summary>
    
      <category term="Java乐园" scheme="https://kyrie17.github.io/categories/Java%E4%B9%90%E5%9B%AD/"/>
    
    
      <category term="代理模式" scheme="https://kyrie17.github.io/tags/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>ConcurrentModificationException</title>
    <link href="https://kyrie17.github.io/2020/03/10/ConcurrentModificationException/"/>
    <id>https://kyrie17.github.io/2020/03/10/ConcurrentModificationException/</id>
    <published>2020-03-10T10:23:08.000Z</published>
    <updated>2020-03-11T07:50:08.200Z</updated>
    
    <content type="html"><![CDATA[<p>浅析ConcurrentModificationException出现的原因。</p><h2 id="写在开篇"><a href="#写在开篇" class="headerlink" title="写在开篇"></a>写在开篇</h2><p>ConcurrentModificationException，也就是<strong>并发修改异常</strong>，当我们使用一些Java集合类时，有时需要遍历集合并根据条件remove其中的元素，此时就有可能出现该异常。</p><p>接下来我们通过下面这个例子来分析一下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">0</span>);</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        list.add(<span class="number">2</span>);</span><br><span class="line">        list.add(<span class="number">3</span>);</span><br><span class="line">        list.add(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (Integer i : list) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">2</span>)</span><br><span class="line">                list.remove(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/cme01.png" alt="CME01" title>                </div>                <div class="image-caption">CME01</div>            </figure><p>上图中我们可以看到，在程序输出“3”之前出现了ConcurrentModificationException，也就是说，异常是在遍历下一个元素时抛出的。也就是，删除和遍历产生了冲突。</p><h2 id="从ArrayList内部看异常出现的原因"><a href="#从ArrayList内部看异常出现的原因" class="headerlink" title="从ArrayList内部看异常出现的原因"></a>从ArrayList内部看异常出现的原因</h2><h3 id="ArrayList的遍历"><a href="#ArrayList的遍历" class="headerlink" title="ArrayList的遍历"></a>ArrayList的遍历</h3><p>在例子中使用了foreach遍历元素，实际上，foreach遍历的原理就是使用Iterator进行迭代，可以通过javap进行反编译即可查看到相关的字节码指令（看64行的注释）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">......</span><br><span class="line">54: invokestatic  #19                 // Method java/lang/Integer.valueOf:(I)Ljava/lang/Integer;</span><br><span class="line">57: invokeinterface #25,  2           // InterfaceMethod java/util/List.add:(Ljava/lang/Object;)Z</span><br><span class="line">62: pop</span><br><span class="line">63: aload_1</span><br><span class="line">64: invokeinterface #31,  1           // InterfaceMethod java/util/List.iterator:()Ljava/util/Iterator;</span><br><span class="line">69: astore_3</span><br><span class="line">70: goto          106</span><br><span class="line">73: aload_3</span><br><span class="line">74: invokeinterface #35,  1           // InterfaceMethod java/util/Iterator.next:()Ljava/lang/Object;</span><br><span class="line">79: checkcast     #20                 // class java/lang/Integer</span><br><span class="line">......</span><br></pre></td></tr></table></figure></p><p>这是因为集合类所实现的Collection接口继承了Iterable这个接口，因此都能够使用foreach的方式遍历。在ArrayList所实现的iterator方法中，返回的是ArrayList的内部类Itr。在Itr实现的next方法中，会先判断modCount和expectedModCount两个值是否相等，改变记录下标cursor和lastRet的值，从0下标开始返回ArrayList内部数组的值。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Itr();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">int</span> limit = ArrayList.<span class="keyword">this</span>.size;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> cursor;       <span class="comment">// index of next element to return</span></span><br><span class="line">    <span class="keyword">int</span> lastRet = -<span class="number">1</span>; <span class="comment">// index of last element returned; -1 if no such</span></span><br><span class="line">    <span class="keyword">int</span> expectedModCount = modCount;  <span class="comment">// modCount是AbstractList的成员变量，表示对List的修改次数</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cursor &lt; limit;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        <span class="keyword">int</span> i = cursor;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= limit)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NoSuchElementException();</span><br><span class="line">        Object[] elementData = ArrayList.<span class="keyword">this</span>.elementData;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= elementData.length)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        cursor = i + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> (E) elementData[lastRet = i];</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (lastRet &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException();</span><br><span class="line">        <span class="keyword">if</span> (modCount != expectedModCount)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ArrayList.<span class="keyword">this</span>.remove(lastRet);</span><br><span class="line">            cursor = lastRet;</span><br><span class="line">            lastRet = -<span class="number">1</span>;</span><br><span class="line">            expectedModCount = modCount;</span><br><span class="line">            limit--;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IndexOutOfBoundsException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ConcurrentModificationException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="ArrayList的删除"><a href="#ArrayList的删除" class="headerlink" title="ArrayList的删除"></a>ArrayList的删除</h3><p>在next方法中，首先会判断两个表示修改次数的值是否相等，一次来自List的修改，一次来自Iterator的修改，如果不同就抛出ConcurrentModificationException。</p><p>接着看下ArrayList的remove()：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (elementData[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">            <span class="keyword">if</span> (o.equals(elementData[index])) &#123;</span><br><span class="line">                fastRemove(index);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fastRemove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">        System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                         numMoved);</span><br><span class="line">    elementData[--size] = <span class="keyword">null</span>; <span class="comment">// clear to let GC do its work</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到，通过remove方法删除元素最终是调用的fastRemove()，改变modCount的值，然后通过调用arraycopy把index后的所有元素都往前移动，然后size-1。</p><h3 id="真相大白"><a href="#真相大白" class="headerlink" title="真相大白"></a>真相大白</h3><p>回到例子中，代码<code>list.remove(bean)</code>对List进行了一次修改，那么<code>modCount+1</code>，但没有同步到Itr中的expectedModCount。因此，在<code>list.remove(bean)</code>后，iterator调用<code>next()</code>访问下一个元素时，就会导致<code>modCount != expectedModCount</code>，抛出异常。但是，在Itr的remove方法的实现中，每次操作都会把modCount同步到expectedModCount，这样，就不会抛出异常了。因此，正确的遍历删除如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Iterator&lt;Integer&gt; iterator = list.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    Integer i = iterator.next();</span><br><span class="line">    System.out.println(i);</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">2</span>)</span><br><span class="line">        iterator.remove();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="另一种情况"><a href="#另一种情况" class="headerlink" title="另一种情况"></a>另一种情况</h3><p>如果改变删除的元素为倒数第二个，就是 i = 3 时：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (Integer i : list) &#123;</span><br><span class="line">    System.out.println(i);</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">3</span>)</span><br><span class="line">        list.remove(i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/cme02.png" alt="CME02" title>                </div>                <div class="image-caption">CME02</div>            </figure><br>程序没有抛出ConcurrentModificationException，但是在打印“4”之前程序就结束了，这是为什么呢？</p><p>因为List在删除元素后会减小记录自身元素个数的值，也就是size从5变为了4，而此时，遍历访问的下标由3来到了4，也就是访问i = 3的下标向后移了。Itr的hasNext()此时判断，List已经没有元素可以访问了，于是返回了false。</p><h3 id="多线程下的解决方案"><a href="#多线程下的解决方案" class="headerlink" title="多线程下的解决方案"></a>多线程下的解决方案</h3><p>上面我们已经给出了单线程环境下的解决方案，不过它在多线程下适用吗，我们一起来看看下面这个例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">0</span>);</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        list.add(<span class="number">2</span>);</span><br><span class="line">        list.add(<span class="number">3</span>);</span><br><span class="line">        list.add(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Iterator&lt;Integer&gt; iterator = list.iterator();</span><br><span class="line">                <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">                    Integer integer = iterator.next();</span><br><span class="line">                    System.out.println(integer);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread()&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                Iterator&lt;Integer&gt; iterator = list.iterator();</span><br><span class="line">                <span class="keyword">while</span>(iterator.hasNext())&#123;</span><br><span class="line">                    Integer integer = iterator.next();</span><br><span class="line">                    <span class="keyword">if</span>(integer==<span class="number">2</span>)</span><br><span class="line">                        iterator.remove(); </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;;</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/cme03.png" alt="CME03" title>                </div>                <div class="image-caption">CME03</div>            </figure><br>可能有人说ArrayList是非线程安全的容器，换成Vector就没问题了，实际上换成Vector还是会出现这种错误。</p><p>原因在于，虽然Vector的方法采用了synchronized进行了同步，但是实际上通过Iterator访问的情况下，<strong>每个线程里面返回的是不同的iterator</strong>，也即是说expectedModCount是每个线程私有。假若此时有2个线程，线程1在进行遍历，线程2在进行修改，那么很有可能导致线程2修改后导致Vector中的modCount自增了，线程2的expectedModCount也自增了，但是线程1的expectedModCount没有自增，此时线程1遍历时就会出现expectedModCount不等于modCount的情况了。</p><p>因此一般有2种解决办法：</p><ol><li>在使用iterator迭代的时候使用synchronized或者Lock进行同步</li><li>使用并发容器CopyOnWriteArrayList代替ArrayList和Vector</li></ol><p>参考：<br><a href="https://www.cnblogs.com/dolphin0520/p/3933551.html" target="_blank" rel="noopener">https://www.cnblogs.com/dolphin0520/p/3933551.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;浅析ConcurrentModificationException出现的原因。&lt;/p&gt;
&lt;h2 id=&quot;写在开篇&quot;&gt;&lt;a href=&quot;#写在开篇&quot; class=&quot;headerlink&quot; title=&quot;写在开篇&quot;&gt;&lt;/a&gt;写在开篇&lt;/h2&gt;&lt;p&gt;ConcurrentModif
      
    
    </summary>
    
      <category term="Java乐园" scheme="https://kyrie17.github.io/categories/Java%E4%B9%90%E5%9B%AD/"/>
    
    
      <category term="ConcurrentModificationException" scheme="https://kyrie17.github.io/tags/ConcurrentModificationException/"/>
    
  </entry>
  
  <entry>
    <title>CAS</title>
    <link href="https://kyrie17.github.io/2019/10/10/CAS/"/>
    <id>https://kyrie17.github.io/2019/10/10/CAS/</id>
    <published>2019-10-10T13:33:08.000Z</published>
    <updated>2019-10-10T13:38:59.770Z</updated>
    
    <content type="html"><![CDATA[<p>这篇 <a href="https://juejin.im/post/5ae753d8f265da0ba56753ca" target="_blank" rel="noopener">https://juejin.im/post/5ae753d8f265da0ba56753ca</a> 博客中，已经对CAS做了很详细的解释，这篇文章目的是整理一下思路。</p><h2 id="写在开篇"><a href="#写在开篇" class="headerlink" title="写在开篇"></a>写在开篇</h2><p>CAS（compareAndSwap，比较交换，一种无锁原子算法）过程是这样：它包含 3 个参数 CAS（V，E，N），V表示要更新变量的值，E表示预期值，N表示新值。仅当V值等于E值时，才会将V的值设为N，如果V值和E值不同，则说明已经有其他线程做两个更新，则当前线程则什么都不做。最后，CAS 返回当前V的真实值。CAS 操作时抱着乐观的态度进行的，它总是认为自己可以成功完成操作。</p><h2 id="非阻塞算法"><a href="#非阻塞算法" class="headerlink" title="非阻塞算法"></a>非阻塞算法</h2><p>一个线程失败或挂起，不应该影响其他线程失败或挂起算法。</p><h2 id="底层原理"><a href="#底层原理" class="headerlink" title="底层原理"></a>底层原理</h2><p>归功硬件指令集的发展，硬件保证一个从语义上需要多次操作只通过一条指令就能完成。</p><h2 id="Java如何实现原子操作"><a href="#Java如何实现原子操作" class="headerlink" title="Java如何实现原子操作"></a>Java如何实现原子操作</h2><p>Java提供了java.util.concurrent.atomic包。</p><p>我们可以通过AtomicInteger的compareAndSet简单看一下其内部实现。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">compareAndSet</span><span class="params">(<span class="keyword">int</span> expect, <span class="keyword">int</span> update)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> unsafe.compareAndSwapInt(<span class="keyword">this</span>, valueOffset, expect, update);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>该方法调用了unsafe类（本地方法）的compareAndSwapInt方法，有几个参数，一个是对象自身，一个是该变量的内存地址，一个是期望值，一个是更新值。完全符合我们之前CAS的定义。</p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>CAS存在ABA问题：假设一个变量A，修改为B之后又修改为A，CAS的机制是无法察觉的，但实际上已经被修改过了。如果在基本类型上是没有问题的，但是如果是引用类型呢？这个对象中有多个变量，我们怎么知道有没有被改过？</p><p>聪明的你一定想到了，加个版本号啊。每次修改就检查版本号，如果版本号变了，说明改过，就算你还是A，也不行。</p><p>在java.util.concurrent.atomic包中，通过tomicReference来保证引用的原子性。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这篇 &lt;a href=&quot;https://juejin.im/post/5ae753d8f265da0ba56753ca&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://juejin.im/post/5ae753d8f265da0ba56753
      
    
    </summary>
    
      <category term="Java乐园" scheme="https://kyrie17.github.io/categories/Java%E4%B9%90%E5%9B%AD/"/>
    
    
      <category term="CAS" scheme="https://kyrie17.github.io/tags/CAS/"/>
    
  </entry>
  
  <entry>
    <title>ReentrantLock源码分析-JDK1.8</title>
    <link href="https://kyrie17.github.io/2019/09/24/ReentrantLock%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-JDK1-8/"/>
    <id>https://kyrie17.github.io/2019/09/24/ReentrantLock源码分析-JDK1-8/</id>
    <published>2019-09-24T11:29:18.000Z</published>
    <updated>2019-09-24T11:31:16.870Z</updated>
    
    <content type="html"><![CDATA[<p>浅析JDK1.8 ReentrantLock源码。</p><h2 id="写在开篇"><a href="#写在开篇" class="headerlink" title="写在开篇"></a>写在开篇</h2><p>ReentrantLock–重入锁，是实现Lock接口的一个同步组件。这篇文章建立在熟悉AQS源码的基础上，同时主要从两个方面来分析ReentrantLock：</p><ol><li>重入性的实现原理</li><li>公平锁和非公平锁</li></ol><h2 id="类的继承关系"><a href="#类的继承关系" class="headerlink" title="类的继承关系"></a>类的继承关系</h2><p>ReentrantLock实现了Lock和Serializable接口。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ReentrantLock</span> <span class="keyword">implements</span> <span class="title">Lock</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br></pre></td></tr></table></figure></p><h2 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ReentrantLock通过sync(AQS的子类)来实现锁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Sync sync;</span><br></pre></td></tr></table></figure><p>这里再说明一下ReentrantLock语境下，AQS的成员变量：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * state用来表示该锁被线程重入的次数。</span></span><br><span class="line"><span class="comment"> * 0表示该锁不被任何线程持有</span></span><br><span class="line"><span class="comment"> * 1表示线程恰好持有该锁1次(未重入)</span></span><br><span class="line"><span class="comment"> * 大于1则表示锁被线程重入state次</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> state;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 标识锁被哪个线程持有</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> Thread exclusiveOwnerThread;</span><br></pre></td></tr></table></figure></p><h2 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h2><p>Sync也是一个抽象类，因为锁有非公平和公平的区别。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">5179523762034025860L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 非公平和公平锁的lock()方法有不同的实现。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 非公平的独占锁获取同步状态</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">nonfairTryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Thread current = Thread.currentThread();</span><br><span class="line">        <span class="keyword">int</span> c = getState();</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, acquires)) &#123;</span><br><span class="line">                setExclusiveOwnerThread(current);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">            <span class="keyword">int</span> nextc = c + acquires;</span><br><span class="line">            <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</span><br><span class="line">            setState(nextc);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 尝试释放锁</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> c = getState() - releases;</span><br><span class="line">        <span class="keyword">if</span> (Thread.currentThread() != getExclusiveOwnerThread())</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException();</span><br><span class="line">        <span class="keyword">boolean</span> free = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">            free = <span class="keyword">true</span>;</span><br><span class="line">            setExclusiveOwnerThread(<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        setState(c);</span><br><span class="line">        <span class="keyword">return</span> free;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 默认构造非公平锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReentrantLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    sync = <span class="keyword">new</span> NonfairSync();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fair true构造公平锁，false构造非公平锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReentrantLock</span><span class="params">(<span class="keyword">boolean</span> fair)</span> </span>&#123;</span><br><span class="line">    sync = fair ? <span class="keyword">new</span> FairSync() : <span class="keyword">new</span> NonfairSync();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="非公平锁"><a href="#非公平锁" class="headerlink" title="非公平锁"></a>非公平锁</h2><h3 id="非公平模式加锁流程"><a href="#非公平模式加锁流程" class="headerlink" title="非公平模式加锁流程"></a>非公平模式加锁流程</h3><p>加锁流程从<code>lock.lock()</code>开始<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    sync.lock();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>非公平锁lock的实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 尝试快速获取锁，如果state为0，更新为1</span></span><br><span class="line">    <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">        <span class="comment">// 将当前线程标记为持有锁的线程</span></span><br><span class="line">        setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="comment">// 获取锁失败</span></span><br><span class="line">        acquire(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>acquire()我们在看AQS源码就已经分析过了，再贴一下代码给大家看一下。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class="line">        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">        selfInterrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里我们主要是要看ReentrantLock是怎么实现tryAcquire()的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> nonfairTryAcquire(acquires);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">nonfairTryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Thread current = Thread.currentThread();</span><br><span class="line">    <span class="keyword">int</span> c = getState();</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>) &#123; <span class="comment">// 当前锁未被任何线程持有</span></span><br><span class="line">        <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, acquires)) &#123;</span><br><span class="line">            setExclusiveOwnerThread(current);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123; <span class="comment">// 当前线程就是持有锁的线程</span></span><br><span class="line">        <span class="keyword">int</span> nextc = c + acquires;</span><br><span class="line">        <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>) </span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</span><br><span class="line">        setState(nextc); <span class="comment">// 更新state值</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>关于非公平锁的加锁流程，我们就看到这里，后面的步骤我们在<a href="https://kyrie17.github.io/2019/09/23/AbstractQueuedSynchronizer%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/">AQS源码分析</a>已经分析过了，无非是把当前线程包装成结点插入同步队列，通过循环检测是否能够获取到锁，如果不满足，则可能会被阻塞，直至被唤醒，其流程如下图：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/ReentrantLock01.png" alt="ReentrantLock01" title>                </div>                <div class="image-caption">ReentrantLock01</div>            </figure></p><h3 id="非公平模式解锁流程"><a href="#非公平模式解锁流程" class="headerlink" title="非公平模式解锁流程"></a>非公平模式解锁流程</h3><p>解锁从lock.unlock()开始：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    sync.release(<span class="number">1</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>release()我们在看AQS源码也分析过了，再贴一下代码给大家看一下。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">release</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tryRelease(arg)) &#123;</span><br><span class="line">        Node h = head;</span><br><span class="line">        <span class="keyword">if</span> (h != <span class="keyword">null</span> &amp;&amp; h.waitStatus != <span class="number">0</span>)</span><br><span class="line">            unparkSuccessor(h);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们的重点依旧放在tryRelease()中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> c = getState() - releases; <span class="comment">// 待更新的state</span></span><br><span class="line">    <span class="keyword">if</span> (Thread.currentThread() != getExclusiveOwnerThread())</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException();</span><br><span class="line">    <span class="keyword">boolean</span> free = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>) &#123; <span class="comment">// 持有锁的线程未重入</span></span><br><span class="line">        free = <span class="keyword">true</span>;</span><br><span class="line">        setExclusiveOwnerThread(<span class="keyword">null</span>); <span class="comment">// 清除锁的持有线程标记</span></span><br><span class="line">    &#125;</span><br><span class="line">    setState(c); <span class="comment">// 更新state</span></span><br><span class="line">    <span class="keyword">return</span> free;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接下来继续release()的操作。若当前线程已经完全释放锁,即锁可被其他线程使用,则还应该唤醒后续等待线程，其流程如下：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/ReentrantLock02.png" alt="ReentrantLock02" title>                </div>                <div class="image-caption">ReentrantLock02</div>            </figure></p><h2 id="为什么基于FIFO的同步队列可以实现非公平锁"><a href="#为什么基于FIFO的同步队列可以实现非公平锁" class="headerlink" title="为什么基于FIFO的同步队列可以实现非公平锁"></a>为什么基于FIFO的同步队列可以实现非公平锁</h2><p>看到这里，可能大家还是会有疑问：由FIFO队列的特性知，先加入同步队列等待的线程会比后加入的线程更靠近队列的头部，那么它将比后者更早的被唤醒,它也就能更早的得到锁。从这个意义上,对于在同步队列中等待的线程而言，它们获得锁的顺序和加入同步队列的顺序一致，这显然是一种公平模式。那为什么说这是一种非公平的模式呢？</p><p>但线程并非只有在加入队列后才有机会获得锁,哪怕同步队列中已有线程在等待，非公平锁的不公平之处就在于此。回看下非公平锁的加锁流程,线程在进入同步队列等待之前有两次抢占锁的机会：</p><ol><li>第一次是非重入式的获取锁,只有在当前锁未被任何线程占有(包括自身)时才能成功</li><li>第二次是在进入同步队列前,包含所有情况的获取锁的方式</li></ol><p>只有这两次获取锁都失败后，线程才会构造结点并加入同步队列等待。而线程释放锁时是先释放锁(修改state值),然后才唤醒后继结点的线程的。试想下这种情况，线程A已经释放锁,但还没来得及唤醒后继线程C，而这时另一个线程B刚好尝试获取锁，此时锁恰好不被任何线程持有，它将成功获取锁而不用加入队列等待。线程C被唤醒尝试获取锁，而此时锁已经被线程B抢占，故而其获取失败并继续在队列中等待。</p><h2 id="公平锁"><a href="#公平锁" class="headerlink" title="公平锁"></a>公平锁</h2><p>现在我们已经知道了为什么会出现非公平锁了，那么我们就接着看一下ReentrantLock是怎么实现公平锁的吧。</p><p>从公平锁加锁的入口开始：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    acquire(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对比非公平锁，少了非重入式获取锁的方法,这是第一个不同点。</p><p>接着看tryAcquire()：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Thread current = Thread.currentThread();</span><br><span class="line">    <span class="keyword">int</span> c = getState();</span><br><span class="line">    <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!hasQueuedPredecessors() &amp;&amp;</span><br><span class="line">            compareAndSetState(<span class="number">0</span>, acquires)) &#123;</span><br><span class="line">            setExclusiveOwnerThread(current);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">        <span class="keyword">int</span> nextc = c + acquires;</span><br><span class="line">        <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</span><br><span class="line">        setState(nextc);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在真正CAS获取锁之前加了判断，我们看一下<code>hasQueuedPredecessors()</code>：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">hasQueuedPredecessors</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Node t = tail; </span><br><span class="line">    Node h = head;</span><br><span class="line">    Node s;</span><br><span class="line">    <span class="keyword">return</span> h != t &amp;&amp;</span><br><span class="line">        ((s = h.next) == <span class="keyword">null</span> || s.thread != Thread.currentThread());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>从方法名我们就可知道这是判断队列中是否有优先级更高的等待线程，队列中哪个线程优先级最高？由于头结点是当前获取锁的线程，所以队列中的第二个结点代表的线程优先级最高。</p><h2 id="为什么非公平锁性能好"><a href="#为什么非公平锁性能好" class="headerlink" title="为什么非公平锁性能好"></a>为什么非公平锁性能好</h2><p>非公平锁对锁的竞争是抢占式的(队列中线程除外)，线程在进入等待队列前可以进行两次尝试，这大大增加了获取锁的机会。这种好处体现在两个方面：</p><ol><li>线程不必加入等待队列就可以获得锁，不仅免去了构造结点并加入队列的繁琐操作，同时也节省了线程阻塞唤醒的开销，线程阻塞和唤醒涉及到线程上下文的切换和操作系统的系统调用，是非常耗时的。在高并发情况下，如果线程持有锁的时间非常短，短到线程入队阻塞的过程超过线程持有并释放锁的时间开销，那么这种抢占式特性对并发性能的提升会更加明显。</li><li>减少CAS竞争。如果线程必须要加入阻塞队列才能获取锁，那入队时CAS竞争将变得异常激烈，CAS操作虽然不会导致失败线程挂起，但不断失败重试导致的对CPU的浪费也不能忽视。除此之外，加锁流程中至少有两处通过将某些特殊情况提前来减少CAS操作的竞争，增加并发情况下的性能。<br>一处就是获取锁时将非重入的情况提前：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">        setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        acquire(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>另一处就是入队的操作,将同步队列非空的情况提前处理:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">addWaiter</span><span class="params">(Node mode)</span> </span>&#123;</span><br><span class="line">    Node node = <span class="keyword">new</span> Node(Thread.currentThread(), mode);</span><br><span class="line">    <span class="comment">// Try the fast path of enq; backup to full enq on failure</span></span><br><span class="line">    Node pred = tail;</span><br><span class="line">    <span class="keyword">if</span> (pred != <span class="keyword">null</span>) &#123;</span><br><span class="line">        node.prev = pred;</span><br><span class="line">        <span class="keyword">if</span> (compareAndSetTail(pred, node)) &#123;</span><br><span class="line">            pred.next = node;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    enq(node);</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>参考：<a href="https://www.cnblogs.com/takumicx/p/9402021.html" target="_blank" rel="noopener">https://www.cnblogs.com/takumicx/p/9402021.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;浅析JDK1.8 ReentrantLock源码。&lt;/p&gt;
&lt;h2 id=&quot;写在开篇&quot;&gt;&lt;a href=&quot;#写在开篇&quot; class=&quot;headerlink&quot; title=&quot;写在开篇&quot;&gt;&lt;/a&gt;写在开篇&lt;/h2&gt;&lt;p&gt;ReentrantLock–重入锁，是实现Lock接口的一
      
    
    </summary>
    
      <category term="Java乐园" scheme="https://kyrie17.github.io/categories/Java%E4%B9%90%E5%9B%AD/"/>
    
    
      <category term="ReentrantLock" scheme="https://kyrie17.github.io/tags/ReentrantLock/"/>
    
  </entry>
  
  <entry>
    <title>ConcurrentLinkedQueue源码分析-JDK1.8</title>
    <link href="https://kyrie17.github.io/2019/09/23/ConcurrentLinkedQueue%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>https://kyrie17.github.io/2019/09/23/ConcurrentLinkedQueue源码分析/</id>
    <published>2019-09-23T13:46:40.000Z</published>
    <updated>2019-09-23T13:54:25.903Z</updated>
    
    <content type="html"><![CDATA[<p>浅析JDK1.8 ConcurrentLinkedQueue源码。</p><h2 id="写在开篇"><a href="#写在开篇" class="headerlink" title="写在开篇"></a>写在开篇</h2><p>ConcurrentLinkedQueue是一个基于链表的无界非阻塞队列，并且是线程安全的，它采用的是先进先出的规则，当我们增加一个元素时，它会添加到队列的末尾，当我们取一个元素时，它会返回一个队列头部的元素。</p><h2 id="类的继承关系"><a href="#类的继承关系" class="headerlink" title="类的继承关系"></a>类的继承关系</h2><p>ConcurrentLinkedQueue继承于AbstractQueue。实现了Queue（规定了Queue的操作规范）、Serializable（可序列化）这两个接口。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcurrentLinkedQueue</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractQueue</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">Queue</span>&lt;<span class="title">E</span>&gt;, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br></pre></td></tr></table></figure></p><h2 id="存储结点–Node"><a href="#存储结点–Node" class="headerlink" title="存储结点–Node"></a>存储结点–Node</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">       <span class="keyword">volatile</span> E item; <span class="comment">// 目标元素</span></span><br><span class="line">       <span class="keyword">volatile</span> Node&lt;E&gt; next; <span class="comment">// 当前Node下一个元素</span></span><br><span class="line">       </span><br><span class="line">       Node(E item) &#123;</span><br><span class="line">           UNSAFE.putObject(<span class="keyword">this</span>, itemOffset, item);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">        * 表示设置当前Node的item值</span></span><br><span class="line"><span class="comment">        * 需要两个参数：期望值（cmp）和目标值（val）</span></span><br><span class="line"><span class="comment">        * 当当前值等于cmp时，就会将目标设置为val</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="function"><span class="keyword">boolean</span> <span class="title">casItem</span><span class="params">(E cmp, E val)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> UNSAFE.compareAndSwapObject(<span class="keyword">this</span>, itemOffset, cmp, val);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">void</span> <span class="title">lazySetNext</span><span class="params">(Node&lt;E&gt; val)</span> </span>&#123;</span><br><span class="line">           UNSAFE.putOrderedObject(<span class="keyword">this</span>, nextOffset, val);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * casNext和casItem类似，但它用于设置next字段</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">       <span class="function"><span class="keyword">boolean</span> <span class="title">casNext</span><span class="params">(Node&lt;E&gt; cmp, Node&lt;E&gt; val)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> UNSAFE.compareAndSwapObject(<span class="keyword">this</span>, nextOffset, cmp, val);</span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h2><p>ConcurrentLinkedQueue由head节点和tail节点组成，每个节点（Node）由节点元素（item）和指向下一个节点的引用(next)组成，节点与节点之间就是通过这个next关联起来，从而组成一张链表结构的队列。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Node&lt;E&gt; head;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Node&lt;E&gt; tail;</span><br></pre></td></tr></table></figure></p><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 默认构造方法</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ConcurrentLinkedQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       head = tail = <span class="keyword">new</span> Node&lt;E&gt;(<span class="keyword">null</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 以一个实现了Collection接口的集合类，来构造ConcurrentLinkedQueue</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ConcurrentLinkedQueue</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">       Node&lt;E&gt; h = <span class="keyword">null</span>, t = <span class="keyword">null</span>;</span><br><span class="line">       <span class="keyword">for</span> (E e : c) &#123;</span><br><span class="line">           checkNotNull(e);</span><br><span class="line">           Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;E&gt;(e);</span><br><span class="line">           <span class="keyword">if</span> (h == <span class="keyword">null</span>)</span><br><span class="line">               h = t = newNode;</span><br><span class="line">           <span class="keyword">else</span> &#123;</span><br><span class="line">               t.lazySetNext(newNode);</span><br><span class="line">               t = newNode;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span> (h == <span class="keyword">null</span>)</span><br><span class="line">           h = t = <span class="keyword">new</span> Node&lt;E&gt;(<span class="keyword">null</span>);</span><br><span class="line">       head = h;</span><br><span class="line">       tail = t;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="Queue接口的实现"><a href="#Queue接口的实现" class="headerlink" title="Queue接口的实现"></a>Queue接口的实现</h2><h3 id="add"><a href="#add" class="headerlink" title="add()"></a>add()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> offer(e);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>接下来看一下add()中的核心方法offer()。这个方法没有任何锁操作，线程安全完全由CAS操作和队列的算法来保证，整个方法的核心是for循环，这个循环没有出口，直到尝试成功。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    checkNotNull(e);</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;E&gt;(e);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (Node&lt;E&gt; t = tail, p = t;;) &#123;</span><br><span class="line">        Node&lt;E&gt; q = p.next;</span><br><span class="line">        <span class="keyword">if</span> (q == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// p是最后一个结点</span></span><br><span class="line">            <span class="keyword">if</span> (p.casNext(<span class="keyword">null</span>, newNode)) &#123;</span><br><span class="line">                <span class="comment">// 每两次更新一下tail</span></span><br><span class="line">                <span class="keyword">if</span> (p != t) </span><br><span class="line">                    casTail(t, newNode);  </span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// CAS竞争失败，再次尝试</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p == q) <span class="comment">// 遇到哨兵结点，都从head开始遍历</span></span><br><span class="line">            <span class="comment">// 但如果tail被修改，则使用tail（因为可能被修改正确了）</span></span><br><span class="line">            p = (t != (t = tail)) ? t : head;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="comment">// 取下一个结点或者最后一个结点</span></span><br><span class="line">            p = (p != t &amp;&amp; t != (t = tail)) ? t : q;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>看到这里，或许大家会有两个疑问：</p><ol><li>为什么会出现<em>p == q</em>（即遇到哨兵结点）的情况？</li><li><code>p = (t != (t = tail)) ? t : head;</code>这行代码是什么情况？</li></ol><p>关于第一个问题，先简单解释一下：所谓哨兵结点，就是next指向自己的结点。这种结点在队列中存在的意义不大，主要表示删除的结点，或者空结点。当遇到哨兵结点时，由于无法通过next取得后续的结点，因此很可能直接返回head，期望从链表头部开始遍历，进一步找到链表末尾。一旦在执行过程中发生tail被其他线程修改的情况，则进行一次“打赌”，使用新的tail作为链表末尾（这样就避免了重新查找tail的开销）。</p><p>第二个问题：这句代码虽然只有短短的一行，但是包含的信息比较多。首先“!=”并不是原子操作，它是可以被中断的。也就是说，在执行“!=”时，程序会先取得t的值，再执行t=tail，并取得新的t的值，然后比较这两个值是否相等。在单线程时，t!=t这种语句显然不会成立。但是在并发环境中，有可能在获得左边的t值后，右边的t值被其他线程修改。这样，t!=t就可能成立了，这里就是这种情况。如果在比较的过程中，tail被其他线程修改，当它再次赋值给t时，就会导致等式左边的t和右边的t不同。如果两个t不相同，表示tail在中途被其他线程篡改。这时，我们就可以用新的tail作为链表的结尾，也就是这里等式右边的t。但如果没有被修改，则返回head，要求从头部开始，重新查找尾部。</p><h3 id="poll"><a href="#poll" class="headerlink" title="poll()"></a>poll()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">poll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       restartFromHead:</span><br><span class="line">       <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">       <span class="comment">// p节点表示首节点，即需要出队的节点</span></span><br><span class="line">           <span class="keyword">for</span> (Node&lt;E&gt; h = head, p = h, q;;) &#123;</span><br><span class="line">               E item = p.item;</span><br><span class="line"><span class="comment">// 如果p节点的元素不为null，则通过CAS来设置p节点引用的元素为null，如果成功则返回p节点的元素</span></span><br><span class="line">               <span class="keyword">if</span> (item != <span class="keyword">null</span> &amp;&amp; p.casItem(item, <span class="keyword">null</span>)) &#123;</span><br><span class="line">                   <span class="comment">// 如果p != h，则更新head</span></span><br><span class="line">                   <span class="keyword">if</span> (p != h) </span><br><span class="line">                       updateHead(h, ((q = p.next) != <span class="keyword">null</span>) ? q : p);</span><br><span class="line">                   <span class="keyword">return</span> item;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">// 如果头节点的元素为空或头节点发生了变化，这说明头节点已经被另外一个线程修改了。</span></span><br><span class="line">               <span class="comment">// 那么获取p节点的下一个节点，如果p节点的下一节点为null，则表明队列已经空了</span></span><br><span class="line">               <span class="keyword">else</span> <span class="keyword">if</span> ((q = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                   updateHead(h, p);</span><br><span class="line">                   <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="comment">// p == q，则使用新的head重新开始</span></span><br><span class="line">               <span class="keyword">else</span> <span class="keyword">if</span> (p == q)</span><br><span class="line">                   <span class="keyword">continue</span> restartFromHead;</span><br><span class="line">               <span class="comment">// 如果下一个元素不为空，则将头节点的下一个节点设置成头节点</span></span><br><span class="line">               <span class="keyword">else</span></span><br><span class="line">                   p = q;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>在这个地方我们停下来分析一下，哨兵结点是如何产生的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ConcurrentLinkedQueue&lt;String&gt; q = <span class="keyword">new</span> ConcurrentLinkedQueue&lt;String&gt;();</span><br><span class="line">q.add(<span class="string">"1"</span>);</span><br><span class="line">q.poll();</span><br></pre></td></tr></table></figure><p>对于上面例子的poll()，由于队列中只有一个元素，根据前文的描述，此时tail并没有更新，而是指向head相同的位置。而此时，head本身的item域为null，其next为列表的第一个元素。故在第一个循环中，代码直接走到最后的else，将p赋值为q，而q就是p.next，也就是当前列表中的第一个元素。接着，在第2轮循环中，p.item显然不为null。因此，代码应该可以顺利进入第一个if块（如果CAS操作成功）。进入第一个if块，也意味着p的item域被设置为null。同时，此时p和h是不相等的。故执行了<code>updataHead()</code>，其实现如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">updateHead</span><span class="params">(Node&lt;E&gt; h, Node&lt;E&gt; p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (h != p &amp;&amp; casHead(h, p))</span><br><span class="line">        h.lazySetNext(h);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到，在updateHead()中将p作为新的链表头部（通过casHead()实现），而原有的head就被设置为哨兵了（通过lazySetNext()实现）。</p><p>这样一个哨兵结点就产生了，而由于此时原有的head头部和tail实际上就是同一个元素。因此，再次用offer()插入元素时，就会遇到这个tail，也就是哨兵。这就是offer()中<code>else if (p == q)</code>这行代码的意义。</p><h3 id="peek"><a href="#peek" class="headerlink" title="peek()"></a>peek()</h3><p>获取链表的首部元素。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       restartFromHead:</span><br><span class="line">       <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">           <span class="keyword">for</span> (Node&lt;E&gt; h = head, p = h, q;;) &#123;</span><br><span class="line">               E item = p.item;</span><br><span class="line">               <span class="keyword">if</span> (item != <span class="keyword">null</span> || (q = p.next) == <span class="keyword">null</span>) &#123;</span><br><span class="line">                   updateHead(h, p);</span><br><span class="line">                   <span class="keyword">return</span> item;</span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">else</span> <span class="keyword">if</span> (p == q)</span><br><span class="line">                   <span class="keyword">continue</span> restartFromHead;</span><br><span class="line">               <span class="keyword">else</span></span><br><span class="line">                   p = q;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>从源码中可以看到，peek操作会改变head指向，执行peek()方法后head会指向第一个具有非空元素的节点。</p><h3 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除的元素不能为null</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (o != <span class="keyword">null</span>) &#123;</span><br><span class="line">           Node&lt;E&gt; next, pred = <span class="keyword">null</span>;</span><br><span class="line">           <span class="keyword">for</span> (Node&lt;E&gt; p = first(); p != <span class="keyword">null</span>; pred = p, p = next) &#123;</span><br><span class="line">               <span class="keyword">boolean</span> removed = <span class="keyword">false</span>;</span><br><span class="line">               E item = p.item;</span><br><span class="line">               <span class="keyword">if</span> (item != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 若不匹配，则获取next节点继续匹配</span></span><br><span class="line">                   <span class="keyword">if</span> (!o.equals(item)) &#123;</span><br><span class="line">                       next = succ(p);</span><br><span class="line">                       <span class="keyword">continue</span>;</span><br><span class="line">                   &#125;</span><br><span class="line">                   <span class="comment">// 若匹配，则通过CAS操作将对应节点元素置为null</span></span><br><span class="line">                   removed = p.casItem(item, <span class="keyword">null</span>);</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取删除节点的后继节点</span></span><br><span class="line">               next = succ(p);</span><br><span class="line">               <span class="comment">// 将被删除的节点移除队列</span></span><br><span class="line">               <span class="keyword">if</span> (pred != <span class="keyword">null</span> &amp;&amp; next != <span class="keyword">null</span>) <span class="comment">// unlink</span></span><br><span class="line">                   pred.casNext(p, next);</span><br><span class="line">               <span class="keyword">if</span> (removed)</span><br><span class="line">                   <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="size"><a href="#size" class="headerlink" title="size()"></a>size()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (Node&lt;E&gt; p = first(); p != <span class="keyword">null</span>; p = succ(p))</span><br><span class="line">        <span class="keyword">if</span> (p.item != <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">if</span> (++count == Integer.MAX_VALUE)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>size()用来获取当前队列的元素个数，但在并发环境中，其结果可能不精确，因为整个过程都没有加锁，所以从调用size()到返回结果期间有可能增删元素，导致统计的元素个数不精确。</p><h2 id="为什么每两次更新一下tail"><a href="#为什么每两次更新一下tail" class="headerlink" title="为什么每两次更新一下tail"></a>为什么每两次更新一下tail</h2><p>为什么不让tail结点永远成为队列的尾结点，实现代码会更少且逻辑也会更加清晰？</p><p>这是因为，如果让tail永远成为队列的尾结点，则每次都需要使用循环CAS更新tail结点，如果能减少更新tail结点的次数，入队性能岂不更高？所以说并不是每次入队都需要更新尾结点，只有tail结点和尾结点不相等的情况下才更新，减少更新，提高效率。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过以上的分析，大家应该可以明显感觉到，不使用锁而单纯使用CAS操作会要求在应用层面保证线程安全，并处理一些可能存在不一致的问题，大大增加了程序设计和实现的难度。它带来的好处就是使性能飞速提升，因此，在有些场合也是值得的。</p><p>参考：</p><ul><li>《Java高并发程序设计》</li><li><a href="https://blog.csdn.net/qq_38293564/article/details/80798310" target="_blank" rel="noopener">https://blog.csdn.net/qq_38293564/article/details/80798310</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;浅析JDK1.8 ConcurrentLinkedQueue源码。&lt;/p&gt;
&lt;h2 id=&quot;写在开篇&quot;&gt;&lt;a href=&quot;#写在开篇&quot; class=&quot;headerlink&quot; title=&quot;写在开篇&quot;&gt;&lt;/a&gt;写在开篇&lt;/h2&gt;&lt;p&gt;ConcurrentLinkedQueue
      
    
    </summary>
    
      <category term="Java乐园" scheme="https://kyrie17.github.io/categories/Java%E4%B9%90%E5%9B%AD/"/>
    
    
      <category term="ConcurrentLinkedQueue" scheme="https://kyrie17.github.io/tags/ConcurrentLinkedQueue/"/>
    
  </entry>
  
  <entry>
    <title>Hashtable源码分析-JDK1.8</title>
    <link href="https://kyrie17.github.io/2019/09/23/Hashtable%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-JDK1-8/"/>
    <id>https://kyrie17.github.io/2019/09/23/Hashtable源码分析-JDK1-8/</id>
    <published>2019-09-23T08:50:36.000Z</published>
    <updated>2019-09-23T12:15:23.503Z</updated>
    
    <content type="html"><![CDATA[<p>浅析JDK1.8 Hashtable源码。</p><h2 id="写在开篇"><a href="#写在开篇" class="headerlink" title="写在开篇"></a>写在开篇</h2><p>简单介绍一下Hashtable：</p><ol><li>和HashMap一样，Hashtable 也是一个散列表，它存储的内容是键值对(key-value)映射</li><li>Hashtable是线程安全的，HashMap是非线程安全的</li><li>Hashtable的key、value都不可以为null</li></ol><h2 id="类的继承关系"><a href="#类的继承关系" class="headerlink" title="类的继承关系"></a>类的继承关系</h2><p>Hashtable继承于Dictionary，实现了Map（规定了Map的操作规范）、Cloneable（可拷贝）、java.io.Serializable（可序列化）这几个接口。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hashtable</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">Dictionary</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br></pre></td></tr></table></figure></p><h2 id="存储结点–Entry"><a href="#存储结点–Entry" class="headerlink" title="存储结点–Entry"></a>存储结点–Entry</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">       <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">       <span class="keyword">final</span> K key;</span><br><span class="line">       V value;</span><br><span class="line">       Entry&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">protected</span> <span class="title">Entry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, Entry&lt;K,V&gt; next)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">this</span>.hash = hash;</span><br><span class="line">           <span class="keyword">this</span>.key =  key;</span><br><span class="line">           <span class="keyword">this</span>.value = value;</span><br><span class="line">           <span class="keyword">this</span>.next = next;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Hashtable采用数组+链表的存储结构</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">transient</span> Entry&lt;?,?&gt;[] table;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * table中键值对的个数</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 阈值</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> threshold;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 负载因子</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">float</span> loadFactor;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Hashtable结构上修改（比如put，remove等操作）的的次数，保证并发访问</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">int</span> modCount = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 使用指定的初始容量大小和指定加载因子构建Hashtable</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Hashtable</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+</span><br><span class="line">                                              initialCapacity);</span><br><span class="line">       <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Load: "</span>+loadFactor);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (initialCapacity==<span class="number">0</span>)</span><br><span class="line">           initialCapacity = <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">       table = <span class="keyword">new</span> Entry&lt;?,?&gt;[initialCapacity];</span><br><span class="line">       threshold = (<span class="keyword">int</span>)Math.min(initialCapacity * loadFactor, MAX_ARRAY_SIZE + <span class="number">1</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 使用指定的初始容量大小和默认的加载因子0.75构造Hashtable</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Hashtable</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>(initialCapacity, <span class="number">0.75f</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 使用Hashtable的默认容量大小11和默认加载因子0.75构造Hashtable</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Hashtable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>(<span class="number">11</span>, <span class="number">0.75f</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 以实现了Map接口的集合类构造Hashtable</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">Hashtable</span><span class="params">(Map&lt;? extends K, ? extends V&gt; t)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>(Math.max(<span class="number">2</span>*t.size(), <span class="number">11</span>), <span class="number">0.75f</span>);</span><br><span class="line">       putAll(t);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>可以看到：</p><ul><li>HashMap对底层数组采取的懒加载，即当执行第一次插入时才会创建数组，而Hashtable在初始化时就创建了数组</li><li>HashMap中数组的默认初始容量是16，并且必须的是2的指数倍数，而Hashtable中默认的初始容量是11，并且不要求必须是2的指数倍数。 </li></ul><h2 id="Map接口的实现"><a href="#Map接口的实现" class="headerlink" title="Map接口的实现"></a>Map接口的实现</h2><h3 id="put"><a href="#put" class="headerlink" title="put()"></a>put()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (value == <span class="keyword">null</span>) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       Entry&lt;?,?&gt; tab[] = table;</span><br><span class="line">       <span class="keyword">int</span> hash = key.hashCode();</span><br><span class="line">       <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">       </span><br><span class="line">       Entry&lt;K,V&gt; entry = (Entry&lt;K,V&gt;)tab[index];</span><br><span class="line">       <span class="comment">// 遍历下标为index的链表</span></span><br><span class="line">       <span class="keyword">for</span>(; entry != <span class="keyword">null</span> ; entry = entry.next) &#123;</span><br><span class="line">       <span class="comment">// 存在键值相同的元素，则替换旧值</span></span><br><span class="line">           <span class="keyword">if</span> ((entry.hash == hash) &amp;&amp; entry.key.equals(key)) &#123;</span><br><span class="line">               V old = entry.value;</span><br><span class="line">               entry.value = value;</span><br><span class="line">               <span class="keyword">return</span> old;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果没有找到相同键值，那么添加新节点</span></span><br><span class="line">       addEntry(hash, key, value, index);</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>接着看下addEntry()<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">       modCount++;</span><br><span class="line"></span><br><span class="line">       Entry&lt;?,?&gt; tab[] = table;</span><br><span class="line">       <span class="keyword">if</span> (count &gt;= threshold) &#123;</span><br><span class="line">           <span class="comment">// 扩容</span></span><br><span class="line">           rehash();</span><br><span class="line"></span><br><span class="line">           tab = table; <span class="comment">// 更新tab</span></span><br><span class="line">           hash = key.hashCode(); <span class="comment">// 更新hash</span></span><br><span class="line">           index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length; <span class="comment">// 更新下标</span></span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 头插法插入新元素</span></span><br><span class="line">       Entry&lt;K,V&gt; e = (Entry&lt;K,V&gt;) tab[index];</span><br><span class="line">       tab[index] = <span class="keyword">new</span> Entry&lt;&gt;(hash, key, value, e);</span><br><span class="line">       count++;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>再看看rehash()：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">rehash</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> oldCapacity = table.length;</span><br><span class="line">       Entry&lt;?,?&gt;[] oldMap = table;</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 扩容操作</span></span><br><span class="line">       <span class="keyword">int</span> newCapacity = (oldCapacity &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>) &#123;</span><br><span class="line">           <span class="keyword">if</span> (oldCapacity == MAX_ARRAY_SIZE)</span><br><span class="line">               <span class="keyword">return</span>;</span><br><span class="line">           newCapacity = MAX_ARRAY_SIZE;</span><br><span class="line">       &#125;</span><br><span class="line">       Entry&lt;?,?&gt;[] newMap = <span class="keyword">new</span> Entry&lt;?,?&gt;[newCapacity];</span><br><span class="line"></span><br><span class="line">       modCount++;</span><br><span class="line">       threshold = (<span class="keyword">int</span>)Math.min(newCapacity * loadFactor, MAX_ARRAY_SIZE + <span class="number">1</span>);</span><br><span class="line">       table = newMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 采用头插法将原数组元素复制到新数组</span></span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = oldCapacity ; i-- &gt; <span class="number">0</span> ;) &#123;</span><br><span class="line">           <span class="keyword">for</span> (Entry&lt;K,V&gt; old = (Entry&lt;K,V&gt;)oldMap[i] ; old != <span class="keyword">null</span> ; ) &#123;</span><br><span class="line">               Entry&lt;K,V&gt; e = old;</span><br><span class="line">               old = old.next;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">int</span> index = (e.hash &amp; <span class="number">0x7FFFFFFF</span>) % newCapacity;</span><br><span class="line">               e.next = (Entry&lt;K,V&gt;)newMap[index];</span><br><span class="line">               newMap[index] = e;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h3 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">       Entry&lt;?,?&gt; tab[] = table;</span><br><span class="line">       <span class="keyword">int</span> hash = key.hashCode();</span><br><span class="line">       <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">       <span class="comment">// 遍历下标为index的链表</span></span><br><span class="line">       <span class="keyword">for</span> (Entry&lt;?,?&gt; e = tab[index] ; e != <span class="keyword">null</span> ; e = e.next) &#123;</span><br><span class="line">       <span class="comment">// 如果键值相同，则返回</span></span><br><span class="line">           <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;</span><br><span class="line">               <span class="keyword">return</span> (V)e.value;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h3><p>remove()先查询键值相同的元素，如果存在则删除结点，同时modCount++，count–。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">       Entry&lt;?,?&gt; tab[] = table;</span><br><span class="line">       <span class="keyword">int</span> hash = key.hashCode();</span><br><span class="line">       <span class="keyword">int</span> index = (hash &amp; <span class="number">0x7FFFFFFF</span>) % tab.length;</span><br><span class="line">       </span><br><span class="line">       Entry&lt;K,V&gt; e = (Entry&lt;K,V&gt;)tab[index];</span><br><span class="line">       <span class="keyword">for</span>(Entry&lt;K,V&gt; prev = <span class="keyword">null</span> ; e != <span class="keyword">null</span> ; prev = e, e = e.next) &#123;</span><br><span class="line">           <span class="keyword">if</span> ((e.hash == hash) &amp;&amp; e.key.equals(key)) &#123;</span><br><span class="line">               modCount++;</span><br><span class="line">               <span class="keyword">if</span> (prev != <span class="keyword">null</span>) &#123;</span><br><span class="line">                   prev.next = e.next;</span><br><span class="line">               &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                   tab[index] = e.next;</span><br><span class="line">               &#125;</span><br><span class="line">               count--;</span><br><span class="line">               V oldValue = e.value;</span><br><span class="line">               e.value = <span class="keyword">null</span>;</span><br><span class="line">               <span class="keyword">return</span> oldValue;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;浅析JDK1.8 Hashtable源码。&lt;/p&gt;
&lt;h2 id=&quot;写在开篇&quot;&gt;&lt;a href=&quot;#写在开篇&quot; class=&quot;headerlink&quot; title=&quot;写在开篇&quot;&gt;&lt;/a&gt;写在开篇&lt;/h2&gt;&lt;p&gt;简单介绍一下Hashtable：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;和Ha
      
    
    </summary>
    
      <category term="Java乐园" scheme="https://kyrie17.github.io/categories/Java%E4%B9%90%E5%9B%AD/"/>
    
    
      <category term="Hashtable" scheme="https://kyrie17.github.io/tags/Hashtable/"/>
    
  </entry>
  
  <entry>
    <title>HashSet源码分析-JDK1.8</title>
    <link href="https://kyrie17.github.io/2019/09/23/HashSet%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-JDK1-8/"/>
    <id>https://kyrie17.github.io/2019/09/23/HashSet源码分析-JDK1-8/</id>
    <published>2019-09-23T06:54:19.000Z</published>
    <updated>2019-09-23T07:24:55.586Z</updated>
    
    <content type="html"><![CDATA[<p>浅析JDK1.8 HashSet源码。</p><h2 id="写在开篇"><a href="#写在开篇" class="headerlink" title="写在开篇"></a>写在开篇</h2><p>HashSet源码比较简单，所以文章就会比较过水。</p><p>先简单介绍一下HashSet：</p><ol><li>实现了Set接口,不允许元素重复</li><li>底层实现是基于HashMap的，它利用HashMap中的key存储数据，使用成员变量PRESENT来填充value</li><li>是线程不安全的</li></ol><h2 id="类的继承关系"><a href="#类的继承关系" class="headerlink" title="类的继承关系"></a>类的继承关系</h2><p>HashSet继承AbstractSet抽象类，实现了Set（规定了Set的操作规范）、Cloneable（可拷贝）、Serializable（可序列化）这几个接口。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashSet</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Set</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br></pre></td></tr></table></figure></p><h2 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用HashMap来保存HashSet的元素</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> HashMap&lt;E,Object&gt; map;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 由于Set只使用到了HashMap的key，所以此处定义一个静态的常量Object类，来充当HashMap的value</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object PRESENT = <span class="keyword">new</span> Object();</span><br></pre></td></tr></table></figure><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 使用HashMap的默认容量大小16和默认加载因子0.75初始化map，构造HashSet</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 以实现了Collection接口的集合类初始化map，来构造HashSet</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">       map = <span class="keyword">new</span> HashMap&lt;&gt;(Math.max((<span class="keyword">int</span>) (c.size()/.<span class="number">75f</span>) + <span class="number">1</span>, <span class="number">16</span>));</span><br><span class="line">       addAll(c);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 使用指定的初始容量大小和加载因子初始化map，构造HashSet使用指定的初始容量大小和默认的加载因子0.75初始化map，构造一个HashSet</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">       map = <span class="keyword">new</span> HashMap&lt;&gt;(initialCapacity, loadFactor);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**使用指定的初始容量大小和默认的加载因子0.75初始化map，构造HashSet</span></span><br><span class="line"><span class="comment">    * </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">HashSet</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">       map = <span class="keyword">new</span> HashMap&lt;&gt;(initialCapacity);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 不对外公开的一个构造方法（默认default修饰）</span></span><br><span class="line"><span class="comment">    * 底层构造的是LinkedHashMap</span></span><br><span class="line"><span class="comment">    * dummy只是一个标示参数，无具体意义</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   HashSet(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor, <span class="keyword">boolean</span> dummy) &#123;</span><br><span class="line">       map = <span class="keyword">new</span> LinkedHashMap&lt;&gt;(initialCapacity, loadFactor);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="Set接口的实现"><a href="#Set接口的实现" class="headerlink" title="Set接口的实现"></a>Set接口的实现</h2><h3 id="add"><a href="#add" class="headerlink" title="add()"></a>add()</h3><p>HashSet将添加的元素通过map中的key来保存，当有相同的key时，也就是添加了相同的元素，那么map会讲value给覆盖掉，而key还是原来的key。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> map.put(e, PRESENT)==<span class="keyword">null</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h3 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h3><p>HashSet通过删除map中key的返回值是否为PRESENT判断set中是否有该值。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> map.remove(o)==PRESENT;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h3 id="contains"><a href="#contains" class="headerlink" title="contains()"></a>contains()</h3><p>直接调用map中containsKey()。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> map.containsKey(o);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h3 id="isEmpty"><a href="#isEmpty" class="headerlink" title="isEmpty()"></a>isEmpty()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> map.isEmpty();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="size"><a href="#size" class="headerlink" title="size()"></a>size()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> map.size();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="iterator"><a href="#iterator" class="headerlink" title="iterator()"></a>iterator()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重点看一下这个迭代器，这个迭代器在HashMap中就已经构建好了。</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Iterator&lt;E&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> map.keySet().iterator();</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 实例化KeySet</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> Set&lt;K&gt; <span class="title">keySet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       Set&lt;K&gt; ks = keySet;</span><br><span class="line">       <span class="keyword">if</span> (ks == <span class="keyword">null</span>) &#123;</span><br><span class="line">           ks = <span class="keyword">new</span> KeySet();</span><br><span class="line">           keySet = ks;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> ks;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// KeySet类是HashMap中的一个内部类</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">KeySet</span> <span class="keyword">extends</span> <span class="title">AbstractSet</span>&lt;<span class="title">K</span>&gt; </span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> Iterator&lt;K&gt; <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> newKeyIterator();</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> size;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> containsKey(o);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> HashMap.<span class="keyword">this</span>.removeEntryForKey(o) != <span class="keyword">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           HashMap.<span class="keyword">this</span>.clear();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 实例化KeyIterator</span></span><br><span class="line">   <span class="function">Iterator&lt;K&gt; <span class="title">newKeyIterator</span><span class="params">()</span>   </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> KeyIterator();</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 对key进行迭代的迭代器（重点）</span></span><br><span class="line">   <span class="comment">// 因为set存放的元素就是存放在HashMap中的key，所以为了能够迭代set，HashMap就实现了这个专门遍历key的迭代器</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">KeyIterator</span> <span class="keyword">extends</span> <span class="title">HashIterator</span>&lt;<span class="title">K</span>&gt; </span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">public</span> K <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> nextEntry().getKey();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;浅析JDK1.8 HashSet源码。&lt;/p&gt;
&lt;h2 id=&quot;写在开篇&quot;&gt;&lt;a href=&quot;#写在开篇&quot; class=&quot;headerlink&quot; title=&quot;写在开篇&quot;&gt;&lt;/a&gt;写在开篇&lt;/h2&gt;&lt;p&gt;HashSet源码比较简单，所以文章就会比较过水。&lt;/p&gt;
&lt;p&gt;先简
      
    
    </summary>
    
      <category term="Java乐园" scheme="https://kyrie17.github.io/categories/Java%E4%B9%90%E5%9B%AD/"/>
    
    
      <category term="HashSet" scheme="https://kyrie17.github.io/tags/HashSet/"/>
    
  </entry>
  
  <entry>
    <title>AbstractQueuedSynchronizer源码分析</title>
    <link href="https://kyrie17.github.io/2019/09/23/AbstractQueuedSynchronizer%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    <id>https://kyrie17.github.io/2019/09/23/AbstractQueuedSynchronizer源码分析/</id>
    <published>2019-09-23T01:12:17.000Z</published>
    <updated>2019-09-23T01:18:25.954Z</updated>
    
    <content type="html"><![CDATA[<h2 id="写在开篇"><a href="#写在开篇" class="headerlink" title="写在开篇"></a>写在开篇</h2><p>文章转载自：<a href="https://www.cnblogs.com/micrari/p/6937995.html。" target="_blank" rel="noopener">https://www.cnblogs.com/micrari/p/6937995.html。</a> </p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>AQS（java.util.concurrent.locks.AbstractQueuedSynchronizer）是Doug Lea大师创作的用来构建锁或者其他同步组件（信号量、事件等）的基础框架类。JDK中许多并发工具类的内部实现都依赖于AQS，如ReentrantLock, Semaphore, CountDownLatch等等。学习AQS的使用与源码实现对深入理解concurrent包中的类有很大的帮助。</p><p>本文重点介绍AQS中的基本实现思路，包括独占锁、共享锁的获取和释放实现原理和一些代码细节。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>AQS的主要使用方式是继承它作为一个内部辅助类实现同步原语，它可以简化你的并发工具的内部实现，屏蔽同步状态管理、线程的排队、等待与唤醒等底层操作。</p><p>AQS设计基于模板方法模式，开发者需要继承同步器并且重写指定的方法，将其组合在并发组件的实现中，调用同步器的模板方法，模板方法会调用使用者重写的方法。</p><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>下面介绍下AQS具体实现的大致思路。</p><p>AQS内部维护一个CLH队列来管理锁。<br>线程会首先尝试获取锁，如果失败，则将当前线程以及等待状态等信息包成一个Node节点加到同步队列里。<br>接着会不断循环尝试获取锁（条件是当前节点为head的直接后继才会尝试）,如果失败则会阻塞自己，直至被唤醒；<br>而当持有锁的线程释放锁时，会唤醒队列中的后继线程。</p><p>下面列举JDK中几种常见使用了AQS的同步组件：</p><ul><li>ReentrantLock: 使用了AQS的独占获取和释放,用state变量记录某个线程获取独占锁的次数,获取锁时+1，释放锁时-1，在获取时会校验线程是否可以获取锁。</li><li>Semaphore: 使用了AQS的共享获取和释放，用state变量作为计数器，只有在大于0时允许线程进入。获取锁时-1，释放锁时+1。</li><li>CountDownLatch: 使用了AQS的共享获取和释放，用state变量作为计数器，在初始化时指定。只要state还大于0，获取共享锁会因为失败而阻塞，直到计数器的值为0时，共享锁才允许获取，所有等待线程会被逐一唤醒。</li></ul><h3 id="如何获取锁"><a href="#如何获取锁" class="headerlink" title="如何获取锁"></a>如何获取锁</h3><p>获取锁的思路很直接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">while (不满足获取锁的条件) &#123;</span><br><span class="line">    把当前线程包装成节点插入同步队列</span><br><span class="line">    if (需要阻塞当前线程)</span><br><span class="line">        阻塞当前线程直至被唤醒</span><br><span class="line">&#125;</span><br><span class="line">将当前线程从同步队列中移除</span><br></pre></td></tr></table></figure></p><p>以上是一个很简单的获取锁的伪代码流程，AQS的具体实现比这个复杂一些，也稍有不同，但思想上是与上述伪代码契合的。<br>通过循环检测是否能够获取到锁，如果不满足，则可能会被阻塞，直至被唤醒。</p><h3 id="如何释放锁"><a href="#如何释放锁" class="headerlink" title="如何释放锁"></a>如何释放锁</h3><p>释放锁的过程设计修改同步状态，以及唤醒后继等待线程：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修改同步状态</span><br><span class="line">if (修改后的状态允许其他线程获取到锁)</span><br><span class="line">    唤醒后继线程</span><br></pre></td></tr></table></figure></p><p>这只是很简略的释放锁的伪代码示意，AQS具体实现中能看到这个简单的流程模型。</p><h3 id="API简介"><a href="#API简介" class="headerlink" title="API简介"></a>API简介</h3><p>通过上面的AQS大体思路分析，我们可以看到，AQS主要做了三件事情</p><ul><li>同步状态的管理</li><li>线程的阻塞和唤醒</li><li>同步队列的维护</li></ul><p>下面三个protected final方法是AQS中用来访问/修改同步状态的方法:</p><ul><li>int getState(): 获取同步状态</li><li>void setState(): 设置同步状态</li><li>boolean compareAndSetState(int expect, int update)：基于CAS，原子设置当前状态</li></ul><p>在自定义基于AQS的同步工具时，我们可以选择覆盖实现以下几个方法来实现同步状态的管理：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>boolean tryAcquire(int arg)</td><td>试获取独占锁</td></tr><tr><td>boolean tryRelease(int arg)</td><td>试释放独占锁</td></tr><tr><td>int tryAcquireShared(int arg)</td><td>试获取共享锁</td></tr><tr><td>boolean tryReleaseShared(int arg)</td><td>试释放共享锁</td></tr><tr><td>boolean isHeldExclusively()</td><td>当前线程是否获得了独占锁</td></tr></tbody></table><p>以上的几个试获取/释放锁的方法的具体实现应当是无阻塞的。</p><p>AQS本身将同步状态的管理用模板方法模式都封装好了，以下列举了AQS中的一些模板方法：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>void acquire(int arg)</td><td>获取独占锁。会调用<code>tryAcquire</code>方法，如果未获取成功，则会进入同步队列等待</td></tr><tr><td>void acquireInterruptibly(int arg)</td><td>响应中断版本的<code>acquire</code></td></tr><tr><td>boolean tryAcquireNanos(int arg,long nanos)</td><td>响应中断+带超时版本的<code>acquire</code></td></tr><tr><td>void acquireShared(int arg)</td><td>获取共享锁。会调用<code>tryAcquireShared</code>方法</td></tr><tr><td>void acquireSharedInterruptibly(int arg)</td><td>响应中断版本的<code>acquireShared</code></td></tr><tr><td>boolean tryAcquireSharedNanos(int arg,long nanos)</td><td>响应中断+带超时版本的<code>acquireShared</code></td></tr><tr><td>boolean release(int arg)</td><td>释放独占锁</td></tr><tr><td>boolean releaseShared(int arg)</td><td>释放共享锁</td></tr><tr><td>Collection getQueuedThreads()</td><td>获取同步队列上的线程集合</td></tr></tbody></table><p>上面看上去很多方法，其实从语义上来区分就是获取和释放，从模式上区分就是独占式和共享式，从中断相应上来看就是支持和不支持。</p><h2 id="代码解读"><a href="#代码解读" class="headerlink" title="代码解读"></a>代码解读</h2><h3 id="数据结构定义"><a href="#数据结构定义" class="headerlink" title="数据结构定义"></a>数据结构定义</h3><p>首先看一下AQS中的嵌套类Node的定义。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于标记一个节点在共享模式下等待</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Node SHARED = <span class="keyword">new</span> Node();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用于标记一个节点在独占模式下等待</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> Node EXCLUSIVE = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 等待状态：取消</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CANCELLED = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 等待状态：通知</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> SIGNAL = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 等待状态：条件等待</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> CONDITION = -<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 等待状态：传播</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> PROPAGATE = -<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 等待状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">volatile</span> <span class="keyword">int</span> waitStatus;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前驱节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">volatile</span> Node prev;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 后继节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">volatile</span> Node next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 节点对应的线程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">volatile</span> Thread thread;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 等待队列中的后继节点</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Node nextWaiter;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前节点是否处于共享模式等待</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">isShared</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> nextWaiter == SHARED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取前驱节点，如果为空的话抛出空指针异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> Node <span class="title">predecessor</span><span class="params">()</span> <span class="keyword">throws</span> NullPointerException </span>&#123;</span><br><span class="line">        Node p = prev;</span><br><span class="line">        <span class="keyword">if</span> (p == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * addWaiter会调用此构造函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Node(Thread thread, Node mode) &#123;</span><br><span class="line">        <span class="keyword">this</span>.nextWaiter = mode;</span><br><span class="line">        <span class="keyword">this</span>.thread = thread;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Condition会用到此构造函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Node(Thread thread, <span class="keyword">int</span> waitStatus) &#123;</span><br><span class="line">        <span class="keyword">this</span>.waitStatus = waitStatus;</span><br><span class="line">        <span class="keyword">this</span>.thread = thread;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里有必要专门梳理一下节点等待状态的定义，因为AQS源码中有大量的状态判断与跃迁。</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>CANCELLED (1)</td><td>当前线程因为超时或者中断被取消。这是一个终结态，也就是状态到此为止</td></tr><tr><td>SIGNAL (-1)</td><td>当前线程的后继线程被阻塞或者即将被阻塞，当前线程释放锁或者取消后需要唤醒后继线程。这个状态一般都是后继线程来设置前驱节点的</td></tr><tr><td>CONDITION (-2)</td><td>当前线程在condition队列中</td></tr><tr><td>PROPAGATE (-3)</td><td>用于将唤醒后继线程传递下去，这个状态的引入是为了完善和增强共享锁的唤醒机制。在一个节点成为头节点之前，是不会跃迁为此状态的</td></tr><tr><td>0</td><td>表示无状态</td></tr></tbody></table><p>对于分析AQS中不涉及ConditionObject部分的代码，可以认为队列中的节点状态只会是CANCELLED, SIGNAL, PROPAGATE, 0这几种情况。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/AQS01.png" alt="AQS01" title>                </div>                <div class="image-caption">AQS01</div>            </figure><br>上图为自制的AQS状态的流转图，AQS中0状态和CONDITION状态为始态，CANCELLED状态为终态。0状态同时也可以是节点生命周期的终态。</p><p><strong>注意，上图仅表示状态之间流转的可达性，并不代表一定能够从一个状态沿着线随意跃迁。</strong></p><p>在AQS中包含了head和tail两个Node引用，其中head在逻辑上的含义是当前持有锁的线程，head节点实际上是一个虚节点，本身并不会存储线程信息。<br>当一个线程无法获取锁而被加入到同步队列时，会用CAS来设置尾节点tail为当前线程对应的Node节点。<br>head和tail在AQS中是延迟初始化的，也就是在需要的时候才会被初始化，也就意味着在所有线程都能获取到锁的情况下，队列中的head和tail都会是null。</p><h3 id="获取独占锁的实现"><a href="#获取独占锁的实现" class="headerlink" title="获取独占锁的实现"></a>获取独占锁的实现</h3><p>下面来具体看看acquire(int arg)的实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取独占锁，对中断不敏感。</span></span><br><span class="line"><span class="comment"> * 首先尝试获取一次锁，如果成功，则返回；</span></span><br><span class="line"><span class="comment"> * 否则会把当前线程包装成Node插入到队列中，在队列中会检测是否为head的直接后继，并尝试获取锁,</span></span><br><span class="line"><span class="comment"> * 如果获取失败，则会通过LockSupport阻塞当前线程，直至被释放锁的线程唤醒或者被中断，随后再次尝试获取锁，如此反复。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class="line">        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">        selfInterrupt();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在队列中新增一个节点。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">addWaiter</span><span class="params">(Node mode)</span> </span>&#123;</span><br><span class="line">    Node node = <span class="keyword">new</span> Node(Thread.currentThread(), mode);</span><br><span class="line">    Node pred = tail;</span><br><span class="line">    <span class="comment">// 快速尝试</span></span><br><span class="line">    <span class="keyword">if</span> (pred != <span class="keyword">null</span>) &#123;</span><br><span class="line">        node.prev = pred;</span><br><span class="line">        <span class="comment">// 通过CAS在队尾插入当前节点</span></span><br><span class="line">        <span class="keyword">if</span> (compareAndSetTail(pred, node)) &#123;</span><br><span class="line">            pred.next = node;</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 初始情况或者在快速尝试失败后插入节点</span></span><br><span class="line">    enq(node);</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通过循环+CAS在队列中成功插入一个节点后返回。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">enq</span><span class="params">(<span class="keyword">final</span> Node node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        Node t = tail;</span><br><span class="line">        <span class="comment">// 初始化head和tail</span></span><br><span class="line">        <span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (compareAndSetHead(<span class="keyword">new</span> Node()))</span><br><span class="line">                tail = head;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * AQS的精妙就是体现在很多细节的代码，比如需要用CAS往队尾里增加一个元素</span></span><br><span class="line"><span class="comment">             * 此处的else分支是先在CAS的if前设置node.prev = t，而不是在CAS成功之后再设置。</span></span><br><span class="line"><span class="comment">             * 一方面是基于CAS的双向链表插入目前没有完美的解决方案，另一方面这样子做的好处是：</span></span><br><span class="line"><span class="comment">             * 保证每时每刻tail.prev都不会是一个null值，否则如果node.prev = t</span></span><br><span class="line"><span class="comment">             * 放在下面if的里面，会导致一个瞬间tail.prev = null，这样会使得队列不完整。</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            node.prev = t;</span><br><span class="line">            <span class="comment">// CAS设置tail为node，成功后把老的tail也就是t连接到node。</span></span><br><span class="line">            <span class="keyword">if</span> (compareAndSetTail(t, node)) &#123;</span><br><span class="line">                t.next = node;</span><br><span class="line">                <span class="keyword">return</span> t;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在队列中的节点通过此方法获取锁，对中断不敏感。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">acquireQueued</span><span class="params">(<span class="keyword">final</span> Node node, <span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">boolean</span> interrupted = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">final</span> Node p = node.predecessor();</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * 检测当前节点前驱是否head，这是试获取锁的资格。</span></span><br><span class="line"><span class="comment">             * 如果是的话，则调用tryAcquire尝试获取锁,</span></span><br><span class="line"><span class="comment">             * 成功，则将head置为当前节点。</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class="line">                setHead(node);</span><br><span class="line">                p.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">                failed = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">return</span> interrupted;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * 如果未成功获取锁则根据前驱节点判断是否要阻塞。</span></span><br><span class="line"><span class="comment">             * 如果阻塞过程中被中断，则置interrupted标志位为true。</span></span><br><span class="line"><span class="comment">             * shouldParkAfterFailedAcquire方法在前驱状态不为SIGNAL的情况下都会循环重试获取锁。</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class="line">                parkAndCheckInterrupt())</span><br><span class="line">                interrupted = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (failed)</span><br><span class="line">            cancelAcquire(node);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据前驱节点中的waitStatus来判断是否需要阻塞当前线程。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">shouldParkAfterFailedAcquire</span><span class="params">(Node pred, Node node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ws = pred.waitStatus;</span><br><span class="line">    <span class="keyword">if</span> (ws == Node.SIGNAL)</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 前驱节点设置为SIGNAL状态，在释放锁的时候会唤醒后继节点，</span></span><br><span class="line"><span class="comment">         * 所以后继节点（也就是当前节点）现在可以阻塞自己。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (ws &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 前驱节点状态为取消,向前遍历，更新当前节点的前驱为往前第一个非取消节点。</span></span><br><span class="line"><span class="comment">         * 当前线程会之后会再次回到循环并尝试获取锁。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            node.prev = pred = pred.prev;</span><br><span class="line">        &#125; <span class="keyword">while</span> (pred.waitStatus &gt; <span class="number">0</span>);</span><br><span class="line">        pred.next = node;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="comment">/**</span></span><br><span class="line"><span class="comment">          * 等待状态为0或者PROPAGATE(-3)，设置前驱的等待状态为SIGNAL,</span></span><br><span class="line"><span class="comment">          * 并且之后会回到循环再次重试获取锁。</span></span><br><span class="line"><span class="comment">          */</span></span><br><span class="line">        compareAndSetWaitStatus(pred, ws, Node.SIGNAL);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 该方法实现某个node取消获取锁。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">cancelAcquire</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (node == <span class="keyword">null</span>)</span><br><span class="line">       <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">   node.thread = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 遍历并更新节点前驱，把node的prev指向前部第一个非取消节点。</span></span><br><span class="line">   Node pred = node.prev;</span><br><span class="line">   <span class="keyword">while</span> (pred.waitStatus &gt; <span class="number">0</span>)</span><br><span class="line">       node.prev = pred = pred.prev;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 记录pred节点的后继为predNext，后续CAS会用到。</span></span><br><span class="line">   Node predNext = pred.next;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 直接把当前节点的等待状态置为取消,后继节点即便也在cancel可以跨越node节点。</span></span><br><span class="line">   node.waitStatus = Node.CANCELLED;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">    * 如果CAS将tail从node置为pred节点了</span></span><br><span class="line"><span class="comment">    * 则剩下要做的事情就是尝试用CAS将pred节点的next更新为null以彻底切断pred和node的联系。</span></span><br><span class="line"><span class="comment">    * 这样一来就断开了pred与pred的所有后继节点，这些节点由于变得不可达，最终会被回收掉。</span></span><br><span class="line"><span class="comment">    * 由于node没有后继节点，所以这种情况到这里整个cancel就算是处理完毕了。</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * 这里的CAS更新pred的next即使失败了也没关系，说明有其它新入队线程或者其它取消线程更新掉了。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">if</span> (node == tail &amp;&amp; compareAndSetTail(node, pred)) &#123;</span><br><span class="line">       compareAndSetNext(pred, predNext, <span class="keyword">null</span>);</span><br><span class="line">   &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       <span class="comment">// 如果node还有后继节点，这种情况要做的事情是把pred和后继非取消节点拼起来。</span></span><br><span class="line">       <span class="keyword">int</span> ws;</span><br><span class="line">       <span class="keyword">if</span> (pred != head &amp;&amp;</span><br><span class="line">           ((ws = pred.waitStatus) == Node.SIGNAL ||</span><br><span class="line">            (ws &lt;= <span class="number">0</span> &amp;&amp; compareAndSetWaitStatus(pred, ws, Node.SIGNAL))) &amp;&amp;</span><br><span class="line">           pred.thread != <span class="keyword">null</span>) &#123;</span><br><span class="line">           Node next = node.next;</span><br><span class="line">           <span class="comment">/* </span></span><br><span class="line"><span class="comment">            * 如果node的后继节点next非取消状态的话，则用CAS尝试把pred的后继置为node的后继节点</span></span><br><span class="line"><span class="comment">            * 这里if条件为false或者CAS失败都没关系，这说明可能有多个线程在取消，总归会有一个能成功的。</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">           <span class="keyword">if</span> (next != <span class="keyword">null</span> &amp;&amp; next.waitStatus &lt;= <span class="number">0</span>)</span><br><span class="line">               compareAndSetNext(pred, predNext, next);</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">/*</span></span><br><span class="line"><span class="comment">            * 这时说明pred == head或者pred状态取消或者pred.thread == null</span></span><br><span class="line"><span class="comment">            * 在这些情况下为了保证队列的活跃性，需要去唤醒一次后继线程。</span></span><br><span class="line"><span class="comment">            * 举例来说pred == head完全有可能实际上目前已经没有线程持有锁了，</span></span><br><span class="line"><span class="comment">            * 自然就不会有释放锁唤醒后继的动作。如果不唤醒后继，队列就挂掉了。</span></span><br><span class="line"><span class="comment">            * </span></span><br><span class="line"><span class="comment">            * 这种情况下看似由于没有更新pred的next的操作，队列中可能会留有一大把的取消节点。</span></span><br><span class="line"><span class="comment">            * 实际上不要紧，因为后继线程唤醒之后会走一次试获取锁的过程，</span></span><br><span class="line"><span class="comment">            * 失败的话会走到shouldParkAfterFailedAcquire的逻辑。</span></span><br><span class="line"><span class="comment">            * 那里面的if中有处理前驱节点如果为取消则维护pred/next,踢掉这些取消节点的逻辑。</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">           unparkSuccessor(node);</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 取消节点的next之所以设置为自己本身而不是null,</span></span><br><span class="line"><span class="comment">        * 是为了方便AQS中Condition部分的isOnSyncQueue方法,</span></span><br><span class="line"><span class="comment">        * 判断一个原先属于条件队列的节点是否转移到了同步队列。</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 因为同步队列中会用到节点的next域，取消节点的next也有值的话，</span></span><br><span class="line"><span class="comment">        * 可以断言next域有值的节点一定在同步队列上。</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 在GC层面，和设置为null具有相同的效果。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       node.next = node; </span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 唤醒后继线程。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">unparkSuccessor</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ws = node.waitStatus;</span><br><span class="line">    <span class="comment">// 尝试将node的等待状态置为0,这样的话,后继争用线程可以有机会再尝试获取一次锁。</span></span><br><span class="line">    <span class="keyword">if</span> (ws &lt; <span class="number">0</span>)</span><br><span class="line">        compareAndSetWaitStatus(node, ws, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    Node s = node.next;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 这里的逻辑就是如果node.next存在并且状态不为取消，则直接唤醒s即可</span></span><br><span class="line"><span class="comment">     * 否则需要从tail开始向前找到node之后最近的非取消节点。</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 这里为什么要从tail开始向前查找也是值得琢磨的:</span></span><br><span class="line"><span class="comment">     * 如果读到s == null，不代表node就为tail，参考addWaiter以及enq函数中的我的注释。</span></span><br><span class="line"><span class="comment">     * 不妨考虑到如下场景：</span></span><br><span class="line"><span class="comment">     * 1. node某时刻为tail</span></span><br><span class="line"><span class="comment">     * 2. 有新线程通过addWaiter中的if分支或者enq方法添加自己</span></span><br><span class="line"><span class="comment">     * 3. compareAndSetTail成功</span></span><br><span class="line"><span class="comment">     * 4. 此时这里的Node s = node.next读出来s == null，但事实上node已经不是tail，它有后继了!</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.waitStatus &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        s = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">for</span> (Node t = tail; t != <span class="keyword">null</span> &amp;&amp; t != node; t = t.prev)</span><br><span class="line">            <span class="keyword">if</span> (t.waitStatus &lt;= <span class="number">0</span>)</span><br><span class="line">                s = t;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (s != <span class="keyword">null</span>)</span><br><span class="line">        LockSupport.unpark(s.thread);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>AQS独占锁的获取的流程示意如下：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/AQS02.png" alt="AQS02" title>                </div>                <div class="image-caption">AQS02</div>            </figure></p><h3 id="释放独占锁的实现"><a href="#释放独占锁的实现" class="headerlink" title="释放独占锁的实现"></a>释放独占锁的实现</h3><p>上面已经分析了acquire的实现，下面来看看release的实现：<br>对于释放一个独占锁，首先会调用tryRelease，在完全释放掉独占锁后，这时后继线程是可以获取到独占锁的，<br>因此释放者线程需要做的事情是唤醒一个队列中的后继者线程，让它去尝试获取独占锁。</p><p>上述所谓完全释放掉锁的含义，简单来说就是当前锁处于无主状态，等待线程有可能可以获取。<br>举例：对于可重入锁ReentrantLock, 每次tryAcquire后，state会+1，每次tryRelease后，state会-1，如果state变为0了，则此时称独占锁被完全释放了。</p><p>下面，我们来看一下release的具体代码实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">release</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tryRelease(arg)) &#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 此时的head节点可能有3种情况:</span></span><br><span class="line"><span class="comment">         * 1. null (AQS的head延迟初始化+无竞争的情况)</span></span><br><span class="line"><span class="comment">         * 2. 当前线程在获取锁时new出来的节点通过setHead设置的</span></span><br><span class="line"><span class="comment">         * 3. 由于通过tryRelease已经完全释放掉了独占锁，有新的节点在acquireQueued中获取到了独占锁，并设置了head</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         * 第三种情况可以再分为两种情况：</span></span><br><span class="line"><span class="comment">         * （一）时刻1:线程A通过acquireQueued，持锁成功，set了head</span></span><br><span class="line"><span class="comment">         *          时刻2:线程B通过tryAcquire试图获取独占锁失败失败，进入acquiredQueued</span></span><br><span class="line"><span class="comment">         *          时刻3:线程A通过tryRelease释放了独占锁</span></span><br><span class="line"><span class="comment">         *          时刻4:线程B通过acquireQueued中的tryAcquire获取到了独占锁并调用setHead</span></span><br><span class="line"><span class="comment">         *          时刻5:线程A读到了此时的head实际上是线程B对应的node</span></span><br><span class="line"><span class="comment">         * （二）时刻1:线程A通过tryAcquire直接持锁成功，head为null</span></span><br><span class="line"><span class="comment">         *          时刻2:线程B通过tryAcquire试图获取独占锁失败失败，入队过程中初始化了head，进入acquiredQueued</span></span><br><span class="line"><span class="comment">         *          时刻3:线程A通过tryRelease释放了独占锁，此时线程B还未开始tryAcquire</span></span><br><span class="line"><span class="comment">         *          时刻4:线程A读到了此时的head实际上是线程B初始化出来的傀儡head</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Node h = head;</span><br><span class="line">        <span class="comment">// head节点状态不会是CANCELLED，所以这里h.waitStatus != 0相当于h.waitStatus &lt; 0</span></span><br><span class="line">        <span class="keyword">if</span> (h != <span class="keyword">null</span> &amp;&amp; h.waitStatus != <span class="number">0</span>)</span><br><span class="line">            <span class="comment">// 唤醒后继线程，此函数在acquire中已经分析过，不再列举说明</span></span><br><span class="line">            unparkSuccessor(h);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>整个release做的事情就是</p><ol><li>调用tryRelease</li><li>如果tryRelease返回true也就是独占锁被完全释放，唤醒后继线程。</li></ol><p>这里的唤醒是根据head几点来判断的，上面代码的注释中也分析了head节点的情况，只有在head存在并且等待状态小于零的情况下唤醒。</p><h3 id="获取共享锁的实现"><a href="#获取共享锁的实现" class="headerlink" title="获取共享锁的实现"></a>获取共享锁的实现</h3><p>与获取独占锁的实现不同的关键在于，共享锁允许多个线程持有。<br>如果需要使用AQS中共享锁，在实现tryAcquireShared方法时需要注意，返回负数表示获取失败;返回0表示成功，但是后继争用线程不会成功;返回正数表示<br>获取成功，并且后继争用线程也可能成功。</p><p>下面来看一下具体的代码实现：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquireShared</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tryAcquireShared(arg) &lt; <span class="number">0</span>)</span><br><span class="line">        doAcquireShared(arg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doAcquireShared</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node node = addWaiter(Node.SHARED);</span><br><span class="line">    <span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">boolean</span> interrupted = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="keyword">final</span> Node p = node.predecessor();</span><br><span class="line">            <span class="keyword">if</span> (p == head) &#123;</span><br><span class="line">                <span class="keyword">int</span> r = tryAcquireShared(arg);</span><br><span class="line">                <span class="comment">// 一旦共享获取成功，设置新的头结点，并且唤醒后继线程</span></span><br><span class="line">                <span class="keyword">if</span> (r &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    setHeadAndPropagate(node, r);</span><br><span class="line">                    p.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">                    <span class="keyword">if</span> (interrupted)</span><br><span class="line">                        selfInterrupt();</span><br><span class="line">                    failed = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp;</span><br><span class="line">                parkAndCheckInterrupt())</span><br><span class="line">                interrupted = <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (failed)</span><br><span class="line">            cancelAcquire(node);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这个函数做的事情有两件:</span></span><br><span class="line"><span class="comment"> * 1. 在获取共享锁成功后，设置head节点</span></span><br><span class="line"><span class="comment"> * 2. 根据调用tryAcquireShared返回的状态以及节点本身的等待状态来判断是否要需要唤醒后继线程。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setHeadAndPropagate</span><span class="params">(Node node, <span class="keyword">int</span> propagate)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 把当前的head封闭在方法栈上，用以下面的条件检查。</span></span><br><span class="line">    Node h = head;</span><br><span class="line">    setHead(node);</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * propagate是tryAcquireShared的返回值，这是决定是否传播唤醒的依据之一。</span></span><br><span class="line"><span class="comment">     * h.waitStatus为SIGNAL或者PROPAGATE时也根据node的下一个节点共享来决定是否传播唤醒，</span></span><br><span class="line"><span class="comment">     * 这里为什么不能只用propagate &gt; 0来决定是否可以传播在本文下面的思考问题中有相关讲述。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (propagate &gt; <span class="number">0</span> || h == <span class="keyword">null</span> || h.waitStatus &lt; <span class="number">0</span> ||</span><br><span class="line">        (h = head) == <span class="keyword">null</span> || h.waitStatus &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        Node s = node.next;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.isShared())</span><br><span class="line">            doReleaseShared();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 这是共享锁中的核心唤醒函数，主要做的事情就是唤醒下一个线程或者设置传播状态。</span></span><br><span class="line"><span class="comment"> * 后继线程被唤醒后，会尝试获取共享锁，如果成功之后，则又会调用setHeadAndPropagate,将唤醒传播下去。</span></span><br><span class="line"><span class="comment"> * 这个函数的作用是保障在acquire和release存在竞争的情况下，保证队列中处于等待状态的节点能够有办法被唤醒。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doReleaseShared</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * 以下的循环做的事情就是，在队列存在后继线程的情况下，唤醒后继线程；</span></span><br><span class="line"><span class="comment">     * 或者由于多线程同时释放共享锁由于处在中间过程，读到head节点等待状态为0的情况下，</span></span><br><span class="line"><span class="comment">     * 虽然不能unparkSuccessor，但为了保证唤醒能够正确稳固传递下去，设置节点状态为PROPAGATE。</span></span><br><span class="line"><span class="comment">     * 这样的话获取锁的线程在执行setHeadAndPropagate时可以读到PROPAGATE，从而由获取锁的线程去释放后继等待线程。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">        Node h = head;</span><br><span class="line">        <span class="comment">// 如果队列中存在后继线程。</span></span><br><span class="line">        <span class="keyword">if</span> (h != <span class="keyword">null</span> &amp;&amp; h != tail) &#123;</span><br><span class="line">            <span class="keyword">int</span> ws = h.waitStatus;</span><br><span class="line">            <span class="keyword">if</span> (ws == Node.SIGNAL) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!compareAndSetWaitStatus(h, Node.SIGNAL, <span class="number">0</span>))</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                unparkSuccessor(h);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果h节点的状态为0，需要设置为PROPAGATE用以保证唤醒的传播。</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (ws == <span class="number">0</span> &amp;&amp;</span><br><span class="line">                     !compareAndSetWaitStatus(h, <span class="number">0</span>, Node.PROPAGATE))</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 检查h是否仍然是head，如果不是的话需要再进行循环。</span></span><br><span class="line">        <span class="keyword">if</span> (h == head)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>从中，我们可以看出，共享锁的获取和释放都会涉及到doReleaseShared,也就是后继线程的唤醒。关于PROPAGATE状态的必要性，后文会作进一步介绍。</p><h2 id="一些思考"><a href="#一些思考" class="headerlink" title="一些思考"></a>一些思考</h2><p>AQS的代码实在是很精妙，要看懂大致套路并不困难，但是要完全领悟其中的一些细节是一件需要花功夫来仔细琢磨品味的事情。</p><p>下面列出一些看源码时的问题与思考:</p><h3 id="插入节点时的代码顺序"><a href="#插入节点时的代码顺序" class="headerlink" title="插入节点时的代码顺序"></a>插入节点时的代码顺序</h3><p>addWaiter和enq方法中新增一个节点时为什么要先将新节点的prev置为tail再尝试CAS，而不是CAS成功后来构造节点之间的双向链接?</p><p>这是因为，双向链表目前没有基于CAS原子插入的手段，如果我们将<code>node.prev = t</code>和<code>t.next = node</code>（t为方法执行时读到的tail，引用封闭在栈上）放到<code>compareAndSetTail(t, node)</code>成功后执行，如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (compareAndSetTail(t, node)) &#123;</span><br><span class="line">   node.prev = t;</span><br><span class="line">   t.next = node;</span><br><span class="line">   <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会导致这一瞬间的tail也就是t的prev为null，这就使得这一瞬间队列处于一种不一致的中间状态。</p><h3 id="唤醒节点时为什么从tail向前遍历"><a href="#唤醒节点时为什么从tail向前遍历" class="headerlink" title="唤醒节点时为什么从tail向前遍历"></a>唤醒节点时为什么从tail向前遍历</h3><p>unparkSuccessor方法中为什么唤醒后继节点时要从tail向前查找最接近node的非取消节点，而不是直接从node向后找到第一个后break掉?</p><p>在上面的代码注释中已经提及到这一点：<br>如果读到s == null，不代表node就为tail。</p><p>考虑如下场景：</p><ol><li>node某时刻为tail</li><li>有新线程通过addWaiter中的if分支或者enq方法添加自己</li><li>compareAndSetTail成功</li><li>此时这里的Node s = node.next读出来s == null，但事实上node已经不是tail，它有后继了!<h3 id="unparkSuccessor有新线程争锁是否存在漏洞"><a href="#unparkSuccessor有新线程争锁是否存在漏洞" class="headerlink" title="unparkSuccessor有新线程争锁是否存在漏洞"></a>unparkSuccessor有新线程争锁是否存在漏洞</h3>unparkSuccessor方法在被release调用时是否存在这样的一个漏洞?</li></ol><p>时刻1: node -&gt; tail &amp;&amp; tail.waitStatus == Node.CANCELLED (node的下一个节点为tail，并且tail处于取消状态)<br>时刻2: unparkSuccessor读到s.waitStatus &gt; 0<br>时刻3: unparkSuccessor从tail开始遍历<br>时刻4: tail节点对应线程执行cancelAcquire方法中的if (node == tail &amp;&amp; compareAndSetTail(node, pred)) 返回true,<br>此时tail变为pred(也就是node)<br>时刻5: 有新线程进队列tail变为新节点<br>时刻6: unparkSuccessor没有发现需要唤醒的节点<br>最终新节点阻塞并且前驱节点结束调用，新节点再也无法被unpark</p><p>这种情况不会发生,确实可能出现从tail向前扫描，没有读到新入队的节点，但别忘了acquireQueued的思想就是不断循环检测是否能够独占获取锁，否则再进行判断是否要阻塞自己，而release的第一步就是tryRelease，它的语义为true表示完全释放独占锁，完全释放之后才会执行后面的逻辑，也就是unpark后继线程。在这种情况下，新入队的线程应当能获取到锁。</p><p>如果没有获取锁，则必然是在覆盖tryAcquire/tryRelease的实现有问题，导致前驱节点成功释放了独占锁，后继节点获取独占锁仍然失败。也就是说AQS框架的可靠性还在</p><p>某些程度上依赖于具体子类的实现，子类实现如果有bug，那AQS再精巧也扛不住。</p><h3 id="AQS如何保证队列活跃"><a href="#AQS如何保证队列活跃" class="headerlink" title="AQS如何保证队列活跃"></a>AQS如何保证队列活跃</h3><p>AQS如何保证在节点释放的同时又有新节点入队的情况下，不出现原持锁线程释放锁，后继线程被自己阻塞死的情况,保持同步队列的活跃？回答这个问题，需要理解shouldParkAfterFailedAcquire和unparkSuccessor这两个方法。</p><p>以独占锁为例，后继争用线程阻塞自己的情况是读到前驱节点的等待状态为SIGNAL,只要不是这种情况都会再试着去争取锁。</p><p>假设后继线程读到了前驱状态为SIGNAL，说明之前在tryAcquire的时候，前驱持锁线程还没有tryRelease完全释放掉独占锁。</p><p>此时如果前驱线程完全释放掉了独占锁，则在unparkSuccessor中还没执行完置waitStatus为0的操作，也就是还没执行到下面唤醒后继线程的代码，否则后继线程会再去争取锁。</p><p>那么就算后继争用线程此时把自己阻塞了，也一定会马上被前驱线程唤醒。<br>那么是否可能持锁线程执行唤醒后继线程的逻辑时，后继线程读到前驱等待状态为SIGNAL把自己给阻塞，再也无法苏醒呢？</p><p>这个问题在上面的问题3中已经有答案了，确实可能在扫描后继需要唤醒线程时读不到新来的线程，但只要tryRelease语义实现正确，在true时表示完全释放独占锁，则后继线程理应能够tryAcquire成功，shouldParkAfterFailedAcquire在读到前驱状态不为SIGNAL会给当前线程再一次获取锁的机会的。<br>别看AQS代码写的有些复杂，状态有些多，还真的就是没毛病，各种情况都能覆盖。</p><h3 id="PROPAGATE状态存在的意义"><a href="#PROPAGATE状态存在的意义" class="headerlink" title="PROPAGATE状态存在的意义"></a>PROPAGATE状态存在的意义</h3><p>在setHeadAndPropagate中我们可以看到如下的一段代码:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (propagate &gt; <span class="number">0</span> || h == <span class="keyword">null</span> || h.waitStatus &lt; <span class="number">0</span> ||</span><br><span class="line">       (h = head) == <span class="keyword">null</span> || h.waitStatus &lt; <span class="number">0</span>) &#123;</span><br><span class="line">       Node s = node.next;</span><br><span class="line">       <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.isShared())</span><br><span class="line">           doReleaseShared();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>为什么不只是用propagate &gt; 0来判断呢？我们知道目前AQS代码中的Node.PROPAGATE状态就是为了此处可以读取到h.waitStatus &lt; 0（PROPAGATE值为-3）；如果这里可以只用propagate &gt; 0来判断，是否PROPAGATE状态都没有存在的必要了？</p><p>我接触JAVA比较晚，接触的时候就已经是JDK8的年代了。这个问题我思考了很久，没有想到很合理的解释来说明PROPAGATE状态存在的必要性。</p><p>在网上也鲜少有相关方面的资料、博客提及到这些。后来通过浏览Doug Lea的个人网站，发现在很久以前AQS的代码确实是没有PROPAGATE的，PROPAGATE的引入是为了解决共享锁并发释放导致的线程hang住问题。</p><p>在Doug Lea的JSR 166 repository上，我找到了PROPAGATE最早被引入的那一版。可以看到</p><p>Revision1.73中，PROPAGATE状态被引入用以修复bug 6801020,让我们来看看这个bug:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.Semaphore;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSemaphore</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> Semaphore sem = <span class="keyword">new</span> Semaphore(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread1</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           sem.acquireUninterruptibly();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread2</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           sem.release();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">       <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000000</span>; i++) &#123;</span><br><span class="line">           Thread t1 = <span class="keyword">new</span> Thread1();</span><br><span class="line">           Thread t2 = <span class="keyword">new</span> Thread1();</span><br><span class="line">           Thread t3 = <span class="keyword">new</span> Thread2();</span><br><span class="line">           Thread t4 = <span class="keyword">new</span> Thread2();</span><br><span class="line">           t1.start();</span><br><span class="line">           t2.start();</span><br><span class="line">           t3.start();</span><br><span class="line">           t4.start();</span><br><span class="line">           t1.join();</span><br><span class="line">           t2.join();</span><br><span class="line">           t3.join();</span><br><span class="line">           t4.join();</span><br><span class="line">           System.out.println(i);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>很显然，这段程序一定能执行结束的，但是会偶现线程hang住的问题。<br>当时的AQS中setHeadAndPropagate是这样的:<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/AQS03.png" alt="AQS03" title>                </div>                <div class="image-caption">AQS03</div>            </figure><br>以上是bug 6801020修复点的对比，左边为修复之前的版本，右边为引入PROPAGATE修复之后的版本。</p><p>从左边可以看到原先的setHeadAndPropagate相比目前版本要简单很多，而releaseShared的实现也与release基本雷同，这也正是本问题的核心：为什么仅仅用调用的tryAcquireShared<br>得到的返回值来判断是否需要唤醒不行呢？</p><p>在PROPAGATE状态出现之前的源码可以<a href="http://gee.cs.oswego.edu/cgi-bin/viewcvs.cgi/jsr166/src/main/java/util/concurrent/locks/AbstractQueuedSynchronizer.java?revision=1.73&amp;view=markup" target="_blank" rel="noopener">点击这里查看</a></p><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>让我们来分析一下上面的程序：</p><p>上面的程序循环中做的事情就是放出4个线程，其中2个线程用于获取信号量，另外2个用于释放信号量。每次循环主线程会等待所有子线程执行完毕。</p><p> 出现bug也就是线程hang住的问题就在于两个获取信号量的线程有一个会没办法被唤醒，队列就死掉了。</p><p>在AQS的共享锁中，一个被park的线程，不考虑线程中断和前驱节点取消的情况，有两种情况可以被unpark：一种是其他线程释放信号量，调用unparkSuccessor； 另一种是其他线程获取共享锁时通过传播机制来唤醒后继节点。</p><p>我们假设某次循环中队列里排队的节点为情况为:<br> head -&gt; t1的node -&gt; t2的node(也就是tail)</p><p>信号量释放的顺序为t3先释放，t4后释放:<br>时刻1: t3调用releaseShared，调用了unparkSuccessor(h)，head的等待状态从-1变为0<br>时刻2: t1由于t3释放了信号量，被t3唤醒，调用Semaphore.NonfairSync的tryAcquireShared，返回值为0<br>时刻3: t4调用releaseShared,读到此时h.waitStatus为0(此时读到的head和时刻1中为同一个head)，不满足条件,因此不会调用unparkSuccessor(h)<br>时刻4: t1获取信号量成功，调用setHeadAndPropagate时，因为不满足propagate &gt; 0（时刻2的返回值也就是propagate==0）,从而不会唤醒后继节点</p><p>这就好比是一个精巧的多米诺骨牌最终由于设计的失误导致动力无法传递下去，至此AQS中的同步队列宣告死亡。</p><p>那么引入PROPAGATE是怎么解决问题的呢？<br>引入之后，调用releaseShared方法不再简单粗暴地直接unparkSuccessor,而是将传播行为抽了一个doReleaseShared方法出来。</p><p> 再看上面的那种情况:<br> 时刻1：t3调用releaseShared -&gt; doReleaseShared -&gt; unparkSuccessor，完了之后head的等待状态为0<br> 时刻2：t1由于t3释放了信号量，被t3唤醒，调用Semaphore.NonfairSync的tryAcquireShared，返回值为0<br> 时刻3：t4调用releaseShared,<strong>读到此时h.waitStatus为0(此时读到的head和时刻1中为同一个head)，将等待状态置为PROPAGATE</strong><br> 时刻4：t1获取信号量成功，调用setHeadAndPropagate时，可以读到<code>h.waitStatus &lt; 0</code>，从而可以接下来调用doReleaseShared唤醒t2</p><p>也就是说，上面会产生线程hang住bug的case在引入PROPAGATE后可以被规避掉。在PROPAGATE引入之前，之所以可能会出现线程hang住的情况，就是在于releaseShared有竞争的情况下，可能会有队列中处于等待状态的节点因为第一个线程完成释放唤醒，第二个线程获取到锁，但还没设置好head，又有新线程释放锁，但是读到老的head状态为0导致释放但不唤醒，最终后一个等待线程既没有被释放线程唤醒，也没有被持锁线程唤醒。</p><p><strong>所以，仅仅靠tryAcquireShared的返回值来决定是否要将唤醒传递下去是不充分的。</strong></p><h3 id="AQS如何防止内存泄露"><a href="#AQS如何防止内存泄露" class="headerlink" title="AQS如何防止内存泄露"></a>AQS如何防止内存泄露</h3><p>AQS维护了一个FIFO队列，它是如何保证在运行期间不发生内存泄露的？</p><p>AQS在无竞争条件下，甚至都不会new出head和tail节点。线程成功获取锁时设置head节点的方法为setHead，由于头节点的thread并不重要，此时会置node的thread和prev为null，完了之后还会置原先head也就是线程对应node的前驱的next为null，从而实现队首元素的安全移出。而在取消节点时，也会令node.thread = null，在node不为tail的情况下，会使node.next = node（之所以这样也是为了isOnSyncQueue实现更加简洁）</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>AQS毫无疑问是Doug Lea大师令人叹为观止的作品，它实现精巧、鲁棒、优雅，很好地封装了同步状态的管理、线程的等待与唤醒，足以满足大多数同步工具的需求。<br>阅读AQS的源码不是一蹴而就就能完全读懂的，阅读源码大致分为三步：</p><ol><li>读懂大概思路以及一些重要方法之间的调用关系</li><li>逐行看代码的具体实现，知道每一段代码是干什么的</li><li>琢磨参悟某一段代码为什么是这么写的，能否换一种写法，能否前后几行代码调换顺序，作者是怎么想的</li></ol><p>从Doug Lea大师的论文中，我们也能够看出他设计并实现了AQS本身一方面是本人功力深厚，另一方面也阅读了大量的文献与资料，也做了很多方面的测试。</p><p>读AQS最难的地方不在于明白套路和思路，而在于代码中点点滴滴的细节。从一行行的代码角度来说，比如改一个值，是否需要CAS，是否一定要CAS成功；读一个值，在多线程环境下含义是什么，有哪些种情况。从一个个方法角度来说，这些方法的调用关系是如何保证框架的正确性、鲁棒性、伸缩性等。如果能把这些细节都想清楚，明白作者的思路与考虑，才可以源码理解入木三分了。</p><p>对于PROPAGATE状态，网上大多AQS的介绍也都只是浅显地提及是用来设置传播的，缺少对于这个状态存在必要性的思考。一开始我也想了很久不明白为什么一定需要一个PROPAGATE状态而不是直接根据tryAcquireShared的返回值来判断是否需要传播。后来也是去了Doug Lea的个人网站翻出当时最早引入PROPAGATE状态的提交，看到了原来的代码，以及<a href="http://bugs.java.com/上的bug才更厘清PROPAGATE状态引入的前因后果。" target="_blank" rel="noopener">http://bugs.java.com/上的bug才更厘清PROPAGATE状态引入的前因后果。</a></p><p>尽管看懂源码，也可能远远达不到能再造一个能与之媲美的轮子的程度，但是能对同步框架、锁、线程等有更深入的理解，也是很丰硕的收获了。</p><p>当然，AQS也有其局限性，由于维护的是FIFO队列。如果想要实现一个具有优先级的锁，AQS就派不上什么用处了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;写在开篇&quot;&gt;&lt;a href=&quot;#写在开篇&quot; class=&quot;headerlink&quot; title=&quot;写在开篇&quot;&gt;&lt;/a&gt;写在开篇&lt;/h2&gt;&lt;p&gt;文章转载自：&lt;a href=&quot;https://www.cnblogs.com/micrari/p/6937995.html。
      
    
    </summary>
    
      <category term="Java乐园" scheme="https://kyrie17.github.io/categories/Java%E4%B9%90%E5%9B%AD/"/>
    
    
      <category term="AQS" scheme="https://kyrie17.github.io/tags/AQS/"/>
    
  </entry>
  
  <entry>
    <title>CopyOnWriteArrayList源码分析-JDK1.7</title>
    <link href="https://kyrie17.github.io/2019/09/19/CopyOnWriteArrayList%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-JDK1-7/"/>
    <id>https://kyrie17.github.io/2019/09/19/CopyOnWriteArrayList源码分析-JDK1-7/</id>
    <published>2019-09-19T08:17:00.000Z</published>
    <updated>2019-09-21T02:25:21.304Z</updated>
    
    <content type="html"><![CDATA[<p>浅析JDK1.7 CopyOnWriteArrayList源码。</p><h2 id="写在开篇"><a href="#写在开篇" class="headerlink" title="写在开篇"></a>写在开篇</h2><p>CopyOnWriteArrayList使用了一种写时复制的方法，当有新元素添加到CopyOnWriteArrayList时，先从原有的数组中拷贝一份出来，然后在新的数组做写操作，写完之后，再将原来的数组引用指向到新数组。</p><p>CopyOnWriteArrayList采用了读写分离的思想，读和写不同的容器。如果写操作未完成或者引用还未指向新数组，那么从原数组读取数据；如果写操作完成，并且引用已经指向了新的数组，那么从新数组中读取数据。所以CopyOnWriteArrayList只能保证数据的最终一致性，不能保证数据的实时一致性。</p><h2 id="类的继承关系"><a href="#类的继承关系" class="headerlink" title="类的继承关系"></a>类的继承关系</h2><p>CopyOnWriteArrayList跟ArrayList一样实现了List，RandomAccess， Cloneable，Serializable接口，但是没有继承AbstractList。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyOnWriteArrayList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br></pre></td></tr></table></figure></p><h2 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 可重入锁 */</span></span><br><span class="line">   <span class="keyword">transient</span> <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">   <span class="comment">/** 对象数组 */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">transient</span> Object[] array;</span><br></pre></td></tr></table></figure><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p>CopyOnWriteArrayList有三个构造方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 创建一个空数组</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">CopyOnWriteArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       setArray(<span class="keyword">new</span> Object[<span class="number">0</span>]);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 以一个实现了Collection接口的集合类，来创建array</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">CopyOnWriteArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">       Object[] elements = c.toArray();</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">if</span> (elements.getClass() != Object[].class)</span><br><span class="line">           elements = Arrays.copyOf(elements, elements.length, Object[].class);</span><br><span class="line">       setArray(elements);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 以一个CopyOnWriteArrayList的集合类，来创建array</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">CopyOnWriteArrayList</span><span class="params">(E[] toCopyIn)</span> </span>&#123;</span><br><span class="line">       setArray(Arrays.copyOf(toCopyIn, toCopyIn.length, Object[].class));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h2 id="List接口的实现"><a href="#List接口的实现" class="headerlink" title="List接口的实现"></a>List接口的实现</h2><h3 id="add"><a href="#add" class="headerlink" title="add()"></a>add()</h3><p>和ArrayList一样的，CopyOnWriteArrayList有两种插入元素的方法。先看第一种，默认在数组尾部插入元素。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">       lock.lock(); <span class="comment">// 获得锁</span></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           Object[] elements = getArray();</span><br><span class="line">           <span class="keyword">int</span> len = elements.length;</span><br><span class="line">           Object[] newElements = Arrays.copyOf(elements, len + <span class="number">1</span>); <span class="comment">// 将array复制到一个扩容了的新数组</span></span><br><span class="line">           newElements[len] = e; <span class="comment">// 插入新值</span></span><br><span class="line">           setArray(newElements); <span class="comment">// 将array引用指向新数组</span></span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           lock.unlock(); <span class="comment">// 释放锁</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>另一种是在指定下标插入元素。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">       lock.lock(); <span class="comment">// 获得锁</span></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           Object[] elements = getArray();</span><br><span class="line">           <span class="keyword">int</span> len = elements.length;</span><br><span class="line">           <span class="keyword">if</span> (index &gt; len || index &lt; <span class="number">0</span>) <span class="comment">// 检查下标</span></span><br><span class="line">               <span class="keyword">throw</span> <span class="keyword">new</span> IndexOutOfBoundsException(<span class="string">"Index: "</span>+index+</span><br><span class="line">                                                   <span class="string">", Size: "</span>+len);</span><br><span class="line">           Object[] newElements;</span><br><span class="line">           <span class="keyword">int</span> numMoved = len - index;</span><br><span class="line">           <span class="keyword">if</span> (numMoved == <span class="number">0</span>) <span class="comment">// 在数组尾部插入元素</span></span><br><span class="line">               newElements = Arrays.copyOf(elements, len + <span class="number">1</span>);</span><br><span class="line">           <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="comment">// 扩容</span></span><br><span class="line">               newElements = <span class="keyword">new</span> Object[len + <span class="number">1</span>];</span><br><span class="line">               <span class="comment">// 拷贝旧数组0到index处的到新数组0到index</span></span><br><span class="line">               System.arraycopy(elements, <span class="number">0</span>, newElements, <span class="number">0</span>, index);</span><br><span class="line">               <span class="comment">// 拷贝旧数组index到最后的数组到新数组index+1到最后</span></span><br><span class="line">               System.arraycopy(elements, index, newElements, index + <span class="number">1</span>,</span><br><span class="line">                                numMoved);</span><br><span class="line">           &#125;</span><br><span class="line">           newElements[index] = element; <span class="comment">// 插入新元素</span></span><br><span class="line">           setArray(newElements); <span class="comment">// 将array引用指向新数组</span></span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           lock.unlock(); <span class="comment">// 释放锁</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h3 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h3><p>读的时候不加锁，代码很简单。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> get(getArray(), index);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> E <span class="title">get</span><span class="params">(Object[] a, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> (E) a[index];</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h3 id="set"><a href="#set" class="headerlink" title="set()"></a>set()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">     lock.lock(); <span class="comment">// 获取锁</span></span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         Object[] elements = getArray();</span><br><span class="line">         E oldValue = get(elements, index);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新旧值不相等才进行替换</span></span><br><span class="line">         <span class="keyword">if</span> (oldValue != element) &#123;</span><br><span class="line">             <span class="keyword">int</span> len = elements.length;</span><br><span class="line">             <span class="comment">// 拷贝一份到新数组</span></span><br><span class="line">             Object[] newElements = Arrays.copyOf(elements, len);</span><br><span class="line">             newElements[index] = element; <span class="comment">// 替换旧元素</span></span><br><span class="line">             setArray(newElements); <span class="comment">// 将array引用指向新数组</span></span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">             setArray(elements);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="keyword">return</span> oldValue;</span><br><span class="line">     &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">         lock.unlock(); <span class="comment">// 释放锁</span></span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h3 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h3><p>同样地，CopyOnWriteArrayList有两个remove()，先来看一下根据下标删除元素的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">    lock.lock(); <span class="comment">// 获取锁</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Object[] elements = getArray();</span><br><span class="line">        <span class="keyword">int</span> len = elements.length;</span><br><span class="line">        E oldValue = get(elements, index);</span><br><span class="line">        <span class="keyword">int</span> numMoved = len - index - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (numMoved == <span class="number">0</span>) <span class="comment">// 删除元素在数组尾部</span></span><br><span class="line">            setArray(Arrays.copyOf(elements, len - <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            Object[] newElements = <span class="keyword">new</span> Object[len - <span class="number">1</span>];</span><br><span class="line">            <span class="comment">// 拷贝旧数组0到index处的到新数组0到index</span></span><br><span class="line">            System.arraycopy(elements, <span class="number">0</span>, newElements, <span class="number">0</span>, index);</span><br><span class="line">            <span class="comment">// 拷贝旧数组index+1到最后处的到新数组index到最后</span></span><br><span class="line">            System.arraycopy(elements, index + <span class="number">1</span>, newElements, index,</span><br><span class="line">                             numMoved);</span><br><span class="line">            setArray(newElements); <span class="comment">// 将array引用指向新数组</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> oldValue;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        lock.unlock(); <span class="comment">// 释放锁</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着看一下删除第一个相同元素的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">       lock.lock(); <span class="comment">// 获取锁</span></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           Object[] elements = getArray();</span><br><span class="line">           <span class="keyword">int</span> len = elements.length;</span><br><span class="line">           <span class="keyword">if</span> (len != <span class="number">0</span>) &#123;</span><br><span class="line">               </span><br><span class="line">               <span class="keyword">int</span> newlen = len - <span class="number">1</span>;</span><br><span class="line">               Object[] newElements = <span class="keyword">new</span> Object[newlen];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除第一个出现的相同元素</span></span><br><span class="line">               <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; newlen; ++i) &#123;</span><br><span class="line">                   <span class="keyword">if</span> (eq(o, elements[i])) &#123;</span><br><span class="line">                       <span class="comment">// 将相同元素后面的元素复制到新数组末尾</span></span><br><span class="line">                       <span class="keyword">for</span> (<span class="keyword">int</span> k = i + <span class="number">1</span>; k &lt; len; ++k)</span><br><span class="line">                           newElements[k-<span class="number">1</span>] = elements[k];</span><br><span class="line">                       setArray(newElements); <span class="comment">// 将array引用指向新数组</span></span><br><span class="line">                       <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                   &#125; <span class="keyword">else</span></span><br><span class="line">                       newElements[i] = elements[i];</span><br><span class="line">               &#125;</span><br><span class="line"></span><br><span class="line">               <span class="keyword">if</span> (eq(o, elements[newlen])) &#123;</span><br><span class="line">                   setArray(newElements);</span><br><span class="line">                   <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">       &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">           lock.unlock(); <span class="comment">// 释放锁</span></span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;浅析JDK1.7 CopyOnWriteArrayList源码。&lt;/p&gt;
&lt;h2 id=&quot;写在开篇&quot;&gt;&lt;a href=&quot;#写在开篇&quot; class=&quot;headerlink&quot; title=&quot;写在开篇&quot;&gt;&lt;/a&gt;写在开篇&lt;/h2&gt;&lt;p&gt;CopyOnWriteArrayList使用
      
    
    </summary>
    
      <category term="Java乐园" scheme="https://kyrie17.github.io/categories/Java%E4%B9%90%E5%9B%AD/"/>
    
    
      <category term="ArrayList" scheme="https://kyrie17.github.io/tags/ArrayList/"/>
    
  </entry>
  
  <entry>
    <title>LinkedList源码分析-JDK1.7</title>
    <link href="https://kyrie17.github.io/2019/09/18/LinkedList%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-JDK1-7/"/>
    <id>https://kyrie17.github.io/2019/09/18/LinkedList源码分析-JDK1-7/</id>
    <published>2019-09-18T12:06:06.000Z</published>
    <updated>2019-09-19T06:20:30.895Z</updated>
    
    <content type="html"><![CDATA[<p>浅析JDK1.7 LinkedList源码。</p><h2 id="写在开篇"><a href="#写在开篇" class="headerlink" title="写在开篇"></a>写在开篇</h2><p>简单介绍一下LinkedList，它使用了双向循环链表作为其存储的数据结构。由于链表的特点是可以自由的添加新的元素，因此LinkedList不需要初始化大小，且列表伸缩性比ArrayList强(ArrayList只能伸展，不能收缩)。LinkedList在根据一个index查找随机节点时，会判断此index在左半区还是右半区，这样就可以选择是从头节点正向遍历，还是从尾节点反向遍历，要比只从头节点遍历的效率高一些。</p><h2 id="类的继承结构"><a href="#类的继承结构" class="headerlink" title="类的继承结构"></a>类的继承结构</h2><p>ArrayList继承AbstractSequentialList抽象类，实现了List（规定了List的操作规范）、Deque（双端队列）、Cloneable（可拷贝）、Serializable（可序列化）这几个接口。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">extends</span> <span class="title">AbstractSequentialList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">Deque</span>&lt;<span class="title">E</span>&gt;, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br></pre></td></tr></table></figure></p><h2 id="存储结点–Node"><a href="#存储结点–Node" class="headerlink" title="存储结点–Node"></a>存储结点–Node</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Node</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">       E item;<span class="comment">//结点数据元素</span></span><br><span class="line">       Node&lt;E&gt; next;<span class="comment">//后置结点</span></span><br><span class="line">       Node&lt;E&gt; prev;<span class="comment">//前置结点</span></span><br><span class="line">       <span class="comment">// ...</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 元素个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 链表的头结点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; first;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 链表的尾结点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;E&gt; last;</span><br></pre></td></tr></table></figure><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p>LinkedList有两个构造方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 空构造方法</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 以实现了Collection接口的集合类，来初始化链表</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">LinkedList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>();</span><br><span class="line">       addAll(c);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h2 id="List接口的实现"><a href="#List接口的实现" class="headerlink" title="List接口的实现"></a>List接口的实现</h2><h3 id="add"><a href="#add" class="headerlink" title="add()"></a>add()</h3><p>LinkedList有两个add()，第一个是默认在链表末尾插入新元素。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">       linkLast(e);</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>另一个是在指定下标插入元素。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">       checkPositionIndex(index); <span class="comment">// 检查下标</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (index == size)</span><br><span class="line">           linkLast(element);</span><br><span class="line">       <span class="keyword">else</span></span><br><span class="line">           linkBefore(element, node(index));</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>接下来详细看看add()方法的核心：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkLast</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; l = last;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(l, e, <span class="keyword">null</span>);</span><br><span class="line">    last = newNode;<span class="comment">// 添加的新元素默认作为尾节点</span></span><br><span class="line">    <span class="keyword">if</span> (l == <span class="keyword">null</span>)</span><br><span class="line">        first = newNode; </span><br><span class="line">    <span class="keyword">else</span> <span class="comment">// 如果尾结点不为空</span></span><br><span class="line">        l.next = newNode; <span class="comment">// 将尾结点下一个结点设为新结点</span></span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">linkBefore</span><span class="params">(E e, Node&lt;E&gt; succ)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; pred = succ.prev; <span class="comment">// 保存succ的前置结点</span></span><br><span class="line">    <span class="keyword">final</span> Node&lt;E&gt; newNode = <span class="keyword">new</span> Node&lt;&gt;(pred, e, succ);</span><br><span class="line">    succ.prev = newNode;<span class="comment">// 将succ的前置结点改为新结点</span></span><br><span class="line">    <span class="keyword">if</span> (pred == <span class="keyword">null</span>)</span><br><span class="line">    <span class="comment">// 如果succ的前置结点为空，则设置新结点为头结点</span></span><br><span class="line">        first = newNode;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    <span class="comment">// 如果不为空，设置新结点前置结点为刚刚保存的pred</span></span><br><span class="line">        pred.next = newNode;</span><br><span class="line">    size++;</span><br><span class="line">    modCount++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="put"><a href="#put" class="headerlink" title="put()"></a>put()</h3><p>put()比较简单，直接贴源码。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">       checkElementIndex(index); </span><br><span class="line">       Node&lt;E&gt; x = node(index);</span><br><span class="line">       E oldVal = x.item;</span><br><span class="line">       x.item = element; </span><br><span class="line">       <span class="keyword">return</span> oldVal;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h3 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">       checkElementIndex(index);</span><br><span class="line">       <span class="keyword">return</span> node(index).item;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function">Node&lt;E&gt; <span class="title">node</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 判断下标在前半段还是后半段，决定从头结点还是尾结点开始遍历</span></span><br><span class="line">       <span class="keyword">if</span> (index &lt; (size &gt;&gt; <span class="number">1</span>)) &#123;</span><br><span class="line">           Node&lt;E&gt; x = first;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index; i++)</span><br><span class="line">               x = x.next;</span><br><span class="line">           <span class="keyword">return</span> x;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           Node&lt;E&gt; x = last;</span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> i = size - <span class="number">1</span>; i &gt; index; i--)</span><br><span class="line">               x = x.prev;</span><br><span class="line">           <span class="keyword">return</span> x;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123; <span class="comment">// 删除元素值为null的结点</span></span><br><span class="line">           <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">               <span class="keyword">if</span> (x.item == <span class="keyword">null</span>) &#123;</span><br><span class="line">                   unlink(x);</span><br><span class="line">                   <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123; <span class="comment">// 删除元素值相等的结点</span></span><br><span class="line">           <span class="keyword">for</span> (Node&lt;E&gt; x = first; x != <span class="keyword">null</span>; x = x.next) &#123;</span><br><span class="line">               <span class="keyword">if</span> (o.equals(x.item)) &#123;</span><br><span class="line">                   unlink(x);</span><br><span class="line">                   <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function">E <span class="title">unlink</span><span class="params">(Node&lt;E&gt; x)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">final</span> E element = x.item;</span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; next = x.next;</span><br><span class="line">       <span class="keyword">final</span> Node&lt;E&gt; prev = x.prev;</span><br><span class="line"></span><br><span class="line"><span class="comment">// prev为空，则next为头结点</span></span><br><span class="line">       <span class="keyword">if</span> (prev == <span class="keyword">null</span>) &#123;</span><br><span class="line">           first = next;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           prev.next = next;</span><br><span class="line">           x.prev = <span class="keyword">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// next为空，则prev为尾结点</span></span><br><span class="line">       <span class="keyword">if</span> (next == <span class="keyword">null</span>) &#123;</span><br><span class="line">           last = prev;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           next.prev = prev;</span><br><span class="line">           x.next = <span class="keyword">null</span>;</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       x.item = <span class="keyword">null</span>;</span><br><span class="line">       size--;</span><br><span class="line">       modCount++;</span><br><span class="line">       <span class="keyword">return</span> element;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;浅析JDK1.7 LinkedList源码。&lt;/p&gt;
&lt;h2 id=&quot;写在开篇&quot;&gt;&lt;a href=&quot;#写在开篇&quot; class=&quot;headerlink&quot; title=&quot;写在开篇&quot;&gt;&lt;/a&gt;写在开篇&lt;/h2&gt;&lt;p&gt;简单介绍一下LinkedList，它使用了双向循环链表作为其存储
      
    
    </summary>
    
      <category term="Java乐园" scheme="https://kyrie17.github.io/categories/Java%E4%B9%90%E5%9B%AD/"/>
    
    
      <category term="LinkedList" scheme="https://kyrie17.github.io/tags/LinkedList/"/>
    
  </entry>
  
  <entry>
    <title>ArrayList源码分析-JDK1.7</title>
    <link href="https://kyrie17.github.io/2019/09/18/ArrayList%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-JDK1-7/"/>
    <id>https://kyrie17.github.io/2019/09/18/ArrayList源码分析-JDK1-7/</id>
    <published>2019-09-18T08:18:05.000Z</published>
    <updated>2019-09-19T06:16:57.674Z</updated>
    
    <content type="html"><![CDATA[<p>浅析JDK1.7 ArrayList源码。</p><h2 id="写在开篇"><a href="#写在开篇" class="headerlink" title="写在开篇"></a>写在开篇</h2><p>ArrayList源码相比我们之前看过的Map系列的源码要简单一些，所以接下来我们按照原来的套路，简单分析一下ArrayList的源码吧。</p><h2 id="类的继承关系"><a href="#类的继承关系" class="headerlink" title="类的继承关系"></a>类的继承关系</h2><p>ArrayList继承AbstractList抽象类，实现了List（规定了List的操作规范）、RandomAccess（可随机访问）、Cloneable（可拷贝）、Serializable（可序列化）这几个接口。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayList</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br></pre></td></tr></table></figure></p><h2 id="成员变量"><a href="#成员变量" class="headerlink" title="成员变量"></a>成员变量</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 使用默认构造方法创建数组时的大小</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CAPACITY = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 标识 elementData 使用默认构造方法创建</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Object[] EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 元素数组</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">transient</span> Object[] elementData;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 实际数组大小</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br></pre></td></tr></table></figure><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p>ArrayList中有三个构造方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 给定参数初始化数组的大小</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(<span class="keyword">int</span> initialCapacity)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>();</span><br><span class="line">       <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal Capacity: "</span>+</span><br><span class="line">                                              initialCapacity);</span><br><span class="line">       <span class="keyword">this</span>.elementData = <span class="keyword">new</span> Object[initialCapacity];</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 默认初始化一个空数组</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>();</span><br><span class="line">       <span class="keyword">this</span>.elementData = EMPTY_ELEMENTDATA;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 以实现了Collection接口的集合类，来初始化elementData</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="title">ArrayList</span><span class="params">(Collection&lt;? extends E&gt; c)</span> </span>&#123;</span><br><span class="line">       elementData = c.toArray();</span><br><span class="line">       size = elementData.length;</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">if</span> (elementData.getClass() != Object[].class)</span><br><span class="line">           elementData = Arrays.copyOf(elementData, size, Object[].class);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h2 id="List接口的实现"><a href="#List接口的实现" class="headerlink" title="List接口的实现"></a>List接口的实现</h2><h3 id="add"><a href="#add" class="headerlink" title="add()"></a>add()</h3><p>ArrayList中有两个add方法，第一个是默认在下标为size+1的位置添加元素。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 扩容检查</span></span><br><span class="line">       ensureCapacityInternal(size + <span class="number">1</span>);  </span><br><span class="line">       <span class="comment">// 数组末尾添加元素</span></span><br><span class="line">       elementData[size++] = e;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>另一个add()则是在指定位置添加元素。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">        rangeCheckForAdd(index);</span><br><span class="line"></span><br><span class="line">        ensureCapacityInternal(size + <span class="number">1</span>); </span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 将旧数组拷贝到一个新数组中</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> elementData 被复制的原数组 </span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> index 被复制数组的第几个元素开始复制</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> elementData 复制的目标数组</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> index + 1 从目标数组index + 1位置开始粘贴</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> size - index 复制的元素个数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.arraycopy(elementData, index, elementData, index + <span class="number">1</span>,</span><br><span class="line">                         size - index);</span><br><span class="line">        <span class="comment">// 将新元素赋给该下标</span></span><br><span class="line">        elementData[index] = element;</span><br><span class="line">        size++;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><h3 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureCapacityInternal</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 是否为空数组</span></span><br><span class="line">       <span class="keyword">if</span> (elementData == EMPTY_ELEMENTDATA) &#123;</span><br><span class="line">           minCapacity = Math.max(DEFAULT_CAPACITY, minCapacity);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       ensureExplicitCapacity(minCapacity);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ensureExplicitCapacity</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">       modCount++; <span class="comment">// 增加数组的操作次数（其为AbstractList的成员变量）</span></span><br><span class="line"><span class="comment">// 如果需要的最小容量比elementData数组长度小，则扩容</span></span><br><span class="line">       <span class="keyword">if</span> (minCapacity - elementData.length &gt; <span class="number">0</span>)</span><br><span class="line">           grow(minCapacity);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">grow</span><span class="params">(<span class="keyword">int</span> minCapacity)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> oldCapacity = elementData.length;</span><br><span class="line">       <span class="comment">// 新容量为旧容量的3/2</span></span><br><span class="line">       <span class="keyword">int</span> newCapacity = oldCapacity + (oldCapacity &gt;&gt; <span class="number">1</span>);</span><br><span class="line">       <span class="comment">// 如果新容量还是小于扩容需要的最小容量，则将新容量调整为扩容需要的最小容量</span></span><br><span class="line">       <span class="keyword">if</span> (newCapacity - minCapacity &lt; <span class="number">0</span>)</span><br><span class="line">           newCapacity = minCapacity;</span><br><span class="line">       <span class="comment">// 新容量不超过Integer.MAX_VALUE-8</span></span><br><span class="line">       <span class="keyword">if</span> (newCapacity - MAX_ARRAY_SIZE &gt; <span class="number">0</span>)</span><br><span class="line">           newCapacity = hugeCapacity(minCapacity);</span><br><span class="line"></span><br><span class="line">       elementData = Arrays.copyOf(elementData, newCapacity);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="set"><a href="#set" class="headerlink" title="set()"></a>set()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">set</span><span class="params">(<span class="keyword">int</span> index, E element)</span> </span>&#123;</span><br><span class="line">       rangeCheck(index); <span class="comment">// 检查下标</span></span><br><span class="line"></span><br><span class="line">       E oldValue = elementData(index);</span><br><span class="line">       elementData[index] = element; <span class="comment">// 将element赋值为指定下标</span></span><br><span class="line">       <span class="keyword">return</span> oldValue;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">       rangeCheck(index); <span class="comment">// 检查下标</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> elementData(index); <span class="comment">// 返回指定下标的元素</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h3 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h3><p>同样地，有两个remove()方法。一个是删除下标为index的元素。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">remove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">       rangeCheck(index); <span class="comment">// 检查下标</span></span><br><span class="line"></span><br><span class="line">       modCount++;</span><br><span class="line">       E oldValue = elementData(index);</span><br><span class="line"></span><br><span class="line">       <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>; <span class="comment">// 需要移动的个数</span></span><br><span class="line">       <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">       <span class="comment">// 将下标为index+1后的元素向前移动一位</span></span><br><span class="line">           System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                            numMoved);</span><br><span class="line">       <span class="comment">// 将下标为size的元素置为空，同时将size-1</span></span><br><span class="line">       elementData[--size] = <span class="keyword">null</span>; </span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> oldValue;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>另一个是删除数组中相同的元素。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">if</span> (o == <span class="keyword">null</span>) &#123; <span class="comment">// 删除数组中的空元素</span></span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">               <span class="keyword">if</span> (elementData[index] == <span class="keyword">null</span>) &#123;</span><br><span class="line">                   fastRemove(index);</span><br><span class="line">                   <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">               &#125;</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123; <span class="comment">// 输出数组中和o相同的元素</span></span><br><span class="line">           <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>; index &lt; size; index++)</span><br><span class="line">               <span class="keyword">if</span> (o.equals(elementData[index])) &#123;</span><br><span class="line">                   fastRemove(index);</span><br><span class="line">                   <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">               &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 与上面讲的删除remove()过程相似</span></span><br><span class="line">   <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">fastRemove</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">       modCount++;</span><br><span class="line">       <span class="keyword">int</span> numMoved = size - index - <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">if</span> (numMoved &gt; <span class="number">0</span>)</span><br><span class="line">           System.arraycopy(elementData, index+<span class="number">1</span>, elementData, index,</span><br><span class="line">                            numMoved);</span><br><span class="line">       elementData[--size] = <span class="keyword">null</span>; </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h2 id="为什么是线程不安全的"><a href="#为什么是线程不安全的" class="headerlink" title="为什么是线程不安全的"></a>为什么是线程不安全的</h2><p>主要有两个线程不安全的隐患，都出现在下面这段代码中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 扩容检查</span></span><br><span class="line">       ensureCapacityInternal(size + <span class="number">1</span>);  </span><br><span class="line">       <span class="comment">// 数组末尾添加元素</span></span><br><span class="line">       elementData[size++] = e;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><h3 id="扩容检查时"><a href="#扩容检查时" class="headerlink" title="扩容检查时"></a>扩容检查时</h3><p>假设现在有A、B两个线程在对数组进行插入元素操作，此时size=9（ArrayList 数组大小为默认的10）。</p><ol><li>线程 A 进入add()，获取到size为9，调用ensureCapacityInternal()后判断不需要扩容，时间片消耗完，线程A挂起。</li><li>线程 B 开始执行，调用ensureCapacityInternal()后发现也不需要扩容。于是插入元素，且size自增1（size=10）。</li><li>线程 A 接着执行，尝试在下标为10的位置插入元素，此时就会抛出ArrayIndexOutOfBoundsException。</li></ol><h3 id="向数组末尾添加元素时"><a href="#向数组末尾添加元素时" class="headerlink" title="向数组末尾添加元素时"></a>向数组末尾添加元素时</h3><p>同样现在有两个线程A、B在对数组进行插入元素操作，size=0。</p><ol><li>线程 A 执行完<code>elementData[size] = e;</code>后时间片耗尽，挂起。</li><li>线程 B 开始执行，由于size还是为0，所以在<code>elementData[size] = e;</code>时，会将线程 A 插入的元素覆盖掉。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;浅析JDK1.7 ArrayList源码。&lt;/p&gt;
&lt;h2 id=&quot;写在开篇&quot;&gt;&lt;a href=&quot;#写在开篇&quot; class=&quot;headerlink&quot; title=&quot;写在开篇&quot;&gt;&lt;/a&gt;写在开篇&lt;/h2&gt;&lt;p&gt;ArrayList源码相比我们之前看过的Map系列的源码要简单一些
      
    
    </summary>
    
      <category term="Java乐园" scheme="https://kyrie17.github.io/categories/Java%E4%B9%90%E5%9B%AD/"/>
    
    
      <category term="ArrayList" scheme="https://kyrie17.github.io/tags/ArrayList/"/>
    
  </entry>
  
  <entry>
    <title>ConcurrentHashMap源码分析-JDK1.7</title>
    <link href="https://kyrie17.github.io/2019/09/07/ConcurrentHashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-JDK1-7/"/>
    <id>https://kyrie17.github.io/2019/09/07/ConcurrentHashMap源码分析-JDK1-7/</id>
    <published>2019-09-07T09:43:47.000Z</published>
    <updated>2020-03-19T12:15:47.451Z</updated>
    
    <content type="html"><![CDATA[<p>浅析JDK1.7 ConcurrentHashMap源码。</p><h2 id="写在开篇"><a href="#写在开篇" class="headerlink" title="写在开篇"></a>写在开篇</h2><p>先贴张图看下ConcurrentHashMap JDK 1.7的结构：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/chm1.7.01.png" alt="CHM1.7.01" title>                </div>                <div class="image-caption">CHM1.7.01</div>            </figure></p><p>先大体介绍一下：ConcurrentHashMap 是由Segment数组结构和HashEntry数组结构组成。 </p><ul><li>Segment是一种可重入锁ReentrantLock，在ConcurrentHashMap里扮演锁的角色，HashEntry则用于存储键值对数据</li><li>一个Segment里包含一个HashEntry数组，每个HashEntry是一个链表结构的元素，这与HashMap结构相似</li></ul><p>简单来讲，就是ConcurrentHashMap比HashMap多了一次hash过程，第1次hash定位到Segment，第2次hash定位到HashEntry，然后链表搜索找到指定节点。</p><p>该种实现方式的缺点是hash过程比普通的HashMap要长，但是优点也很明显，在进行写操作时，只需锁住写元素所在的Segment即可，其他Segment无需加锁，提高了并发读写的效率。</p><h2 id="Segment"><a href="#Segment" class="headerlink" title="Segment"></a>Segment</h2><p>先看下Segment的定义，是ConcurrentHashMap的一个静态内部类，继承了ReentrantLock。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">Segment</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">ReentrantLock</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br></pre></td></tr></table></figure></p><p>接着看下其中几个重要的属性：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 一个HashEntry数组table，HashEntry是链表的节点定义</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">volatile</span> HashEntry&lt;K,V&gt;[] table;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Segment中Entry的数量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 阈值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> threshold;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 负载因子</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</span><br></pre></td></tr></table></figure></p><h2 id="HashEntry"><a href="#HashEntry" class="headerlink" title="HashEntry"></a>HashEntry</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">HashEntry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="keyword">int</span> hash;</span><br><span class="line">    <span class="keyword">final</span> K key;</span><br><span class="line">    <span class="keyword">volatile</span> V value;</span><br><span class="line">    <span class="keyword">volatile</span> HashEntry&lt;K,V&gt; next;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由定义可知，value和next均为使用volatile修饰，一个线程对该Segment内部的某个链表节点HashEntry的value或下一个节点next修改能够对其他线程可见。</p><h2 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h2><h3 id="类的继承关系"><a href="#类的继承关系" class="headerlink" title="类的继承关系"></a>类的继承关系</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcurrentHashMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">ConcurrentMap</span>&lt;<span class="title">K</span>, <span class="title">V</span>&gt;, <span class="title">Serializable</span> </span>&#123;</span><br></pre></td></tr></table></figure><p>继承于抽象的AbstractMap，实现了ConcurrentMap，Serializable这两个接口。</p><h3 id="几个重要的属性"><a href="#几个重要的属性" class="headerlink" title="几个重要的属性"></a>几个重要的属性</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 段掩码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> segmentMask;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 段偏移量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> segmentShift;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ConcurrentHashMap中的桶</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">final</span> Segment&lt;K,V&gt;[] segments;</span><br></pre></td></tr></table></figure><p>segmentShift和segmentMask，这两个全局变量在定位segment时的哈希算法里需要使用。</p><h3 id="几个重要的默认常量"><a href="#几个重要的默认常量" class="headerlink" title="几个重要的默认常量"></a>几个重要的默认常量</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 指的是整个ConcurrentHashMap默认的初始容量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * ConcurrentHashMap容量的最大值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Segment 数组不可以扩容，所以这个负载因子是给每个 Segment 内部使用的。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 默认的并发数，即segments数组的大小，ConcurrentHashMap会使用大于等于该值的最小2幂指数作为实际并发度</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_CONCURRENCY_LEVEL = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * segment中table的最小容量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MIN_SEGMENT_TABLE_CAPACITY = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * segment数组最大的大小</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAX_SEGMENTS = <span class="number">1</span> &lt;&lt; <span class="number">16</span>;</span><br></pre></td></tr></table></figure><h3 id="ConcurrentHashMap的构造函数"><a href="#ConcurrentHashMap的构造函数" class="headerlink" title="ConcurrentHashMap的构造函数"></a>ConcurrentHashMap的构造函数</h3><ul><li>Segment数组初始化后，不能再扩容</li><li>只初始化了segment[0]，其他位置仍然是 null</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ConcurrentHashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity,</span></span></span><br><span class="line"><span class="function"><span class="params">                         <span class="keyword">float</span> loadFactor, <span class="keyword">int</span> concurrencyLevel)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!(loadFactor &gt; <span class="number">0</span>) || initialCapacity &lt; <span class="number">0</span> || concurrencyLevel &lt;= <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException();</span><br><span class="line">    <span class="keyword">if</span> (concurrencyLevel &gt; MAX_SEGMENTS)</span><br><span class="line">        concurrencyLevel = MAX_SEGMENTS;</span><br><span class="line">    <span class="keyword">int</span> sshift = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ssize = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * ssize：segments数组的大小</span></span><br><span class="line"><span class="comment">     * 不能小于concurrencyLevel，默认为16</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">while</span> (ssize &lt; concurrencyLevel) &#123;</span><br><span class="line">        ++sshift;</span><br><span class="line">        ssize &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// segmentShift和segmentMask将用于取segment的下标</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 比如concurrencyLevel为17，那么ssize为32，即2^5；sshift为5</span></span><br><span class="line"><span class="comment">     * segmentShift即27了，后面在取segment下标的时候，会无符号左移27位，也就是取高5位的时候，就是0-31，此时segment下标也是0-31，取模后对应着每个segment</span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * segmentMask就是2的n次方-1，这里是5，用于取模</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">this</span>.segmentShift = <span class="number">32</span> - sshift;</span><br><span class="line">    <span class="keyword">this</span>.segmentMask = ssize - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">        initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">    <span class="keyword">int</span> c = initialCapacity / ssize;</span><br><span class="line">    <span class="keyword">if</span> (c * ssize &lt; initialCapacity)</span><br><span class="line">        ++c;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * cap：Segment内部HashEntry数组的大小</span></span><br><span class="line"><span class="comment">     * 最小为MIN_SEGMENT_TABLE_CAPACITY，默认为2</span></span><br><span class="line"><span class="comment">     * 实际大小根据initialCapacity/ssize得到</span></span><br><span class="line"><span class="comment">     * 即整体容量大小除以Segment数组的数量</span></span><br><span class="line"><span class="comment">     * 得到每个Segment内部的table的大小</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">int</span> cap = MIN_SEGMENT_TABLE_CAPACITY;</span><br><span class="line">    <span class="keyword">while</span> (cap &lt; c)</span><br><span class="line">        cap &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 创建segments和segments[0]</span></span><br><span class="line">    Segment&lt;K,V&gt; s0 =</span><br><span class="line">        <span class="keyword">new</span> Segment&lt;K,V&gt;(loadFactor, (<span class="keyword">int</span>)(cap * loadFactor),</span><br><span class="line">                         (HashEntry&lt;K,V&gt;[])<span class="keyword">new</span> HashEntry[cap]);</span><br><span class="line">    Segment&lt;K,V&gt;[] ss = (Segment&lt;K,V&gt;[])<span class="keyword">new</span> Segment[ssize];</span><br><span class="line">    <span class="comment">// 往数组写入 segment[0]</span></span><br><span class="line">    UNSAFE.putOrderedObject(ss, SBASE, s0);</span><br><span class="line">    <span class="keyword">this</span>.segments = ss;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="put"><a href="#put" class="headerlink" title="put()"></a>put()</h3><p>在ConcurrentHashMap中的put操作是没有加锁的，而在Segment中的put操作，通过ReentrantLock加锁。</p><p>首先通过key的hash确定segments数组的下标，即需要往哪个segment存放数据。确定好segment之后，则调用该segment的put方法，写到该segment内部的table数组的某个链表中。</p><p>先看下ConcurrentHashMap中的put():<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    Segment&lt;K,V&gt; s;</span><br><span class="line">    <span class="keyword">if</span> (value == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException();</span><br><span class="line">    <span class="comment">// 根据key的hash，确定具体的Segment</span></span><br><span class="line">    <span class="keyword">int</span> hash = hash(key);</span><br><span class="line">    <span class="keyword">int</span> j = (hash &gt;&gt;&gt; segmentShift) &amp; segmentMask;</span><br><span class="line">    <span class="comment">// 如果segments数组的该位置还没segment，初始化</span></span><br><span class="line">    <span class="keyword">if</span> ((s = (Segment&lt;K,V&gt;)UNSAFE.getObject          </span><br><span class="line">         (segments, (j &lt;&lt; SSHIFT) + SBASE)) == <span class="keyword">null</span>) </span><br><span class="line">        s = ensureSegment(j);</span><br><span class="line">    <span class="comment">// 插入新值至槽s中</span></span><br><span class="line">    <span class="keyword">return</span> s.put(key, hash, value, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>看下ensureSegment()如何初始化槽：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> Segment&lt;K,V&gt; <span class="title">ensureSegment</span><span class="params">(<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Segment&lt;K,V&gt;[] ss = <span class="keyword">this</span>.segments;</span><br><span class="line">    <span class="keyword">long</span> u = (k &lt;&lt; SSHIFT) + SBASE; <span class="comment">// raw offset</span></span><br><span class="line">    Segment&lt;K,V&gt; seg;</span><br><span class="line">    <span class="keyword">if</span> ((seg = (Segment&lt;K,V&gt;)UNSAFE.getObjectVolatile(ss, u)) == <span class="keyword">null</span>) &#123;</span><br><span class="line">    <span class="comment">// 使用当前 segment[0] 处的数组长度和负载因子来初始化 segment[k]</span></span><br><span class="line">        Segment&lt;K,V&gt; proto = ss[<span class="number">0</span>]; </span><br><span class="line">        <span class="keyword">int</span> cap = proto.table.length;</span><br><span class="line">        <span class="keyword">float</span> lf = proto.loadFactor;</span><br><span class="line">        <span class="keyword">int</span> threshold = (<span class="keyword">int</span>)(cap * lf);</span><br><span class="line">        <span class="comment">// 初始化 segment[k] 内部的数组</span></span><br><span class="line">        HashEntry&lt;K,V&gt;[] tab = (HashEntry&lt;K,V&gt;[])<span class="keyword">new</span> HashEntry[cap];</span><br><span class="line">        <span class="keyword">if</span> ((seg = (Segment&lt;K,V&gt;)UNSAFE.getObjectVolatile(ss, u))</span><br><span class="line">            == <span class="keyword">null</span>) &#123; <span class="comment">// recheck</span></span><br><span class="line">            Segment&lt;K,V&gt; s = <span class="keyword">new</span> Segment&lt;K,V&gt;(lf, threshold, tab);</span><br><span class="line">            <span class="keyword">while</span> ((seg = (Segment&lt;K,V&gt;)UNSAFE.getObjectVolatile(ss, u))</span><br><span class="line">                   == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 循环CAS赋值给Segment[]后退出</span></span><br><span class="line">                <span class="keyword">if</span> (UNSAFE.compareAndSwapObject(ss, u, <span class="keyword">null</span>, seg = s))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> seg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接下来是Segment中的put()，首先获取lock锁，然后根据key的hash值，获取在segment内部的HashEntry数组table的下标，从而获取对应的链表：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">put</span><span class="params">(K key, <span class="keyword">int</span> hash, V value, <span class="keyword">boolean</span> onlyIfAbsent)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * tryLock：非阻塞获取lock</span></span><br><span class="line"><span class="comment"> * scanAndLockForPut：该segment锁被其他线程持有了，则非阻塞重试3次，超过3次则阻塞等待锁。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">    HashEntry&lt;K,V&gt; node = tryLock() ? <span class="keyword">null</span> :</span><br><span class="line">    scanAndLockForPut(key, hash, value);</span><br><span class="line">    V oldValue;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        HashEntry&lt;K,V&gt;[] tab = table;</span><br><span class="line">        <span class="keyword">int</span> index = (tab.length - <span class="number">1</span>) &amp; hash;</span><br><span class="line">        <span class="comment">// 链表头结点</span></span><br><span class="line">        HashEntry&lt;K,V&gt; first = entryAt(tab, index);</span><br><span class="line">        <span class="keyword">for</span> (HashEntry&lt;K,V&gt; e = first;;) &#123;</span><br><span class="line">            <span class="comment">// table中已存在结点</span></span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">                K k;</span><br><span class="line">                <span class="comment">// 已经存在，则更新value值</span></span><br><span class="line">                <span class="keyword">if</span> ((k = e.key) == key ||</span><br><span class="line">                    (e.hash == hash &amp;&amp; key.equals(k))) &#123;</span><br><span class="line">                    oldValue = e.value;</span><br><span class="line">                    <span class="keyword">if</span> (!onlyIfAbsent) &#123;</span><br><span class="line">                        e.value = value;</span><br><span class="line">                        <span class="comment">// 更新value时，也递增modCount，而在HashMap中是结构性修改才递增。</span></span><br><span class="line">                        ++modCount;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                e = e.next;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 头插法新增结点</span></span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (node != <span class="keyword">null</span>)</span><br><span class="line">                    node.setNext(first);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    node = <span class="keyword">new</span> HashEntry&lt;K,V&gt;(hash, key, value, first);</span><br><span class="line">                <span class="keyword">int</span> c = count + <span class="number">1</span>;</span><br><span class="line">                <span class="comment">// 扩容</span></span><br><span class="line">                <span class="keyword">if</span> (c &gt; threshold &amp;&amp; tab.length &lt; MAXIMUM_CAPACITY)</span><br><span class="line">                    rehash(node);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    setEntryAt(tab, index, node);</span><br><span class="line">                ++modCount;</span><br><span class="line">                count = c;</span><br><span class="line">                oldValue = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们详细看一下scanAndLockForPut()是怎么实现的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> HashEntry&lt;K,V&gt; <span class="title">scanAndLockForPut</span><span class="params">(K key, <span class="keyword">int</span> hash, V value)</span> </span>&#123;</span><br><span class="line">    HashEntry&lt;K,V&gt; first = entryForHash(<span class="keyword">this</span>, hash);</span><br><span class="line">    HashEntry&lt;K,V&gt; e = first;</span><br><span class="line">    HashEntry&lt;K,V&gt; node = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">int</span> retries = -<span class="number">1</span>; </span><br><span class="line">    <span class="comment">// 非阻塞自旋获取lock锁</span></span><br><span class="line">    <span class="keyword">while</span> (!tryLock()) &#123;</span><br><span class="line">        HashEntry&lt;K,V&gt; f; </span><br><span class="line">        <span class="keyword">if</span> (retries &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (e == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (node == <span class="keyword">null</span>) </span><br><span class="line">                    node = <span class="keyword">new</span> HashEntry&lt;K,V&gt;(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                retries = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (key.equals(e.key))</span><br><span class="line">                retries = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                e = e.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// MAX_SCAN_RETRIES为2，尝试3次后，则当前线程阻塞等待lock锁</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (++retries &gt; MAX_SCAN_RETRIES) &#123;</span><br><span class="line">            lock();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果链表被修改过，重置retries</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((retries &amp; <span class="number">1</span>) == <span class="number">0</span> &amp;&amp;</span><br><span class="line">                 (f = entryForHash(<span class="keyword">this</span>, hash)) != first) &#123;</span><br><span class="line">            e = first = f; </span><br><span class="line">            retries = -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h3><p>接下来看下Segment的rehash()：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">rehash</span><span class="params">(HashEntry&lt;K,V&gt; node)</span> </span>&#123;</span><br><span class="line">    HashEntry&lt;K,V&gt;[] oldTable = table;</span><br><span class="line">    <span class="keyword">int</span> oldCapacity = oldTable.length;</span><br><span class="line">    <span class="comment">// 新容量为旧容量的2倍</span></span><br><span class="line">    <span class="keyword">int</span> newCapacity = oldCapacity &lt;&lt; <span class="number">1</span>;</span><br><span class="line">    threshold = (<span class="keyword">int</span>)(newCapacity * loadFactor);</span><br><span class="line">    <span class="comment">// 创建新数组</span></span><br><span class="line">    HashEntry&lt;K,V&gt;[] newTable =</span><br><span class="line">        (HashEntry&lt;K,V&gt;[]) <span class="keyword">new</span> HashEntry[newCapacity];</span><br><span class="line">    <span class="comment">// 新掩码</span></span><br><span class="line">    <span class="keyword">int</span> sizeMask = newCapacity - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; oldCapacity ; i++) &#123;</span><br><span class="line">        HashEntry&lt;K,V&gt; e = oldTable[i];</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">            HashEntry&lt;K,V&gt; next = e.next;</span><br><span class="line">            <span class="comment">// 元素在新数组中的位置</span></span><br><span class="line">            <span class="keyword">int</span> idx = e.hash &amp; sizeMask;</span><br><span class="line">            <span class="keyword">if</span> (next == <span class="keyword">null</span>) <span class="comment">// 该位置只有一个元素</span></span><br><span class="line">                newTable[idx] = e;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// e是链表表头</span></span><br><span class="line">                HashEntry&lt;K,V&gt; lastRun = e;</span><br><span class="line">                <span class="keyword">int</span> lastIdx = idx;</span><br><span class="line">                <span class="comment">// for 循环找到一个 lastRun 结点，这个结点之后的所有元素是将要放到一起的</span></span><br><span class="line">                <span class="keyword">for</span> (HashEntry&lt;K,V&gt; last = next;</span><br><span class="line">                     last != <span class="keyword">null</span>;</span><br><span class="line">                     last = last.next) &#123;</span><br><span class="line">                    <span class="keyword">int</span> k = last.hash &amp; sizeMask;</span><br><span class="line">                    <span class="keyword">if</span> (k != lastIdx) &#123;</span><br><span class="line">                        lastIdx = k;</span><br><span class="line">                        lastRun = last;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 将lastRun及其之后的所有结点组成的这个链表放到 lastIdx这个位置</span></span><br><span class="line">                newTable[lastIdx] = lastRun;</span><br><span class="line">                <span class="comment">// 下面的操作是处理lastRun之前的结点，看看分配在哪个链表中</span></span><br><span class="line">                <span class="keyword">for</span> (HashEntry&lt;K,V&gt; p = e; p != lastRun; p = p.next) &#123;</span><br><span class="line">                    V v = p.value;</span><br><span class="line">                    <span class="keyword">int</span> h = p.hash;</span><br><span class="line">                    <span class="keyword">int</span> k = h &amp; sizeMask;</span><br><span class="line">                    HashEntry&lt;K,V&gt; n = newTable[k];</span><br><span class="line">                    <span class="comment">// 头插法插入元素</span></span><br><span class="line">                    newTable[k] = <span class="keyword">new</span> HashEntry&lt;K,V&gt;(h, p.key, v, n);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 头插法插入新结点</span></span><br><span class="line">    <span class="keyword">int</span> nodeIndex = node.hash &amp; sizeMask; </span><br><span class="line">    node.setNext(newTable[nodeIndex]);</span><br><span class="line">    newTable[nodeIndex] = node;</span><br><span class="line">    <span class="comment">// 赋值新数组给table</span></span><br><span class="line">    table = newTable;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h3><p>get()是不用加锁的，通过使用UNSAFE的volatile版本的方法保证线程可见性。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Segment&lt;K,V&gt; s; </span><br><span class="line">    HashEntry&lt;K,V&gt;[] tab;</span><br><span class="line">    <span class="keyword">int</span> h = hash(key);</span><br><span class="line">    <span class="keyword">long</span> u = (((h &gt;&gt;&gt; segmentShift) &amp; segmentMask) &lt;&lt; SSHIFT) + SBASE;</span><br><span class="line">    <span class="comment">// 获取segment</span></span><br><span class="line">    <span class="keyword">if</span> ((s = (Segment&lt;K,V&gt;)UNSAFE.getObjectVolatile(segments, u)) != <span class="keyword">null</span> &amp;&amp;</span><br><span class="line">        (tab = s.table) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 遍历table，返回该key对应的value</span></span><br><span class="line">        <span class="keyword">for</span> (HashEntry&lt;K,V&gt; e = (HashEntry&lt;K,V&gt;) UNSAFE.getObjectVolatile</span><br><span class="line">             (tab, ((<span class="keyword">long</span>)(((tab.length - <span class="number">1</span>) &amp; h)) &lt;&lt; TSHIFT) + TBASE);</span><br><span class="line">             e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">            K k;</span><br><span class="line">            <span class="keyword">if</span> ((k = e.key) == key || (e.hash == h &amp;&amp; key.equals(k)))</span><br><span class="line">                <span class="keyword">return</span> e.value;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h3><p>remove()和put()实现逻辑还是挺相似的。</p><p>先看下ConcurrentHashMap中的remove():<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> hash = hash(key);</span><br><span class="line">    <span class="comment">// 找到对应的segment</span></span><br><span class="line">    Segment&lt;K,V&gt; s = segmentForHash(hash);</span><br><span class="line">    <span class="keyword">return</span> s == <span class="keyword">null</span> ? <span class="keyword">null</span> : s.remove(key, hash, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接着继续看segment中的remove():<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">remove</span><span class="params">(Object key, <span class="keyword">int</span> hash, Object value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取锁</span></span><br><span class="line">    <span class="keyword">if</span> (!tryLock())</span><br><span class="line">        scanAndLock(key, hash);</span><br><span class="line">    V oldValue = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        HashEntry&lt;K,V&gt;[] tab = table;</span><br><span class="line">        <span class="keyword">int</span> index = (tab.length - <span class="number">1</span>) &amp; hash;</span><br><span class="line">        <span class="comment">// 获取table对应下标的列表的第一个元素</span></span><br><span class="line">        HashEntry&lt;K,V&gt; e = entryAt(tab, index);</span><br><span class="line">        HashEntry&lt;K,V&gt; pred = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">            K k;</span><br><span class="line">            HashEntry&lt;K,V&gt; next = e.next;</span><br><span class="line">            <span class="keyword">if</span> ((k = e.key) == key ||</span><br><span class="line">                (e.hash == hash &amp;&amp; key.equals(k))) &#123;</span><br><span class="line">                V v = e.value;</span><br><span class="line">                <span class="keyword">if</span> (value == <span class="keyword">null</span> || value == v || value.equals(v)) &#123;</span><br><span class="line">                    <span class="comment">// 若将删除的是首结点，则将下一个Entry设置为首结点</span></span><br><span class="line">                    <span class="keyword">if</span> (pred == <span class="keyword">null</span>)</span><br><span class="line">                        setEntryAt(tab, index, next);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                        pred.setNext(next);</span><br><span class="line">                    ++modCount;</span><br><span class="line">                    --count;</span><br><span class="line">                    oldValue = v;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            pred = e;</span><br><span class="line">            e = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        unlock();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> oldValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="size"><a href="#size" class="headerlink" title="size()"></a>size()</h3><p>size方法主要是计算当前hashmap中存放的元素的总个数，即累加各个segments的内部的哈希表table数组内的所有链表的所有链表节点的个数。</p><p>实现逻辑为：整个计算过程刚开始是不对segments加锁的，重复计算两次，如果前后两次hashmap都没有修改过，则直接返回计算结果，如果修改过了，则再加锁计算一次。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> Segment&lt;K,V&gt;[] segments = <span class="keyword">this</span>.segments;</span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">    <span class="keyword">boolean</span> overflow; <span class="comment">// true if size overflows 32 bits</span></span><br><span class="line">    <span class="comment">// 累加modCounts</span></span><br><span class="line">    <span class="keyword">long</span> sum;   </span><br><span class="line">    <span class="comment">// 记录前一次累加的modCounts</span></span><br><span class="line">    <span class="keyword">long</span> last = <span class="number">0L</span>;  </span><br><span class="line">    <span class="comment">// 尝试的次数</span></span><br><span class="line">    <span class="keyword">int</span> retries = -<span class="number">1</span>; </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="comment">/**</span></span><br><span class="line"><span class="comment">             * RETRIES_BEFORE_LOCK值为2</span></span><br><span class="line"><span class="comment">             * retries++ == RETRIES_BEFORE_LOCK，表示已经是第三次了，故需要加锁</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="keyword">if</span> (retries++ == RETRIES_BEFORE_LOCK) &#123;</span><br><span class="line">                <span class="comment">// 每个segment都加锁，此时不能执行写操作了</span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; segments.length; ++j)</span><br><span class="line">                    ensureSegment(j).lock(); <span class="comment">// force creation</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// sum重置为0</span></span><br><span class="line">            sum = <span class="number">0L</span>;</span><br><span class="line">            size = <span class="number">0</span>;</span><br><span class="line">            overflow = <span class="keyword">false</span>;</span><br><span class="line">            <span class="comment">// 遍历每个segment</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; segments.length; ++j) &#123;</span><br><span class="line">                Segment&lt;K,V&gt; seg = segmentAt(segments, j);</span><br><span class="line">                <span class="keyword">if</span> (seg != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="comment">// 累加各个segment的modCount，以便与上一次的modCount进行比较</span></span><br><span class="line">                    sum += seg.modCount;</span><br><span class="line">                    <span class="keyword">int</span> c = seg.count;</span><br><span class="line">                    <span class="comment">// size+=c 计算ConcurrentHashMap中size的数量</span></span><br><span class="line">                    <span class="keyword">if</span> (c &lt; <span class="number">0</span> || (size += c) &lt; <span class="number">0</span>)</span><br><span class="line">                        overflow = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 如果前后两次都相等，说明在这期间没有写的操作，可以直接返回</span></span><br><span class="line">            <span class="keyword">if</span> (sum == last)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            last = sum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (retries &gt; RETRIES_BEFORE_LOCK) &#123;</span><br><span class="line">            <span class="comment">// 释放锁</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; segments.length; ++j)</span><br><span class="line">                segmentAt(segments, j).unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> overflow ? Integer.MAX_VALUE : size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;浅析JDK1.7 ConcurrentHashMap源码。&lt;/p&gt;
&lt;h2 id=&quot;写在开篇&quot;&gt;&lt;a href=&quot;#写在开篇&quot; class=&quot;headerlink&quot; title=&quot;写在开篇&quot;&gt;&lt;/a&gt;写在开篇&lt;/h2&gt;&lt;p&gt;先贴张图看下ConcurrentHashMap J
      
    
    </summary>
    
      <category term="Java乐园" scheme="https://kyrie17.github.io/categories/Java%E4%B9%90%E5%9B%AD/"/>
    
    
      <category term="HashMap" scheme="https://kyrie17.github.io/tags/HashMap/"/>
    
  </entry>
  
  <entry>
    <title>HashMap源码分析-JDK1.7</title>
    <link href="https://kyrie17.github.io/2019/09/05/HashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-JDK1-7/"/>
    <id>https://kyrie17.github.io/2019/09/05/HashMap源码分析-JDK1-7/</id>
    <published>2019-09-05T11:14:06.000Z</published>
    <updated>2020-03-09T15:16:27.679Z</updated>
    
    <content type="html"><![CDATA[<p>浅析JDK1.7 HashMap源码。</p><h2 id="HashMap中几个重要的属性"><a href="#HashMap中几个重要的属性" class="headerlink" title="HashMap中几个重要的属性"></a>HashMap中几个重要的属性</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 默认初始化化容量,即16  </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_INITIAL_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">4</span>; <span class="comment">// aka 16</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 最大容量，即2的30次方  </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> MAXIMUM_CAPACITY = <span class="number">1</span> &lt;&lt; <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 默认负载因子</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">float</span> DEFAULT_LOAD_FACTOR = <span class="number">0.75f</span>;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 空数组，表示没有初始化之前的状态</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> Entry&lt;?,?&gt;[] EMPTY_TABLE = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 空的存储实体</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">transient</span> Entry&lt;K,V&gt;[] table = (Entry&lt;K,V&gt;[]) EMPTY_TABLE;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * HashMap中Entry的数量</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">transient</span> <span class="keyword">int</span> size;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 阈值，当size大于threshold时会执行resize操作</span></span><br><span class="line"><span class="comment">    * threshold = capacity * loadFactor</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">int</span> threshold;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 负载因子，默认是0.75</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">final</span> <span class="keyword">float</span> loadFactor;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * HashMap结构上修改（比如put，remove等操作）的的次数，保证并发访问时，若HashMap内部结构发生变化，快速响应失败</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">transient</span> <span class="keyword">int</span> modCount;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 默认的threshold值，下文会具体讲到</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ALTERNATIVE_HASHING_THRESHOLD_DEFAULT = Integer.MAX_VALUE;</span><br><span class="line">   </span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 哈希种子，与此实例关联的随机值，应用于键的哈希码以使哈希冲突更难找到</span></span><br><span class="line"><span class="comment">    * 如果为0，则禁用备用散列，同样在下文具体分析</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">transient</span> <span class="keyword">int</span> hashSeed = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><h2 id="Entry"><a href="#Entry" class="headerlink" title="Entry"></a>Entry</h2><p>当实例化一个HashMap时，会创建一个长度为Capacity的Entry数组。在这个数组中可以存放元素的位置我们称之为“桶”(bucket)，每个bucket都有自己的索引，系统可以根据索引快速的查找bucket中的元素。每个bucket中存储一个元素，即一个Entry对象，但每一个Entry对象可以带一个引用变量，用于指向下一个元素，因此，在一个桶中，就有可能生成一个Entry链。</p><p>Entry源码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">implements</span> <span class="title">Map</span>.<span class="title">Entry</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> K key;</span><br><span class="line">    V value;</span><br><span class="line">    Entry&lt;K,V&gt; next;</span><br><span class="line">    <span class="keyword">int</span> hash;</span><br><span class="line"></span><br><span class="line">    Entry(<span class="keyword">int</span> h, K k, V v, Entry&lt;K,V&gt; n) &#123;</span><br><span class="line">        value = v;</span><br><span class="line">        next = n;</span><br><span class="line">        key = k;</span><br><span class="line">        hash = h;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><p>HashMap有4个构造器，其他构造器如果用户没有传入initialCapacity或loadFactor，会使用默认值。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">(<span class="keyword">int</span> initialCapacity, <span class="keyword">float</span> loadFactor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal initial capacity: "</span> +</span><br><span class="line">                                           initialCapacity);</span><br><span class="line">    <span class="keyword">if</span> (initialCapacity &gt; MAXIMUM_CAPACITY)</span><br><span class="line">        initialCapacity = MAXIMUM_CAPACITY;</span><br><span class="line">    <span class="keyword">if</span> (loadFactor &lt;= <span class="number">0</span> || Float.isNaN(loadFactor))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Illegal load factor: "</span> +</span><br><span class="line">                                           loadFactor);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.loadFactor = loadFactor;</span><br><span class="line">    threshold = initialCapacity;</span><br><span class="line">    <span class="comment">// 在HashMap中没有实际实现</span></span><br><span class="line">    init();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在常规构造器中，并没有马上为数组table分配内存空间（有一个入参为指定Map的构造器例外），事实上是在执行第一次put操作的时候才真正构建table数组。</p><h2 id="put"><a href="#put" class="headerlink" title="put()"></a>put()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 如果table数组为空数组，创建存储实体</span></span><br><span class="line">    <span class="keyword">if</span> (table == EMPTY_TABLE) &#123;</span><br><span class="line">        inflateTable(threshold);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果key为null，存储位置为table[0]，或table[0]的冲突链上</span></span><br><span class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> putForNullKey(value);</span><br><span class="line">    <span class="comment">// 对key的hashcode进一步计算，确保散列均匀</span></span><br><span class="line">    <span class="keyword">int</span> hash = hash(key);</span><br><span class="line">    <span class="comment">// 获取在table数组中的下标</span></span><br><span class="line">    <span class="keyword">int</span> i = indexFor(hash, table.length);</span><br><span class="line">    <span class="comment">// 如果出现对应key已存在，则覆盖</span></span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[i]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">        Object k;</span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp; ((k = e.key) == key || key.equals(k))) &#123;</span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            e.value = value;</span><br><span class="line">            e.recordAccess(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果key没出现过，则modCount++</span></span><br><span class="line">    modCount++;</span><br><span class="line">    <span class="comment">// 添加entry</span></span><br><span class="line">    addEntry(hash, key, value, i);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>建哈希表是在inflateTable()中实现的，我们来看一看：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">inflateTable</span><span class="params">(<span class="keyword">int</span> toSize)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 比容量（capacity）大的2的次幂，作为哈希表的容量</span></span><br><span class="line">    <span class="keyword">int</span> capacity = roundUpToPowerOf2(toSize);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算新的扩容阈值</span></span><br><span class="line">    threshold = (<span class="keyword">int</span>) Math.min(capacity * loadFactor, MAXIMUM_CAPACITY + <span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 分配空间</span></span><br><span class="line">    table = <span class="keyword">new</span> Entry[capacity];</span><br><span class="line">    <span class="comment">// 根据容量判断是否需要初始化hashSeed</span></span><br><span class="line">    initHashSeedAsNeeded(capacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>继续看下addEntry()源码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> ((size &gt;= threshold) &amp;&amp; (<span class="keyword">null</span> != table[bucketIndex])) &#123;</span><br><span class="line">        <span class="comment">// 扩容，新容量为旧容量的2倍</span></span><br><span class="line">        resize(<span class="number">2</span> * table.length);</span><br><span class="line">        hash = (<span class="keyword">null</span> != key) ? hash(key) : <span class="number">0</span>;</span><br><span class="line">        bucketIndex = indexFor(hash, table.length);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将新Entry放入HashMap的桶的对应位置</span></span><br><span class="line">    createEntry(hash, key, value, bucketIndex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>使用头插法将Entry插入桶中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createEntry</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">int</span> bucketIndex)</span> </span>&#123;</span><br><span class="line">    Entry&lt;K,V&gt; e = table[bucketIndex];</span><br><span class="line">    table[bucketIndex] = <span class="keyword">new</span> Entry&lt;&gt;(hash, key, value, e);</span><br><span class="line">    size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="Alternative-hashing和hashSeed"><a href="#Alternative-hashing和hashSeed" class="headerlink" title="Alternative hashing和hashSeed"></a>Alternative hashing和hashSeed</h2><p>这里我要补充一下hashSeed这个属性，inflateTable()中最后还调用了一个initHashSeedAsNeeded()方法，该方法是用来依据容量决定是否需要初始化hashSeed。</p><p>在源码中有一个常量ALTERNATIVE_HASHING_THRESHOLD_DEFAULT，它是一个默认的阈值，<strong>当一个键值对的键是String类型时，且map的容量达到了这个阈值，就启用备用哈希(alternative hashing)。</strong>备用哈希可以减少String类型的key计算哈希码（更容易）发生哈希碰撞的发生率。该值可以通过定义系统属性jdk.map.althashing.threshold来指定。如果该值是1，表示强制总是使用备用哈希；如果是-1则表示禁用。</p><p>HashMap有一个静态内部类Holder,它的作用是在虚拟机启动后根据jdk.map.althashing.threshold和ALTERNATIVE_HASHING_THRESHOLD_DEFAULT初始化ALTERNATIVE_HASHING_THRESHOLD，相关代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Holder维护着一些只有在虚拟机启动后才能初始化的值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Holder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 触发启用备用哈希的哈希表容量阈值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> ALTERNATIVE_HASHING_THRESHOLD;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 读取JVM参数 -Djdk.map.althashing.threshold</span></span><br><span class="line">        String altThreshold = java.security.AccessController.doPrivileged(</span><br><span class="line">            <span class="keyword">new</span> sun.security.action.GetPropertyAction(</span><br><span class="line">                <span class="string">"jdk.map.althashing.threshold"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> threshold;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 如果该参数没有值，采用默认值</span></span><br><span class="line">            threshold = (<span class="keyword">null</span> != altThreshold)</span><br><span class="line">                ? Integer.parseInt(altThreshold)</span><br><span class="line">                : ALTERNATIVE_HASHING_THRESHOLD_DEFAULT;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 如果参数值为-1，禁用备用哈希</span></span><br><span class="line">            <span class="comment">// ALTERNATIVE_HASHING_THRESHOLD_DEFAULT也是等于Integer.MAX_VALUE</span></span><br><span class="line">            <span class="comment">// 所以jdk默认是禁用备用哈希的</span></span><br><span class="line">            <span class="keyword">if</span> (threshold == -<span class="number">1</span>) &#123;</span><br><span class="line">                threshold = Integer.MAX_VALUE;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 参数为其它负数，则视为非法参数</span></span><br><span class="line">            <span class="keyword">if</span> (threshold &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"value must be positive integer."</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span>(IllegalArgumentException failed) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Illegal value for 'jdk.map.althashing.threshold'"</span>, failed);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        ALTERNATIVE_HASHING_THRESHOLD = threshold;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>继续看inflateTable()中initHashSeedAsNeeded()这个方法，该方法是用来依据容量决定是否需要初始化hashSeed，hashSeed默认是0，如果初始化hashSeed。所以下面来看看这个方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * A randomizing value associated with this instance that is applied to</span></span><br><span class="line"><span class="comment"> * hash code of keys to make hash collisions harder to find. If 0 then</span></span><br><span class="line"><span class="comment"> * alternative hashing is disabled.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">int</span> hashSeed = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">initHashSeedAsNeeded</span><span class="params">(<span class="keyword">int</span> capacity)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 如果hashSeed != 0，表示当前正在使用备用哈希</span></span><br><span class="line">    <span class="keyword">boolean</span> currentAltHashing = hashSeed != <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// 如果vm启动了且map的容量大于阈值，使用备用哈希</span></span><br><span class="line">    <span class="keyword">boolean</span> useAltHashing = sun.misc.VM.isBooted() &amp;&amp;</span><br><span class="line">        (capacity &gt;= Holder.ALTERNATIVE_HASHING_THRESHOLD);</span><br><span class="line">    <span class="comment">// 异或操作，如果两值同时为false，或同时为true，都算是false。</span></span><br><span class="line">    <span class="keyword">boolean</span> switching = currentAltHashing ^ useAltHashing;</span><br><span class="line">    <span class="keyword">if</span> (switching) &#123;</span><br><span class="line">        <span class="comment">// 把hashSeed设置成随机值</span></span><br><span class="line">        hashSeed = useAltHashing</span><br><span class="line">            ? sun.misc.Hashing.randomHashSeed(<span class="keyword">this</span>)</span><br><span class="line">            : <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> switching;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>从hashSeed变量的注释可以看出，哈希种子一个随机值，在计算key的哈希码时会用到这个种子，目的是为了进一步减少哈希碰撞。如果hashSeed=0表示禁用备用哈希。</p><p>而Holder中维护的ALTERNATIVE_HASHING_THRESHOLD是触发启用备用哈希的阈值，该值表示，如果容器的容量（注意是容量，不是实际大小）达到了该值，容器应该启用备用哈希。</p><p>Holder会尝试读取JVM启动时传入的参数-Djdk.map.althashing.threshold并赋值给ALTERNATIVE_HASHING_THRESHOLD。它的值有如下含义：</p><ul><li>ALTERNATIVE_HASHING_THRESHOLD = 1，总是使用备用哈希</li><li>ALTERNATIVE_HASHING_THRESHOLD = -1，禁用备用哈希</li></ul><p>在initHashSeedAsNeeded(int capacity)方法中，会判断如果容器的容量&gt;=ALTERNATIVE_HASHING_THRESHOLD，就会生成一个随机的哈希种子hashSeed，该种子会在put方法调用过程中的hash()中使用到：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object k)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 如果哈希种子是随机值，使用备用哈希</span></span><br><span class="line">    <span class="keyword">int</span> h = hashSeed;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">0</span> != h &amp;&amp; k <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        <span class="keyword">return</span> sun.misc.Hashing.stringHash32((String) k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    h ^= k.hashCode();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// </span></span><br><span class="line">    h ^= (h &gt;&gt;&gt; <span class="number">20</span>) ^ (h &gt;&gt;&gt; <span class="number">12</span>);</span><br><span class="line">    <span class="keyword">return</span> h ^ (h &gt;&gt;&gt; <span class="number">7</span>) ^ (h &gt;&gt;&gt; <span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="扩容"><a href="#扩容" class="headerlink" title="扩容"></a>扩容</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> newCapacity)</span> </span>&#123;</span><br><span class="line">    Entry[] oldTable = table;</span><br><span class="line">    <span class="keyword">int</span> oldCapacity = oldTable.length;</span><br><span class="line">    <span class="comment">// 旧容量值已经到了最大容量值  </span></span><br><span class="line">    <span class="keyword">if</span> (oldCapacity == MAXIMUM_CAPACITY) &#123;</span><br><span class="line">        <span class="comment">// 将阀值修改至最大整数 </span></span><br><span class="line">        threshold = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 新的Entry数组</span></span><br><span class="line">    Entry[] newTable = <span class="keyword">new</span> Entry[newCapacity];</span><br><span class="line">    <span class="comment">// 将旧数组的数据拷贝到新数组中</span></span><br><span class="line">    transfer(newTable, initHashSeedAsNeeded(newCapacity));</span><br><span class="line">    table = newTable;</span><br><span class="line">    <span class="comment">// 修改阀值 </span></span><br><span class="line">    threshold = (<span class="keyword">int</span>)Math.min(newCapacity * loadFactor, MAXIMUM_CAPACITY + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候不得不提resize()中的核心方法transfer()：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transfer</span><span class="params">(Entry[] newTable, <span class="keyword">boolean</span> rehash)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> newCapacity = newTable.length;<span class="comment">// 新容量</span></span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e : table) &#123;<span class="comment">// 遍历所有桶</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">null</span> != e) &#123;<span class="comment">// 遍历桶中所有的元素</span></span><br><span class="line">            Entry&lt;K,V&gt; next = e.next;</span><br><span class="line">            <span class="keyword">if</span> (rehash) &#123;</span><br><span class="line">                e.hash = <span class="keyword">null</span> == e.key ? <span class="number">0</span> : hash(e.key);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 采用头插法的方式将旧数组中的数据拷贝到新数组中</span></span><br><span class="line">            <span class="keyword">int</span> i = indexFor(e.hash, newCapacity);</span><br><span class="line">            e.next = newTable[i];</span><br><span class="line">            newTable[i] = e;</span><br><span class="line">            e = next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="get"><a href="#get" class="headerlink" title="get()"></a>get()</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 获取key为空的元素</span></span><br><span class="line">    <span class="keyword">if</span> (key == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> getForNullKey();</span><br><span class="line">    <span class="comment">// 依据key获取元素</span></span><br><span class="line">    Entry&lt;K,V&gt; entry = getEntry(key);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span> == entry ? <span class="keyword">null</span> : entry.getValue();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>获取key为空的值：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> V <span class="title">getForNullKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// key为null的元素存储在table的下标为0的位置</span></span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[<span class="number">0</span>]; e != <span class="keyword">null</span>; e = e.next) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e.key == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">return</span> e.value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>getEntry()相对简单，直接贴源码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">getEntry</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> hash = (key == <span class="keyword">null</span>) ? <span class="number">0</span> : hash(key);</span><br><span class="line">    <span class="keyword">for</span> (Entry&lt;K,V&gt; e = table[indexFor(hash, table.length)];</span><br><span class="line">         e != <span class="keyword">null</span>;</span><br><span class="line">         e = e.next) &#123;</span><br><span class="line">        Object k;</span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">            ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="keyword">return</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="remove"><a href="#remove" class="headerlink" title="remove()"></a>remove()</h2><p>remove()也比较简单直接贴源码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Entry&lt;K,V&gt; e = removeEntryForKey(key);</span><br><span class="line">    <span class="keyword">return</span> (e == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span> Entry&lt;K,V&gt; <span class="title">removeEntryForKey</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (size == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> hash = (key == <span class="keyword">null</span>) ? <span class="number">0</span> : hash(key);</span><br><span class="line">    <span class="keyword">int</span> i = indexFor(hash, table.length);</span><br><span class="line">    Entry&lt;K,V&gt; prev = table[i];</span><br><span class="line">    Entry&lt;K,V&gt; e = prev;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Entry&lt;K,V&gt; next = e.next;</span><br><span class="line">        Object k;</span><br><span class="line">        <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">            ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">            modCount++;</span><br><span class="line">            size--;</span><br><span class="line">            <span class="keyword">if</span> (prev == e)</span><br><span class="line">                table[i] = next;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                prev.next = next;</span><br><span class="line">            e.recordRemoval(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">return</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">        prev = e;</span><br><span class="line">        e = next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="为什么JDK1-7-HashMap是线程不安全的？"><a href="#为什么JDK1-7-HashMap是线程不安全的？" class="headerlink" title="为什么JDK1.7 HashMap是线程不安全的？"></a>为什么JDK1.7 HashMap是线程不安全的？</h2><p>在多线程环境下，HashMap主要会出现下面三种问题：</p><ul><li>死循环</li><li>数据丢失</li><li>数据覆盖</li></ul><h3 id="死循环和数据丢失"><a href="#死循环和数据丢失" class="headerlink" title="死循环和数据丢失"></a>死循环和数据丢失</h3><p>死循环问题出现在resize()中的核心方法transfer()中：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">e.next = newTable[i];</span><br><span class="line">newTable[i] = e;</span><br><span class="line">e = next;</span><br></pre></td></tr></table></figure></p><p>头插法会将链表的顺序翻转，这也是形成死循环的关键点。</p><p>假设现在有两个线程A、B同时对下面这个HashMap进行扩容操作：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/HashMap01.png" alt="HashMap01" title>                </div>                <div class="image-caption">HashMap01</div>            </figure></p><p>正常扩容后的结果是下面这样的：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/HashMap02.png" alt="HashMap02" title>                </div>                <div class="image-caption">HashMap02</div>            </figure></p><p>但如果线程A在<code>e.next = newTable[i];</code>处CPU时间片耗尽，线程A被挂起，此时线程A中：e=3、next=7、e.next=null即：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/HashMap03.png" alt="HashMap03" title>                </div>                <div class="image-caption">HashMap03</div>            </figure></p><p>当线程A的时间片耗尽后，CPU开始执行线程B，并在线程B中成功的完成了数据拷贝，此时线程B中7.next=3、3.next=null，即：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/HashMap02.png" alt="HashMap02" title>                </div>                <div class="image-caption">HashMap02</div>            </figure></p><p>随后线程A获得CPU时间片继续执行，将3放入新数组对应的位置，执行完此轮循环后线程A的情况如下：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/HashMap04.png" alt="HashMap04" title>                </div>                <div class="image-caption">HashMap04</div>            </figure></p><p>接着继续执行下一轮循环，此时e=7，从主内存中读取e.next时发现主内存中7.next=3，于是乎next=3，并将7采用头插法的方式放入新数组中，并继续执行完此轮循环，结果如下：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/HashMap05.png" alt="HashMap05" title>                </div>                <div class="image-caption">HashMap05</div>            </figure></p><p>执行下一次循环可以发现，next=3.next=null，所以此轮循环将会是最后一轮循环。接下来当执行完e.next=newTable[i]即3.next=7后，3和7之间就相互连接了，当执行完newTable[i]=e后，3被头插法重新插入到链表中，执行结果如下图所示：<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/HashMap06.png" alt="HashMap06" title>                </div>                <div class="image-caption">HashMap06</div>            </figure></p><p>此时next=null，将不会进行下一轮循环。到此线程A、B的扩容操作完成，很明显当线程A执行完后，HashMap中出现了环形结构，当在以后对该HashMap进行操作时会出现死循环。</p><p>并且从上图可以发现，元素5在扩容期间被莫名的丢失了，这就发生了数据丢失的问题。</p><h3 id="数据覆盖"><a href="#数据覆盖" class="headerlink" title="数据覆盖"></a>数据覆盖</h3><p>还是在put()中：<br>比如有两个线程A和B，首先A希望插入一个元素到HashMap中，首先计算记录所要落到的桶的索引坐标，然后获取到该桶里面的链表头结点，此时线程A后由于时间片耗尽导致被挂起，而线程B得到时间片后在该下标处插入了元素，完成了正常的插入，假设线程A插入的记录计算出来的桶索引和线程B要插入的记录计算出来的桶索引是一样的，那么当线程B成功插入之后，线程A再次被调度运行时，它依然<strong>持有过期的链表头</strong>，这就导致了线程B插入的数据被线程A覆盖了。</p><p>参考：<br>Alternative hashing和hashSeed部分 <a href="https://segmentfault.com/a/1190000018520768" target="_blank" rel="noopener">https://segmentfault.com/a/1190000018520768</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;浅析JDK1.7 HashMap源码。&lt;/p&gt;
&lt;h2 id=&quot;HashMap中几个重要的属性&quot;&gt;&lt;a href=&quot;#HashMap中几个重要的属性&quot; class=&quot;headerlink&quot; title=&quot;HashMap中几个重要的属性&quot;&gt;&lt;/a&gt;HashMap中几个重要的属
      
    
    </summary>
    
      <category term="Java乐园" scheme="https://kyrie17.github.io/categories/Java%E4%B9%90%E5%9B%AD/"/>
    
    
      <category term="HashMap" scheme="https://kyrie17.github.io/tags/HashMap/"/>
    
  </entry>
  
  <entry>
    <title>线程中断</title>
    <link href="https://kyrie17.github.io/2019/09/02/%E7%BA%BF%E7%A8%8B%E4%B8%AD%E6%96%AD/"/>
    <id>https://kyrie17.github.io/2019/09/02/线程中断/</id>
    <published>2019-09-02T09:56:42.000Z</published>
    <updated>2019-09-18T06:25:12.636Z</updated>
    
    <content type="html"><![CDATA[<p>今天同学给了我一道题目，发现自己对interrupt()、isInterrupted()、interrupted()理解的不好。</p><h1 id="interrupt-、isInterrupted-、interrupted"><a href="#interrupt-、isInterrupted-、interrupted" class="headerlink" title="interrupt()、isInterrupted()、interrupted()"></a>interrupt()、isInterrupted()、interrupted()</h1><p>我们先看一下例子。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Thread2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Thread sleepThread = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        Thread busyThread = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        </span><br><span class="line">        sleepThread.start();</span><br><span class="line">        busyThread.start();</span><br><span class="line">        sleepThread.interrupt();</span><br><span class="line">        busyThread.interrupt();</span><br><span class="line">        Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        System.out.println(<span class="string">"sleepThread 0: "</span> + sleepThread.isInterrupted());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> (sleepThread.isInterrupted()) ;</span><br><span class="line">        System.out.println(<span class="string">"sleepThread 1: "</span> + sleepThread.isInterrupted());</span><br><span class="line">        System.out.println(<span class="string">"busyThread 1: "</span> + busyThread.isInterrupted());</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"sleepThread 2: "</span> + sleepThread.interrupted());</span><br><span class="line">        System.out.println(<span class="string">"busyThread 2: "</span> + busyThread.interrupted());</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"sleepThread 3: "</span> + sleepThread.isInterrupted());</span><br><span class="line">        System.out.println(<span class="string">"busyThread 3: "</span> + busyThread.isInterrupted());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">java.lang.InterruptedException: sleep interrupted</span><br><span class="line">at java.base/java.lang.Thread.sleep(Native Method)</span><br><span class="line">at test.Thread2$1.run(Thread2.java:9)</span><br><span class="line">sleepThread 0: false</span><br><span class="line">sleepThread 1: false</span><br><span class="line">busyThread 1: true</span><br><span class="line">sleepThread 2: false</span><br><span class="line">busyThread 2: false</span><br><span class="line">sleepThread 3: false</span><br><span class="line">busyThread 3: true</span><br></pre></td></tr></table></figure></p><p>很奇怪，为什么busyThread 2变成了false，接着busyThread 3又是true了呢？</p><h2 id="认识interrupt-、isInterrupted-、interrupted"><a href="#认识interrupt-、isInterrupted-、interrupted" class="headerlink" title="认识interrupt()、isInterrupted()、interrupted()"></a>认识interrupt()、isInterrupted()、interrupted()</h2><h3 id="interrupt"><a href="#interrupt" class="headerlink" title="interrupt()"></a>interrupt()</h3><p>中断调用该方法的线程。</p><p>其有两个作用：</p><ol><li>将线程的中断状态设置为true（不论线程是处于运行的还是阻塞状态）</li><li>让被阻塞的线程抛出InterruptedException异常（同时中断状态为false）</li></ol><p>这样，对于那些阻塞方法(比如 wait() 和 sleep())而言，当另一个线程调用interrupt()中断该线程时，该线程会从阻塞状态退出并且抛出中断异常。这样，我们就可以捕捉到中断异常，并根据实际情况对该线程从阻塞方法中异常退出而进行一些处理。</p><h3 id="isInterrupted"><a href="#isInterrupted" class="headerlink" title="isInterrupted()"></a>isInterrupted()</h3><p>检测<strong>调用该方法的线程</strong>是否被中断，<strong>中断状态不会被清除</strong>。</p><p>先看一下源码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isInterrupted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> isInterrupted(<span class="keyword">false</span>);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p>可以看到isInterrupted()和interrupted()一样调用了isInterrupted()，不过isInterrupted()参数ClearInterrupted为false，即不清除中断状态。</p><h3 id="interrupted"><a href="#interrupted" class="headerlink" title="interrupted()"></a>interrupted()</h3><p>检测<strong>当前线程</strong>是否被中断，并且<strong>中断状态会被清除</strong>。</p><p>同样先看下源码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">interrupted</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> currentThread().isInterrupted(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">native</span> <span class="keyword">boolean</span> <span class="title">isInterrupted</span><span class="params">(<span class="keyword">boolean</span> ClearInterrupted)</span></span>;</span><br></pre></td></tr></table></figure></p><p>如果一个线程已经被终止了，中断状态是否被重置取决于ClearInterrupted的值，即ClearInterrupted为true时，中断状态会被重置，为false则不会被重置。</p><p>需要强调的是：interrupted()是<strong>static方法</strong>，调用的时候是Thread.interrupted()，而isInterrupted()是<strong>实例方法</strong>，调用时是用线程的实例调用。</p><p>因此，我们可以很容易知道上述例子中busyThread.isInterrupted()还是通过当前线程调用的，而当前线程为main，自然结果为false。</p><h2 id="另一个问题"><a href="#另一个问题" class="headerlink" title="另一个问题"></a>另一个问题</h2><p>为什么sleepThread 0 isInterrupted()的返回结果是false，同时如果将其上一行代码<code>Thread.sleep(2000);</code>删掉，其返回结果却是true。</p><p>我们是上面说过线程一旦被中断，isInterrupted()返回true，<strong>而一旦sleep等方法抛出异常，它将清除中断状态，此时方法将返回false</strong>。</p><p>再来，去掉<code>Thread.sleep(2000);</code>为什么返回结果是true呢，很简单呀这是两个线程，main线程需要等一等sleepThread这个线程抛出异常后，isInterrupted()才将中断状态清除。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天同学给了我一道题目，发现自己对interrupt()、isInterrupted()、interrupted()理解的不好。&lt;/p&gt;
&lt;h1 id=&quot;interrupt-、isInterrupted-、interrupted&quot;&gt;&lt;a href=&quot;#interrupt-、
      
    
    </summary>
    
      <category term="Java乐园" scheme="https://kyrie17.github.io/categories/Java%E4%B9%90%E5%9B%AD/"/>
    
    
      <category term="多线程" scheme="https://kyrie17.github.io/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>HashMap源码分析-JDK1.8</title>
    <link href="https://kyrie17.github.io/2019/08/20/HashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90-JDK1-8/"/>
    <id>https://kyrie17.github.io/2019/08/20/HashMap源码分析-JDK1-8/</id>
    <published>2019-08-20T07:56:11.000Z</published>
    <updated>2020-03-11T15:29:18.528Z</updated>
    
    <content type="html"><![CDATA[<p>浅析JDK1.8 HashMap源码。</p><h2 id="写在开篇"><a href="#写在开篇" class="headerlink" title="写在开篇"></a>写在开篇</h2><p>HashMap是最常用的数据结构之一，是JDK中util包下的一个集合类，基于Map接口实现、允许null键/值、非同步、不保证有序(比如插入的顺序)、也不保证顺序不随时间变化。</p><h2 id="类的继承关系"><a href="#类的继承关系" class="headerlink" title="类的继承关系"></a>类的继承关系</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractMap</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="keyword">implements</span> <span class="title">Map</span>&lt;<span class="title">K</span>,<span class="title">V</span>&gt;, <span class="title">Cloneable</span>, <span class="title">Serializable</span> </span>&#123;</span><br></pre></td></tr></table></figure><p>继承于抽象的AbstractMap，实现了Map，Cloneable，Serializable这三个接口。</p><h2 id="HashMap构造函数"><a href="#HashMap构造函数" class="headerlink" title="HashMap构造函数"></a>HashMap构造函数</h2><p>我们看下不带参数的构造方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Constructs an empty &#123;<span class="doctag">@code</span> HashMap&#125; with the default initial capacity</span></span><br><span class="line"><span class="comment"> * (16) and the default load factor (0.75).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">HashMap</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.loadFactor = DEFAULT_LOAD_FACTOR; <span class="comment">// all other fields defaulted</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们可以看到HashMap的构造函数中只是简单地为负载因子（loadFactor）赋了一个默认的值<strong>0.75</strong>，其他的什么都没做。</p><h2 id="HashMap的put函数"><a href="#HashMap的put函数" class="headerlink" title="HashMap的put函数"></a>HashMap的put函数</h2><p>向HashMap中插入一个键值对主要涉及到下面的三个函数：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">put</span><span class="params">(K key, V value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> putVal(hash(key), key, value, <span class="keyword">false</span>, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在进一步了解putVal之前，我们还需要知道后面我们会讲到的table究竟是何方神圣。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The table, initialized on first use, and resized as</span></span><br><span class="line"><span class="comment"> * necessary. When allocated, length is always a power of two.</span></span><br><span class="line"><span class="comment"> * (We also tolerate length zero in some operations to allow</span></span><br><span class="line"><span class="comment"> * bootstrapping mechanics that are currently not needed.)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">transient</span> Node&lt;K,V&gt;[] table;<span class="comment">//实际上table就是HashMap中的数组。</span></span><br></pre></td></tr></table></figure></p><p>putVal函数才是真正的put方法。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Implements Map.put and related methods.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> hash hash for key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> key the key</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> value the value to put</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> onlyIfAbsent if true, don't change existing value</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> evict if false, the table is in creation mode.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> previous value, or null if none</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">final</span> V <span class="title">putVal</span><span class="params">(<span class="keyword">int</span> hash, K key, V value, <span class="keyword">boolean</span> onlyIfAbsent,</span></span></span><br><span class="line"><span class="function"><span class="params">               <span class="keyword">boolean</span> evict)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, i;</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) == <span class="keyword">null</span> || (n = tab.length) == <span class="number">0</span>)</span><br><span class="line">        n = (tab = resize()).length;</span><br><span class="line">    <span class="comment">/* //调用resize()初始化数组</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            final Node&lt;K,V&gt;[] resize() &#123;</span></span><br><span class="line"><span class="comment">                    Node&lt;K,V&gt;[] oldTab = table;</span></span><br><span class="line"><span class="comment">                    int oldCap = (oldTab == null) ? 0 : oldTab.length;//0</span></span><br><span class="line"><span class="comment">                    int oldThr = threshold;//0</span></span><br><span class="line"><span class="comment">                    int newCap, newThr = 0; </span></span><br><span class="line"><span class="comment">                    if (oldCap &gt; 0) &#123;</span></span><br><span class="line"><span class="comment">                        //...</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment">                    else if (oldThr &gt; 0) </span></span><br><span class="line"><span class="comment">                        //...</span></span><br><span class="line"><span class="comment">                    else &#123;   //初始化数组容量和阈值</span></span><br><span class="line"><span class="comment">                        newCap = DEFAULT_INITIAL_CAPACITY;//16</span></span><br><span class="line"><span class="comment">                        newThr = (int)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);// 0.75 * 16 = 12（也就是map的size达到12时，就会扩容）</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment">                    if (newThr == 0) &#123;</span></span><br><span class="line"><span class="comment">                        //...</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment">                    threshold = newThr;//将新阈值赋给threshold</span></span><br><span class="line"><span class="comment">                    @SuppressWarnings(&#123;"rawtypes","unchecked"&#125;)</span></span><br><span class="line"><span class="comment">                    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])new Node[newCap];</span></span><br><span class="line"><span class="comment">                    table = newTab;</span></span><br><span class="line"><span class="comment">                    if (oldTab != null) &#123;</span></span><br><span class="line"><span class="comment">                        //...</span></span><br><span class="line"><span class="comment">                    &#125;</span></span><br><span class="line"><span class="comment">                    return newTab;//返回初始化的新数组</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">    <span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>)<span class="comment">//数组该位置上仍没有结点</span></span><br><span class="line">        tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        Node&lt;K,V&gt; e; K k;</span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))<span class="comment">//key值相等</span></span><br><span class="line">            e = p;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)<span class="comment">//p为树结点</span></span><br><span class="line">            e = ((TreeNode&lt;K,V&gt;)p).putTreeVal(<span class="keyword">this</span>, tab, hash, key, value);</span><br><span class="line">        <span class="keyword">else</span> &#123;<span class="comment">//p为链表结点</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> binCount = <span class="number">0</span>; ; ++binCount) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((e = p.next) == <span class="keyword">null</span>) &#123;<span class="comment">// 尾插法插入新结点</span></span><br><span class="line">                    p.next = newNode(hash, key, value, <span class="keyword">null</span>);</span><br><span class="line">                    <span class="comment">//static final int TREEIFY_THRESHOLD = 8;</span></span><br><span class="line">                    <span class="keyword">if</span> (binCount &gt;= TREEIFY_THRESHOLD - <span class="number">1</span>) <span class="comment">// 超过TREEIFY_THRESHOLD将把链表转化为红黑树</span></span><br><span class="line">                        treeifyBin(tab, hash);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                p = e;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123; <span class="comment">// 存在key冲突（key值相同）</span></span><br><span class="line">            V oldValue = e.value;</span><br><span class="line">            <span class="keyword">if</span> (!onlyIfAbsent || oldValue == <span class="keyword">null</span>)</span><br><span class="line">                e.value = value;</span><br><span class="line">            afterNodeAccess(e);</span><br><span class="line">            <span class="keyword">return</span> oldValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//modCount是此HashMap经过结构修改的次数</span></span><br><span class="line">    ++modCount;</span><br><span class="line">    <span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">        resize();<span class="comment">//这里的resize()是扩容的含义了</span></span><br><span class="line">    afterNodeInsertion(evict);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>接下来我们讲讲resize扩容操作（当map的size达到threshold时，就会扩容）。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> Node&lt;K,V&gt;[] resize() &#123;</span><br><span class="line">    Node&lt;K,V&gt;[] oldTab = table;</span><br><span class="line">    <span class="keyword">int</span> oldCap = (oldTab == <span class="keyword">null</span>) ? <span class="number">0</span> : oldTab.length;</span><br><span class="line">    <span class="keyword">int</span> oldThr = threshold;</span><br><span class="line">    <span class="keyword">int</span> newCap, newThr = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (oldCap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">//超过HashMap的容量上限就不再继续扩容</span></span><br><span class="line">        <span class="keyword">if</span> (oldCap &gt;= MAXIMUM_CAPACITY) &#123;</span><br><span class="line">            threshold = Integer.MAX_VALUE;</span><br><span class="line">            <span class="keyword">return</span> oldTab;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//新容量为原容量的2倍，新的上线为原上线的2倍</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((newCap = oldCap &lt;&lt; <span class="number">1</span>) &lt; MAXIMUM_CAPACITY &amp;&amp;</span><br><span class="line">                 oldCap &gt;= DEFAULT_INITIAL_CAPACITY)</span><br><span class="line">            newThr = oldThr &lt;&lt; <span class="number">1</span>; <span class="comment">// double threshold</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (oldThr &gt; <span class="number">0</span>) </span><br><span class="line">        newCap = oldThr;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        newCap = DEFAULT_INITIAL_CAPACITY;</span><br><span class="line">        newThr = (<span class="keyword">int</span>)(DEFAULT_LOAD_FACTOR * DEFAULT_INITIAL_CAPACITY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (newThr == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">float</span> ft = (<span class="keyword">float</span>)newCap * loadFactor;</span><br><span class="line">        newThr = (newCap &lt; MAXIMUM_CAPACITY &amp;&amp; ft &lt; (<span class="keyword">float</span>)MAXIMUM_CAPACITY ?</span><br><span class="line">                  (<span class="keyword">int</span>)ft : Integer.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">    threshold = newThr;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化新容量数组</span></span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(&#123;<span class="string">"rawtypes"</span>,<span class="string">"unchecked"</span>&#125;)</span><br><span class="line">    Node&lt;K,V&gt;[] newTab = (Node&lt;K,V&gt;[])<span class="keyword">new</span> Node[newCap];</span><br><span class="line">    table = newTab;</span><br><span class="line">    <span class="keyword">if</span> (oldTab != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; oldCap; ++j) &#123;</span><br><span class="line">            Node&lt;K,V&gt; e;</span><br><span class="line">            <span class="keyword">if</span> ((e = oldTab[j]) != <span class="keyword">null</span>) &#123;<span class="comment">//oldTab[j]不为空</span></span><br><span class="line">                oldTab[j] = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (e.next == <span class="keyword">null</span>)<span class="comment">//若该节点不存在散列冲突，计算在新数组中的槽位，直接插入</span></span><br><span class="line">                    newTab[e.hash &amp; (newCap - <span class="number">1</span>)] = e;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (e <span class="keyword">instanceof</span> TreeNode)<span class="comment">//插入红黑树节点</span></span><br><span class="line">                    ((TreeNode&lt;K,V&gt;)e).split(<span class="keyword">this</span>, newTab, j, oldCap);</span><br><span class="line">                <span class="keyword">else</span> &#123; <span class="comment">//按照原顺序插入链表节点（不同于jdk1.7）</span></span><br><span class="line">                    Node&lt;K,V&gt; loHead = <span class="keyword">null</span>, loTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; hiHead = <span class="keyword">null</span>, hiTail = <span class="keyword">null</span>;</span><br><span class="line">                    Node&lt;K,V&gt; next;</span><br><span class="line">                    <span class="keyword">do</span> &#123;</span><br><span class="line">                        next = e.next;</span><br><span class="line">                        <span class="comment">/*</span></span><br><span class="line"><span class="comment">                         *(e.hash &amp; oldCap) == 0</span></span><br><span class="line"><span class="comment">                         * 如果这个判断为true则说明e这个节点在resize之后不需要挪位置，反之则需要换个位置。</span></span><br><span class="line"><span class="comment">                         * 虽然这个代码难理解，但是自己举几个例子也能判断出来</span></span><br><span class="line"><span class="comment">                         * 比如有1，17两个数，在HashMap大小是16的时候，他们的hash值都是1，</span></span><br><span class="line"><span class="comment">                         * 如果此时扩容为32，可以看出1的hash是不变的，</span></span><br><span class="line"><span class="comment">                         * 但是17是会变，也就是说 1 &amp; 16 = 0， 17 &amp; 16 != 0</span></span><br><span class="line"><span class="comment">                         */</span></span><br><span class="line">                        <span class="keyword">if</span> ((e.hash &amp; oldCap) == <span class="number">0</span>) &#123;<span class="comment">//保持原槽位</span></span><br><span class="line">                            <span class="keyword">if</span> (loTail == <span class="keyword">null</span>)</span><br><span class="line">                                loHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                loTail.next = e;</span><br><span class="line">                            loTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span> &#123;<span class="comment">//原槽位+原容量</span></span><br><span class="line">                            <span class="keyword">if</span> (hiTail == <span class="keyword">null</span>)</span><br><span class="line">                                hiHead = e;</span><br><span class="line">                            <span class="keyword">else</span></span><br><span class="line">                                hiTail.next = e;</span><br><span class="line">                            hiTail = e;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">while</span> ((e = next) != <span class="keyword">null</span>);</span><br><span class="line">                    <span class="keyword">if</span> (loTail != <span class="keyword">null</span>) &#123;<span class="comment">//原槽位插入新数组中</span></span><br><span class="line">                        loTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j] = loHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (hiTail != <span class="keyword">null</span>) &#123;<span class="comment">//原槽位+原容量插入新数组中</span></span><br><span class="line">                        hiTail.next = <span class="keyword">null</span>;</span><br><span class="line">                        newTab[j + oldCap] = hiHead;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newTab;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="HashMap如何降低冲突"><a href="#HashMap如何降低冲突" class="headerlink" title="HashMap如何降低冲突"></a>HashMap如何降低冲突</h2><p>主要从两个地方来说明：</p><h3 id="为什么HashMap要采用2的n次方的数量级作为数组的长度"><a href="#为什么HashMap要采用2的n次方的数量级作为数组的长度" class="headerlink" title="为什么HashMap要采用2的n次方的数量级作为数组的长度"></a>为什么HashMap要采用2的n次方的数量级作为数组的长度</h3><p>答案是因为HashMap需要用length-1的数量级和hash值做一个与操作<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p = tab[i = (n - <span class="number">1</span>) &amp; hash]</span><br></pre></td></tr></table></figure></p><p>如果长度是17,那么length-1就是16那么与下来的值要么是0要么是16,也就是说16个槽子只用了两个槽,效率是很低的,而如果采用16(2的四次方),就是15(01111)做与操作,均匀分不到0-15的槽子上<br>我们可以从下面的例子中说明问题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n = 17 -&gt; 0001 0001</span><br><span class="line">n - 1  -&gt; 0001 0000</span><br><span class="line"></span><br><span class="line">假设hash值为 0000 0001 那么和(n-1)执行&amp;运算后结果为 0000 0000</span><br><span class="line">假设hash值为 0000 0011 那么和(n-1)执行&amp;运算后结果为 0000 0000</span><br></pre></td></tr></table></figure><p>如果长度是17,那么length-1就是16，那么与下来的值要么是0要么是16,也就是说16个槽子只用了两个槽,效率是很低的。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">n = 16 -&gt; 0001 0000</span><br><span class="line">n - 1  -&gt; 0000 1111</span><br><span class="line"></span><br><span class="line">假设hash值为 0000 0001 那么和(n-1)执行&amp;运算后结果为 0000 0001</span><br><span class="line">假设hash值为 0000 0011 那么和(n-1)执行&amp;运算后结果为 0000 0011</span><br></pre></td></tr></table></figure><p>而如果长度是16,那么length-1就是15，做与操作可以均匀分配到0-15的槽子上。</p><h3 id="hash函数"><a href="#hash函数" class="headerlink" title="hash函数"></a>hash函数</h3><p>如果是自己实现hash算法的话，最简单的话就是直接用hasCode对(n-1)取余：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">index = key.hasCode() &amp; (n-<span class="number">1</span>)</span><br></pre></td></tr></table></figure></p><p>这种方法是有缺陷的，就是取余的计算结果对高位是无效的，只是对低位有效，当计算出来的hasCode()只有高位有变化时，取余的结果还是一样的。</p><p>当key计算出来的hashCode()只有高位变化时，最终算出来的index索引就会引起hash冲突，如果冲突太多的话，HashMap的效率就会非常低下了。</p><p>我们看看JDK1.8中hash算法的实现。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">hash</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">int</span> h;</span><br><span class="line">       <span class="keyword">return</span> (key == <span class="keyword">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">   index = (n - <span class="number">1</span>) &amp; hash(key) <span class="comment">//n表示长度</span></span><br></pre></td></tr></table></figure></p><p>首先，对hashCode进行16位的无符号右移，然后对自身进行异或运算，最后取余。通过上面的操作，hash能够把高位的变化影响到低位的变化。</p><p>至于为什么是使用异或（^）,因为&amp;和|都会使得结果偏向0或者1 ,并不是均匀的概念。</p><h2 id="HashMap的get函数"><a href="#HashMap的get函数" class="headerlink" title="HashMap的get函数"></a>HashMap的get函数</h2><p>get()比较简单，直接贴源码。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">get</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="keyword">return</span> (e = getNode(hash(key), key)) == <span class="keyword">null</span> ? <span class="keyword">null</span> : e.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">getNode</span><span class="params">(<span class="keyword">int</span> hash, Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; first, e; <span class="keyword">int</span> n; K k;</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (first = tab[(n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (first.hash == hash &amp;&amp; <span class="comment">// always check first node</span></span><br><span class="line">            ((k = first.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            <span class="keyword">return</span> first;</span><br><span class="line">        <span class="keyword">if</span> ((e = first.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (first <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                <span class="keyword">return</span> ((TreeNode&lt;K,V&gt;)first).getTreeNode(hash, key);</span><br><span class="line">            <span class="keyword">do</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                    ((k = e.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">                    <span class="keyword">return</span> e;</span><br><span class="line">            &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="HashMap的remove函数"><a href="#HashMap的remove函数" class="headerlink" title="HashMap的remove函数"></a>HashMap的remove函数</h2><p>remove()和get()差不多，通过node将查找的结点记录下，再进行删除相关的操作。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> V <span class="title">remove</span><span class="params">(Object key)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt; e;</span><br><span class="line">    <span class="keyword">return</span> (e = removeNode(hash(key), key, <span class="keyword">null</span>, <span class="keyword">false</span>, <span class="keyword">true</span>)) == <span class="keyword">null</span> ?</span><br><span class="line">        <span class="keyword">null</span> : e.value;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> Node&lt;K,V&gt; <span class="title">removeNode</span><span class="params">(<span class="keyword">int</span> hash, Object key, Object value,</span></span></span><br><span class="line"><span class="function"><span class="params">                           <span class="keyword">boolean</span> matchValue, <span class="keyword">boolean</span> movable)</span> </span>&#123;</span><br><span class="line">    Node&lt;K,V&gt;[] tab; Node&lt;K,V&gt; p; <span class="keyword">int</span> n, index;</span><br><span class="line">    <span class="keyword">if</span> ((tab = table) != <span class="keyword">null</span> &amp;&amp; (n = tab.length) &gt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">        (p = tab[index = (n - <span class="number">1</span>) &amp; hash]) != <span class="keyword">null</span>) &#123;</span><br><span class="line">        Node&lt;K,V&gt; node = <span class="keyword">null</span>, e; K k; V v;</span><br><span class="line">        <span class="keyword">if</span> (p.hash == hash &amp;&amp;</span><br><span class="line">            ((k = p.key) == key || (key != <span class="keyword">null</span> &amp;&amp; key.equals(k))))</span><br><span class="line">            node = p;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ((e = p.next) != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (p <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                node = ((TreeNode&lt;K,V&gt;)p).getTreeNode(hash, key);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">do</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (e.hash == hash &amp;&amp;</span><br><span class="line">                        ((k = e.key) == key ||</span><br><span class="line">                         (key != <span class="keyword">null</span> &amp;&amp; key.equals(k)))) &#123;</span><br><span class="line">                        node = e;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    p = e;</span><br><span class="line">                &#125; <span class="keyword">while</span> ((e = e.next) != <span class="keyword">null</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (node != <span class="keyword">null</span> &amp;&amp; (!matchValue || (v = node.value) == value ||</span><br><span class="line">                             (value != <span class="keyword">null</span> &amp;&amp; value.equals(v)))) &#123;</span><br><span class="line">            <span class="keyword">if</span> (node <span class="keyword">instanceof</span> TreeNode)</span><br><span class="line">                ((TreeNode&lt;K,V&gt;)node).removeTreeNode(<span class="keyword">this</span>, tab, movable);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (node == p)</span><br><span class="line">                tab[index] = node.next;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                p.next = node.next;</span><br><span class="line">            ++modCount;</span><br><span class="line">            --size;</span><br><span class="line">            afterNodeRemoval(node);</span><br><span class="line">            <span class="keyword">return</span> node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="为什么HashMap是线程不安全的"><a href="#为什么HashMap是线程不安全的" class="headerlink" title="为什么HashMap是线程不安全的"></a>为什么HashMap是线程不安全的</h2><p>JDK1.7 HashMap中出现的<strong>死循环、数据丢失</strong>已经得到了解决，可是它仍然存在<strong>数据覆盖</strong>的问题。</p><h3 id="在putVal-如果不存在hash冲突："><a href="#在putVal-如果不存在hash冲突：" class="headerlink" title="在putVal()如果不存在hash冲突："></a>在putVal()如果不存在hash冲突：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ((p = tab[i = (n - <span class="number">1</span>) &amp; hash]) == <span class="keyword">null</span>) <span class="comment">// 如果没有hash碰撞则直接插入元素</span></span><br><span class="line">    tab[i] = newNode(hash, key, value, <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><p>假设两个线程A、B都在进行put操作，并且hash函数计算出的插入下标是相同的，当线程A执行完<code>if ((p = tab[i = (n - 1) &amp; hash]) == null)</code>后由于时间片耗尽导致被挂起，而线程B得到时间片后在该下标处插入了元素，完成了正常的插入，然后线程A获得时间片，由于之前已经进行了hash碰撞的判断，所有此时不会再进行判断，而是直接进行插入，这就导致了线程B插入的数据被线程A覆盖了，从而线程不安全。</p><h3 id="putval-最后size-1的时候："><a href="#putval-最后size-1的时候：" class="headerlink" title="putval()最后size+1的时候："></a>putval()最后size+1的时候：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (++size &gt; threshold)</span><br><span class="line">    resize();</span><br></pre></td></tr></table></figure><p>++size，一个最常见的线程不安全问题，还是由于数据覆盖又导致了线程不安全。</p><h2 id="被transient所修饰table变量"><a href="#被transient所修饰table变量" class="headerlink" title="被transient所修饰table变量"></a>被transient所修饰table变量</h2><p>最后还想提一个容易被大家忽略的点，如果大家细心阅读HashMap的源码，会发现桶数组table被申明为transient。transient表示易变的意思，在Java中，被该关键字修饰的变量不会被默认的序列化机制序列化。我们再回到源码中，考虑一个问题：桶数组table是HashMap底层重要的数据结构，不序列化的话，别人还怎么还原呢？</p><p>这里简单说明一下吧，HashMap并没有使用默认的序列化机制，而是通过实现readObject/writeObject两个方法自定义了序列化的内容。这样做是有原因的，试问一句，HashMap中存储的内容是什么？不用说，大家也知道是键值对。所以只要我们把键值对序列化了，我们就可以根据键值对数据重建HashMap。有的朋友可能会想，序列化table不是可以一步到位，后面直接还原不就行了吗？这样一想，倒也是合理。但序列化talbe存在着两个问题：</p><ol><li>table 多数情况下是无法被存满的，序列化未使用的部分，浪费空间</li><li>同一个键值对在不同 JVM 下，所处的桶位置可能是不同的，在不同的 JVM 下反序列化 table 可能会发生错误。</li></ol><p>以上两个问题中，第一个问题比较好理解，第二个问题解释一下。HashMap的get/put/remove等方法第一步就是根据hash找到键所在的桶位置，但如果键没有覆写hashCode方法，计算hash时最终调用Object中的hashCode方法。但Object中的hashCode方法是native型的，不同的JVM下，可能会有不同的实现，产生的hash可能也是不一样的。也就是说同一个键在不同平台下可能会产生不同的 hash，此时再对在同一个table继续操作，就会出现问题。</p><p>参考：<br>transient所修饰table变量 <a href="https://segmentfault.com/a/1190000012926722?utm_source=tag-newest#item-3-6" target="_blank" rel="noopener">https://segmentfault.com/a/1190000012926722?utm_source=tag-newest#item-3-6</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;浅析JDK1.8 HashMap源码。&lt;/p&gt;
&lt;h2 id=&quot;写在开篇&quot;&gt;&lt;a href=&quot;#写在开篇&quot; class=&quot;headerlink&quot; title=&quot;写在开篇&quot;&gt;&lt;/a&gt;写在开篇&lt;/h2&gt;&lt;p&gt;HashMap是最常用的数据结构之一，是JDK中util包下的一个集合
      
    
    </summary>
    
      <category term="Java乐园" scheme="https://kyrie17.github.io/categories/Java%E4%B9%90%E5%9B%AD/"/>
    
    
      <category term="HashMap" scheme="https://kyrie17.github.io/tags/HashMap/"/>
    
  </entry>
  
  <entry>
    <title>为何不能创建参数化类型数组</title>
    <link href="https://kyrie17.github.io/2019/08/10/%E4%B8%BA%E4%BD%95%E4%B8%8D%E8%83%BD%E5%88%9B%E5%BB%BA%E5%8F%82%E6%95%B0%E5%8C%96%E7%B1%BB%E5%9E%8B%E6%95%B0%E7%BB%84/"/>
    <id>https://kyrie17.github.io/2019/08/10/为何不能创建参数化类型数组/</id>
    <published>2019-08-10T02:47:24.000Z</published>
    <updated>2019-09-18T06:25:06.034Z</updated>
    
    <content type="html"><![CDATA[<p>对<a href="https://blog.csdn.net/s10461/article/details/53941091中泛型数组做一下补充总结。（这篇博客对于泛型总结得挺好）" target="_blank" rel="noopener">https://blog.csdn.net/s10461/article/details/53941091中泛型数组做一下补充总结。（这篇博客对于泛型总结得挺好）</a></p><p>在Java中是不能实例化参数化类型数组的，例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt;[] ls = <span class="keyword">new</span> ArrayList&lt;String&gt;[<span class="number">10</span>];</span><br></pre></td></tr></table></figure></p><p>而使用通配符创建泛型数组是可以的，例如：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;?&gt;[] ls = <span class="keyword">new</span> ArrayList&lt;?&gt;[<span class="number">10</span>];</span><br></pre></td></tr></table></figure></p><p>这样也是可以的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt;[] ls = <span class="keyword">new</span> ArrayList[<span class="number">10</span>];</span><br></pre></td></tr></table></figure></p><p>文中举了一个例子：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List&lt;String&gt;[] lsa = <span class="keyword">new</span> List&lt;String&gt;[<span class="number">10</span>]; <span class="comment">// Not really allowed.    </span></span><br><span class="line">Object o = lsa;    </span><br><span class="line">Object[] oa = (Object[]) o;    </span><br><span class="line">List&lt;Integer&gt; li = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();    </span><br><span class="line">li.add(<span class="keyword">new</span> Integer(<span class="number">3</span>));    </span><br><span class="line">oa[<span class="number">1</span>] = li; <span class="comment">// Unsound, but passes run time store check    </span></span><br><span class="line">String s = lsa[<span class="number">1</span>].get(<span class="number">0</span>); <span class="comment">// Run-time error: ClassCastException.</span></span><br></pre></td></tr></table></figure></p><p>对于<strong>oa[1] = li;</strong> 如果试图存储其他类型的元素，就会抛出一个ArrayStoreException异常，不过对于泛型类型，擦除会使这种机制无效。所以文中会说 Unsound, but passes run time store check（不健全，但通过运行时存储检查 ）。</p><p>它的重点在下一句<strong>String s = lsa[1].get(0);</strong>抛出Run-time error: ClassCastException。在取出数据的时候却要做一次类型转换，所以就会出现ClassCastException，如果可以进行泛型数组的声明，上面说的这种情况在编译期将不会出现任何的警告和错误，只有在运行时才会出错。但通配符方式取出数据是会做显示的类型转换的，所以不会抛出这个运行时异常。这也就是为什么第一种情况不被允许而使用通配符创建泛型数组可以。</p><p>下面采用通配符的方式是被允许的:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">List&lt;?&gt;[] lsa = <span class="keyword">new</span> List&lt;?&gt;[<span class="number">10</span>]; <span class="comment">// OK, array of unbounded wildcard type.    </span></span><br><span class="line">Object o = lsa;    </span><br><span class="line">Object[] oa = (Object[]) o;    </span><br><span class="line">List&lt;Integer&gt; li = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();    </span><br><span class="line">li.add(<span class="keyword">new</span> Integer(<span class="number">3</span>));    </span><br><span class="line">oa[<span class="number">1</span>] = li; <span class="comment">// Correct.    </span></span><br><span class="line">Integer i = (Integer) lsa[<span class="number">1</span>].get(<span class="number">0</span>); <span class="comment">// OK</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;对&lt;a href=&quot;https://blog.csdn.net/s10461/article/details/53941091中泛型数组做一下补充总结。（这篇博客对于泛型总结得挺好）&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.
      
    
    </summary>
    
      <category term="Java乐园" scheme="https://kyrie17.github.io/categories/Java%E4%B9%90%E5%9B%AD/"/>
    
    
      <category term="泛型" scheme="https://kyrie17.github.io/tags/%E6%B3%9B%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>通配符类型</title>
    <link href="https://kyrie17.github.io/2019/08/10/%E9%80%9A%E9%85%8D%E7%AC%A6%E7%B1%BB%E5%9E%8B/"/>
    <id>https://kyrie17.github.io/2019/08/10/通配符类型/</id>
    <published>2019-08-10T02:44:03.000Z</published>
    <updated>2019-09-18T06:24:58.730Z</updated>
    
    <content type="html"><![CDATA[<p>在 Java 泛型中存在通配符的概念:</p><blockquote><p>&lt;? extends C&gt;是上界通配符<br>&lt;? super C&gt;是下界通配符</p></blockquote><p>接下来对这些进行说明，先定义几个类：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span></span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">extends</span> <span class="title">B</span></span>&#123;&#125;;</span><br></pre></td></tr></table></figure></p><h2 id="为什么会出现这个呢？"><a href="#为什么会出现这个呢？" class="headerlink" title="为什么会出现这个呢？"></a>为什么会出现这个呢？</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A a = <span class="keyword">new</span> B();</span><br><span class="line">List&lt;A&gt; list= <span class="keyword">new</span> ArrayList&lt;B&gt;(); <span class="comment">// 报错Type mismatch</span></span><br></pre></td></tr></table></figure><p>这是因为无论A和B有什么关系，通常，List<a>和List<b>没有什么联系。<br>那么我们通过&lt;? extends B&gt;解决这个问题：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">List&lt;? extends A&gt; list = <span class="keyword">new</span> ArrayList&lt;B&gt;(); <span class="comment">//OK</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></b></a></p><p>这里用的是 ArrayList 做例子，但并不是只针对集合，是针对类似集合出现的问题的情景。</p><h2 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h2><h3 id="上界-lt-extends-B-gt-不能往里存，只能往外取"><a href="#上界-lt-extends-B-gt-不能往里存，只能往外取" class="headerlink" title="上界&lt;? extends B&gt;不能往里存，只能往外取"></a>上界&lt;? extends B&gt;不能往里存，只能往外取</h3><ul><li>add() 编译器只知道类型是B或者B的子类，所以可能是B、C、D其中的一个类型，但为了保证类型的安全就不能添加除了null之外的元素，即使是B本身也不行。（因为B不能代表C或者D）</li><li>get() 此时不知道返回的是B、C、D其中哪个类型，所以返回类型是B</li></ul><h3 id="下界-lt-super-B-gt-可以存（存的只能是B或者B的子类），但往外取只能放在Object对象里"><a href="#下界-lt-super-B-gt-可以存（存的只能是B或者B的子类），但往外取只能放在Object对象里" class="headerlink" title="下界&lt;? super B&gt;可以存（存的只能是B或者B的子类），但往外取只能放在Object对象里"></a>下界&lt;? super B&gt;可以存（存的只能是B或者B的子类），但往外取只能放在Object对象里</h3><ul><li>add() 可以添加B、C、D（因为C或D可以代表B）</li><li>get()  因为是下边界，所以返回类型只能是Object，所以说它的get()受到限制</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在 Java 泛型中存在通配符的概念:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;lt;? extends C&amp;gt;是上界通配符&lt;br&gt;&amp;lt;? super C&amp;gt;是下界通配符&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;接下来对这些进行说明，先定义几个类：&lt;br&gt;&lt;
      
    
    </summary>
    
      <category term="Java乐园" scheme="https://kyrie17.github.io/categories/Java%E4%B9%90%E5%9B%AD/"/>
    
    
      <category term="泛型" scheme="https://kyrie17.github.io/tags/%E6%B3%9B%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>Java反射</title>
    <link href="https://kyrie17.github.io/2019/04/20/Java%E5%8F%8D%E5%B0%84/"/>
    <id>https://kyrie17.github.io/2019/04/20/Java反射/</id>
    <published>2019-04-20T14:50:04.000Z</published>
    <updated>2020-11-15T16:38:09.640Z</updated>
    
    <content type="html"><![CDATA[<p>转载自：<a href="http://www.cnblogs.com/chanshuyi/p/head_first_of_reflection.html" target="_blank" rel="noopener">http://www.cnblogs.com/chanshuyi/p/head_first_of_reflection.html</a></p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p>反射就是在运行时才知道要操作的类是什么，并且可以在运行时获取类的完整构造，并调用对应的方法。</p></blockquote><p>反射之中包含了一个「反」字，所以想要解释反射就必须先从「正」开始解释。</p><p>一般情况下，我们使用某个类时必定知道它是什么类，是用来做什么的。于是我们直接对这个类进行实例化，之后使用这个类对象进行操作。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Apple apple = <span class="keyword">new</span> Apple(); <span class="comment">//直接初始化，「正射」</span></span><br><span class="line">apple.setPrice(<span class="number">4</span>);</span><br></pre></td></tr></table></figure><p>上面这样子进行类对象的初始化，我们可以理解为「正」。</p><p>而反射则是一开始并不知道我要初始化的类对象是什么，自然也无法使用 new 关键字来创建对象了。</p><p>这时候，我们使用 JDK 提供的反射 API 进行反射调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Class clz = Class.forName(<span class="string">"com.chenshuyi.reflect.Apple"</span>);</span><br><span class="line">Method method = clz.getMethod(<span class="string">"setPrice"</span>, <span class="keyword">int</span>.class);</span><br><span class="line">Constructor constructor = clz.getConstructor();</span><br><span class="line">Object object = constructor.newInstance();</span><br><span class="line">method.invoke(object, <span class="number">4</span>);</span><br></pre></td></tr></table></figure><p>上面两段代码的执行结果，其实是完全一样的。但是其思路完全不一样，第一段代码在未运行时就已经确定了要运行的类（Apple），而第二段代码则是在运行时通过字符串值才得知要运行的类（com.chenshuyi.reflect.Apple）。</p><p>所以说什么是反射？</p><blockquote><p>当程序运行时，允许改变程序结构或变量类型，这种语言称为动态语言。我们认为 Java 并不是动态语言，但是它却又一个非常突出的动态相关的机制，俗称：反射。<br>Reflection 是Java 程序开发语言的特征之一，它允许运行中的 Java 程序获取自身的信息，并且可以操作类和对象的内部属性。</p></blockquote><p>通过反射，我们可以在运行时获得程序或程序集中每一个类型成员和成员变量的信息。</p><p>程序中一般的对象类型都是在编译期就确定下来的，而Java 反射机制可以动态的创建对象并调用其属性，这样对象的类型在编译期是未知的。所以我们可以通过反射机制直接创建对象即使这个对象在编译期是未知的.</p><p>反射的核心：是 JVM 在运行时 才动态加载的类或调用方法或属性，他不需要事先（写代码的时候或编译期）知道运行对象是谁。</p><h2 id="Java反射框架提供以下功能："><a href="#Java反射框架提供以下功能：" class="headerlink" title="Java反射框架提供以下功能："></a>Java反射框架提供以下功能：</h2><ul><li>在运行时判断任意一个对象所属的类</li><li>在运行时构造任意一个类的对象</li><li>在运行时判断任意一个类所具有的成员变量和方法（通过反射设置可以调用 private）</li><li>在运行时调用人一个对象的方法</li></ul><h2 id="反射的主要用途"><a href="#反射的主要用途" class="headerlink" title="反射的主要用途"></a>反射的主要用途</h2><p>很多人都认为反射在实际Java中开发应用中并不广泛，其实不然。<br>当我们在使用 IDE（如 Eclipse\IDEA）时，当我们输入一个队长或者类并向调用它的属性和方法时，一按 (“.”)点号，编译器就会自动列出她的属性或方法，这里就会用到反射。</p><p><strong>反射最重要的用途就是开发各种通用框架。</strong><br>很多框架（比如 Spring）都是配置化的（比如通过 XML文件配置 JavaBean，Action之类的），为了保证框架的通用性，他们可能根据配置文件加载不同的对象或类，调用不同的方法，这个时候就必须用到反射——运行时动态加载需要加载的对象。<br>举一个例子，在运用Struts 2框架的开发中我们一般会在struts.xml里去配置Action，比如：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">name</span>=<span class="string">"login"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">class</span>=<span class="string">"org.ScZyhSoft.test.action.SimpleLoginAction"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">method</span>=<span class="string">"execute"</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span>&gt;</span>/shop/shop-index.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">result</span> <span class="attr">name</span>=<span class="string">"error"</span>&gt;</span>login.jsp<span class="tag">&lt;/<span class="name">result</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">action</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>配置文件与Action建立了一种映射关系，当View层发出请求时，请求会被StrutsPrepareAndExecuteFilter拦截，然后StrutsPrepareAndExecuteFilter会去动态地创建Action实例。</p><p>——比如我们请求login.action，那么StrutsPrepareAndExecuteFilter就会去解析struts.xml文件，检索action中name为login的Action，并根据class属性创建SimpleLoginAction实例，并用invoke方法来调用execute方法，这个过程离不开反射。<br>对与框架开发人员来说，反射虽小但作用非常大，它是各种容器实现的核心。而对于一般的开发者来说，不深入框架开发则用反射用的就会少一点，不过了解一下框架的底层机制有助于丰富自己的编程思想，也是很有益的。</p><h2 id="一个简单的例子"><a href="#一个简单的例子" class="headerlink" title="一个简单的例子"></a>一个简单的例子</h2><p>上面提到的示例程序，其完整的程序代码如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Apple</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> price;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">int</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//正常的调用</span></span><br><span class="line">        Apple apple = <span class="keyword">new</span> Apple();</span><br><span class="line">        apple.setPrice(<span class="number">5</span>);</span><br><span class="line">        System.out.println(<span class="string">"Apple Price:"</span> + apple.getPrice());</span><br><span class="line">        <span class="comment">//使用反射调用</span></span><br><span class="line">        Class clz = Class.forName(<span class="string">"com.chenshuyi.api.Apple"</span>);</span><br><span class="line">        Method setPriceMethod = clz.getMethod(<span class="string">"setPrice"</span>, <span class="keyword">int</span>.class);</span><br><span class="line">        Constructor appleConstructor = clz.getConstructor();</span><br><span class="line">        Object appleObj = appleConstructor.newInstance();</span><br><span class="line">        setPriceMethod.invoke(appleObj, <span class="number">14</span>);</span><br><span class="line">        Method getPriceMethod = clz.getMethod(<span class="string">"getPrice"</span>);</span><br><span class="line">        System.out.println(<span class="string">"Apple Price:"</span> + getPriceMethod.invoke(appleObj));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从代码中可以看到我们使用反射调用了 setPrice 方法，并传递了 14 的值。之后使用反射调用了 getPrice 方法，输出其价格。上面的代码整个的输出结果是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Apple Price:<span class="number">5</span></span><br><span class="line">Apple Price:<span class="number">14</span></span><br></pre></td></tr></table></figure><hr><h3 id="从这个简单的例子可以看出，一般情况下我们使用反射获取一个对象的步骤："><a href="#从这个简单的例子可以看出，一般情况下我们使用反射获取一个对象的步骤：" class="headerlink" title="从这个简单的例子可以看出，一般情况下我们使用反射获取一个对象的步骤："></a>从这个简单的例子可以看出，一般情况下我们使用反射获取一个对象的步骤：</h3><ol><li><p>获取类的 Class 对象实例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class clz = Class.forName(<span class="string">"com.zhenai.api.Apple"</span>);</span><br></pre></td></tr></table></figure></li><li><p>根据 Class 对象实例获取 Constructor 对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Constructor appleConstructor = clz.getConstructor();</span><br></pre></td></tr></table></figure></li><li><p>使用 Constructor 对象的 newInstance 方法获取反射类对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object appleObj = appleConstructor.newInstance();</span><br></pre></td></tr></table></figure></li></ol><hr><h3 id="而如果要调用某一个方法，则需要经过下面的步骤："><a href="#而如果要调用某一个方法，则需要经过下面的步骤：" class="headerlink" title="而如果要调用某一个方法，则需要经过下面的步骤："></a>而如果要调用某一个方法，则需要经过下面的步骤：</h3><ol><li><p>获取方法的 Method 对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Method setPriceMethod = clz.getMethod(<span class="string">"setPrice"</span>, <span class="keyword">int</span>.class);</span><br></pre></td></tr></table></figure></li><li><p>利用 invoke 方法调用方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setPriceMethod.invoke(appleObj, <span class="number">14</span>);</span><br></pre></td></tr></table></figure></li></ol><p>到这里，我们已经能够掌握反射的基本使用。但如果要进一步掌握反射，还需要对反射的常用 API 有更深入的理解。</p><p>在 JDK 中，反射相关的 API 可以分为下面几个方面：获取反射的 Class 对象、通过反射创建类对象、通过反射获取类属性方法及构造器。</p><h2 id="反射常用API"><a href="#反射常用API" class="headerlink" title="反射常用API"></a>反射常用API</h2><h3 id="获取反射中的Class对象"><a href="#获取反射中的Class对象" class="headerlink" title="获取反射中的Class对象"></a>获取反射中的Class对象</h3><p>在反射中，要获取一个类或调用一个类的方法，我们首先需要获取到该类的 Class 对象。</p><p>在 Java API 中，获取 Class 类对象有三种方法：</p><p><strong>第一种，使用 Class.forName 静态方法。</strong>当你知道该类的全路径名时，你可以使用该方法获取 Class 类对象。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class clz = Class.forName(<span class="string">"java.lang.String"</span>);</span><br></pre></td></tr></table></figure></p><p><strong>第二种，使用 .class 方法。</strong></p><p>这种方法只适合在编译前就知道操作的 Class。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class clz = String.class;</span><br></pre></td></tr></table></figure></p><p><strong>第三种，使用类对象的 getClass() 方法。</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="keyword">new</span> String(<span class="string">"Hello"</span>);</span><br><span class="line">Class clz = str.getClass();</span><br></pre></td></tr></table></figure></p><h3 id="通过反射创建类对象"><a href="#通过反射创建类对象" class="headerlink" title="通过反射创建类对象"></a>通过反射创建类对象</h3><p>通过反射创建类对象主要有两种方式：通过 Class 对象的 newInstance() 方法、通过 Constructor 对象的 newInstance() 方法</p><p>第一种：通过 Class 对象的 newInstance() 方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class clz = Apple.class;</span><br><span class="line">Apple apple = (Apple)clz.newInstance();</span><br></pre></td></tr></table></figure></p><p>第二种：通过 Constructor 对象的 newInstance() 方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Class clz = Apple.class;</span><br><span class="line">Constructor constructor = clz.getConstructor();</span><br><span class="line">Apple apple = (Apple)constructor.newInstance();</span><br></pre></td></tr></table></figure></p><p>通过 Constructor 对象创建类对象可以选择特定构造方法，而通过 Class 对象则只能使用默认的无参数构造方法。下面的代码就调用了一个有参数的构造方法进行了类对象的初始化。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Class clz = Apple.class;</span><br><span class="line">Constructor constructor = clz.getConstructor(String.class, <span class="keyword">int</span>.class);</span><br><span class="line">Apple apple = (Apple)constructor.newInstance(<span class="string">"红富士"</span>, <span class="number">15</span>);</span><br></pre></td></tr></table></figure></p><h3 id="通过反射获取类属性、方法、构造器"><a href="#通过反射获取类属性、方法、构造器" class="headerlink" title="通过反射获取类属性、方法、构造器"></a>通过反射获取类属性、方法、构造器</h3><p>我们通过 Class 对象的 getFields() 方法可以获取 Class 类的属性，但无法获取私有属性。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Class clz = Apple.class;</span><br><span class="line">Field[] fields = clz.getFields();</span><br><span class="line"><span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">    System.out.println(field.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果是：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">price</span><br></pre></td></tr></table></figure><p>而如果使用 Class 对象的 getDeclaredFields() 方法则可以获取包括私有属性在内的所有属性：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Class clz = Apple.class;</span><br><span class="line">Field[] fields = clz.getDeclaredFields();</span><br><span class="line"><span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">    System.out.println(field.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">name</span><br><span class="line">price</span><br></pre></td></tr></table></figure><p>与获取类属性一样，当我们去获取类方法、类构造器时，如果要获取私有方法或私有构造器，则必须使用有 declared 关键字的方法。</p><h2 id="反射源码解析"><a href="#反射源码解析" class="headerlink" title="反射源码解析"></a>反射源码解析</h2><p>当我们懂得了如何使用反射后，今天我们就来看看 JDK 源码中是如何实现反射的。或许大家平时没有使用过反射，但是在开发 Web 项目的时候会遇到过下面的异常：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">java.lang.NullPointerException </span><br><span class="line">...</span><br><span class="line">sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)</span><br><span class="line">  at java.lang.reflect.Method.invoke(Method.java:497)</span><br></pre></td></tr></table></figure><p>可以看到异常堆栈指出了异常在 Method 的第 497 的 invoke 方法中，其实这里指的 invoke 方法就是我们反射调用方法中的 invoke。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Method method = clz.getMethod(<span class="string">"setPrice"</span>, <span class="keyword">int</span>.class); </span><br><span class="line">method.invoke(object, <span class="number">4</span>);   <span class="comment">//就是这里的invoke方法</span></span><br></pre></td></tr></table></figure><p>例如我们经常使用的 Spring 配置中，经常会有相关 Bean 的配置：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.chenshuyi.Apple"</span>&gt;</span><br><span class="line">&lt;/bean&gt;</span><br></pre></td></tr></table></figure><p>当我们在 XML 文件中配置了上面这段配置之后，Spring 便会在启动的时候利用反射去加载对应的 Apple 类。而当 Apple 类不存在或发生启发异常时，异常堆栈便会将异常指向调用的 invoke 方法。</p><p>从这里可以看出，我们平常很多框架都使用了反射，而反射中最最终的就是 Method 类的 invoke 方法了。</p><p>下面我们来看看 JDK 的 invoke 方法到底做了些什么。</p><p>进入 Method 的 invoke 方法我们可以看到，一开始是进行了一些权限的检查，最后是调用了 MethodAccessor 类的 invoke 方法进行进一步处理，如下图红色方框所示。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/reflect1.png" alt="reflect1" title>                </div>                <div class="image-caption">reflect1</div>            </figure><p>那么 MethodAccessor 又是什么呢？其实 MethodAccessor 是一个接口，定义了方法调用的具体操作，而它有三个具体的实现类：</p><ul><li>sun.reflect.DelegatingMethodAccessorImpl</li><li>sun.reflect.MethodAccessorImpl</li><li>sun.reflect.NativeMethodAccessorImpl</li></ul><p>而要看 ma.invoke() 到底调用的是哪个类的 invoke 方法，则需要看看 MethodAccessor 对象返回的到底是哪个类对象，所以我们需要进入 acquireMethodAccessor() 方法中看看。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/reflect2.png" alt="reflect2" title>                </div>                <div class="image-caption">reflect2</div>            </figure><p>从 acquireMethodAccessor() 方法我们可以看到，代码先判断是否存在对应的 MethodAccessor 对象，如果存在那么就复用之前的 MethodAccessor 对象，否则调用 ReflectionFactory 对象的 newMethodAccessor 方法生成一个 MethodAccessor 对象。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/reflect3.png" alt="reflect3" title>                </div>                <div class="image-caption">reflect3</div>            </figure><p>在 ReflectionFactory 类的 newMethodAccessor 方法里，我们可以看到首先是生成了一个 NativeMethodAccessorImpl 对象，再这个对象作为参数调用 DelegatingMethodAccessorImpl 类的构造方法。</p><p>这里的实现是使用了代理模式，将 NativeMethodAccessorImpl 对象交给 DelegatingMethodAccessorImpl 对象代理。我们查看 DelegatingMethodAccessorImpl 类的构造方法可以知道，其实是将 NativeMethodAccessorImpl 对象赋值给 DelegatingMethodAccessorImpl 类的 delegate 属性。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/reflect4.png" alt="reflect4" title>                </div>                <div class="image-caption">reflect4</div>            </figure><p>所以说ReflectionFactory 类的 newMethodAccessor 方法最终返回 DelegatingMethodAccessorImpl 类对象。所以我们在前面的 ma.invoke() 里，其将会进入 DelegatingMethodAccessorImpl 类的 invoke 方法中。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/reflect5.png" alt="reflect5" title>                </div>                <div class="image-caption">reflect5</div>            </figure><p>进入 DelegatingMethodAccessorImpl 类的 invoke 方法后，这里调用了 delegate 属性的 invoke 方法，它又有两个实现类，分别是：DelegatingMethodAccessorImpl 和 NativeMethodAccessorImpl。按照我们前面说到的，这里的 delegate 其实是一个 NativeMethodAccessorImpl 对象，所以这里会进入 NativeMethodAccessorImpl 的 invoke 方法。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/reflect6.png" alt="reflect6" title>                </div>                <div class="image-caption">reflect6</div>            </figure><p>而在 NativeMethodAccessorImpl 的 invoke 方法里，其会判断调用次数是否超过阀值（numInvocations）。如果超过该阀值，那么就会生成另一个MethodAccessor 对象，并将原来 DelegatingMethodAccessorImpl 对象中的 delegate 属性指向最新的 MethodAccessor 对象。</p><p>到这里，其实我们可以知道 MethodAccessor 对象其实就是具体去生成反射类的入口。通过查看源码上的注释，我们可以了解到 MethodAccessor 对象的一些设计信息。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&quot;Inflation&quot; mechanism. Loading bytecodes to implement Method.invoke() and Constructor.newInstance() currently costs 3-4x more than an invocation via native code for the first invocation (though subsequent invocations have been benchmarked to be over 20x faster).Unfortunately this cost increases startup time for certain applications that use reflection intensively (but only once per class) to bootstrap themselves.</span><br><span class="line"></span><br><span class="line">Inflation 机制。初次加载字节码实现反射，使用 Method.invoke() 和 Constructor.newInstance() 加载花费的时间是使用原生代码加载花费时间的 3 - 4 倍。这使得那些频繁使用反射的应用需要花费更长的启动时间。</span><br><span class="line"></span><br><span class="line">To avoid this penalty we reuse the existing JVM entry points for the first few invocations of Methods and Constructors and then switch to the bytecode-based implementations. Package-private to be accessible to NativeMethodAccessorImpl and NativeConstructorAccessorImpl.</span><br><span class="line"></span><br><span class="line">为了避免这种痛苦的加载时间，我们在第一次加载的时候重用了 JVM 的入口，之后切换到字节码实现的实现。</span><br></pre></td></tr></table></figure><p>就像注释里说的，实际的 MethodAccessor 实现有两个版本，一个是 Native 版本，一个是 Java 版本。</p><p>Native 版本一开始启动快，但是随着运行时间边长，速度变慢。Java 版本一开始加载慢，但是随着运行时间边长，速度变快。正是因为两种存在这些问题，所以第一次加载的时候我们会发现使用的是 NativeMethodAccessorImpl 的实现，而当反射调用次数超过 15 次之后，则使用 MethodAccessorGenerator 生成的 MethodAccessorImpl 对象去实现反射。</p><p>Method 类的 invoke 方法整个流程可以表示成如下的时序图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/reflect7.png" alt="reflect7" title>                </div>                <div class="image-caption">reflect7</div>            </figure><p>讲到这里，我们了解了 Method 类的 invoke 方法的具体实现方式。知道了原来 invoke 方法内部有两种实现方式，一种是 native 原生的实现方式，一种是 Java 实现方式，这两种各有千秋。而为了最大化性能优势，JDK 源码使用了代理的设计模式去实现最大化性能。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;转载自：&lt;a href=&quot;http://www.cnblogs.com/chanshuyi/p/head_first_of_reflection.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.cnblogs.com/chan
      
    
    </summary>
    
      <category term="Java乐园" scheme="https://kyrie17.github.io/categories/Java%E4%B9%90%E5%9B%AD/"/>
    
    
  </entry>
  
  <entry>
    <title>保存对象</title>
    <link href="https://kyrie17.github.io/2019/04/12/%E4%BF%9D%E5%AD%98%E5%AF%B9%E8%B1%A1/"/>
    <id>https://kyrie17.github.io/2019/04/12/保存对象/</id>
    <published>2019-04-12T08:18:37.000Z</published>
    <updated>2019-09-18T06:24:29.185Z</updated>
    
    <content type="html"><![CDATA[<p>如果你正在编写游戏，就得有存储和恢复游戏的功能。如果你编写的是创建图表的程序，也必须有存储/打开的功能。如果程序需要存储状态，有两种方式：</p><ul><li>写入文件的序列化对象</li><li>写入文本文件</li></ul><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p>对象有状态和行为两种属性。行为存在于类中，而状态存在于个别对象中。</p></blockquote><p>如果你正在编写游戏，就得有存储和恢复游戏的功能。如果你编写的是创建图表的程序，也必须有存储/打开的功能。如果程序需要存储状态，有两种方式：</p><ul><li><p>只有自己写的java程序会用到这些数据：<br>用序列化（serialization）。这采用了面向对象的方式来做，将被序列化的对象写到文件中，然后就可以让你的程序去文件中读取序列化的对象并把它们展开回到活生生的状态。</p></li><li><p>如果数据需要被其他程序引用：<br>写一个纯文本文件。用其他程序可以解析的特殊字符写到文件中，例如写成用tab字符来隔的档案以便让电子表格或数据库应用程序能够应用。</p></li></ul><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><h3 id="序列化-1"><a href="#序列化-1" class="headerlink" title="序列化"></a>序列化</h3><p>下面是将对象序列化的方法步骤。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/Serializable1.png" alt="Serializable1" title>                </div>                <div class="image-caption">Serializable1</div>            </figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建出FileOutputStream</span></span><br><span class="line">FileOutputStream fileStream = <span class="keyword">new</span> FileOutputStream(<span class="string">"MyGame.ser"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建ObjectOutputStream</span></span><br><span class="line">ObjectOutputStream os = <span class="keyword">new</span> ObjectOutputStream(fileStream);</span><br><span class="line"></span><br><span class="line"><span class="comment">//写入对象</span></span><br><span class="line">os.writeObject(characterOne);</span><br><span class="line">os.writeObject(characterTwo);</span><br><span class="line">os.writeObject(characterThree);</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭ObjectOutputStream</span></span><br><span class="line">os.close();</span><br></pre></td></tr></table></figure><h3 id="解序列化"><a href="#解序列化" class="headerlink" title="解序列化"></a>解序列化</h3><p>下面是解序列化的方法步骤。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/Serializable2.png" alt="Serializable2" title>                </div>                <div class="image-caption">Serializable2</div>            </figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建出FileInputStream</span></span><br><span class="line">FileInputStream fileStream = <span class="keyword">new</span> FileIntStream(<span class="string">"MyGame.ser"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建ObjectInputStream</span></span><br><span class="line">ObjecInputStream os = <span class="keyword">new</span> ObjecInputStream(fileStream);</span><br><span class="line"></span><br><span class="line"><span class="comment">//写入对象</span></span><br><span class="line">Object one = os.readObject();</span><br><span class="line">Object two = os.writeObject();</span><br><span class="line">Object three = os.writeObject();</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭ObjectInputStream</span></span><br><span class="line">os.close();</span><br></pre></td></tr></table></figure><h3 id="接下来我们通过一个实例来进一步了解序列化的用法"><a href="#接下来我们通过一个实例来进一步了解序列化的用法" class="headerlink" title="接下来我们通过一个实例来进一步了解序列化的用法"></a>接下来我们通过一个实例来进一步了解序列化的用法</h3><p>代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GameCharacter</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> power;    </span><br><span class="line">    <span class="keyword">private</span> String type;   </span><br><span class="line">    <span class="keyword">private</span> Weapon weapon;  </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPower</span><span class="params">()</span> </span>&#123;       </span><br><span class="line">        <span class="keyword">return</span> power;    </span><br><span class="line">    &#125;   </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPower</span><span class="params">(<span class="keyword">int</span> power)</span> </span>&#123;       </span><br><span class="line">        <span class="keyword">this</span>.power = power;   </span><br><span class="line">    &#125;   </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getType</span><span class="params">()</span> </span>&#123;        </span><br><span class="line">        <span class="keyword">return</span> type;    </span><br><span class="line">    &#125;    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setType</span><span class="params">(String type)</span> </span>&#123;        </span><br><span class="line">        <span class="keyword">this</span>.type = type;   </span><br><span class="line">    &#125;    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Weapon <span class="title">getWeapon</span><span class="params">()</span> </span>&#123;        </span><br><span class="line">        <span class="keyword">return</span> weapon;    </span><br><span class="line">    &#125;    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWeapon</span><span class="params">(Weapon weapon)</span> </span>&#123;        </span><br><span class="line">        <span class="keyword">this</span>.weapon = weapon;    </span><br><span class="line">    &#125;   </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">useWeapon</span><span class="params">()</span></span>&#123;        </span><br><span class="line">        System.out.println(<span class="string">"user weapon"</span>);    </span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">     <span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;        </span><br><span class="line">         <span class="keyword">return</span> <span class="string">"GameCharacter&#123;"</span> +                </span><br><span class="line">         <span class="string">"power="</span> + power +               </span><br><span class="line">         <span class="string">", type='"</span> + type + <span class="string">'\''</span> +               </span><br><span class="line">         <span class="string">", weapon="</span> + weapon +               </span><br><span class="line">         <span class="string">'&#125;'</span>;   </span><br><span class="line">     &#125;   </span><br><span class="line">     </span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;       </span><br><span class="line">        GameCharacter gameCharacter = <span class="keyword">new</span> GameCharacter();                                gameCharacter.setPower(<span class="number">3</span>);        </span><br><span class="line">        gameCharacter.setType(<span class="string">"士兵"</span>);        </span><br><span class="line">        Weapon weapon = <span class="keyword">new</span> Weapon(<span class="number">1</span>,<span class="string">"长矛"</span>);                                                  gameCharacter.setWeapon(weapon);        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span> &#123;            </span><br><span class="line">            <span class="comment">//创建出FileOutputStream            </span></span><br><span class="line">            FileOutputStream fileStream = <span class="keyword">new</span> FileOutputStream(<span class="string">"d://MyGame.ser"</span>);            </span><br><span class="line">            <span class="comment">//创建ObjectOutputStream            </span></span><br><span class="line">            ObjectOutputStream os = <span class="keyword">new</span> ObjectOutputStream(fileStream);            </span><br><span class="line">            <span class="comment">//写入对象            </span></span><br><span class="line">            os.writeObject(gameCharacter);           </span><br><span class="line">            <span class="comment">//关闭ObjectOutputStream            </span></span><br><span class="line">            os.close();       </span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;            </span><br><span class="line">            e.printStackTrace();       </span><br><span class="line">        &#125;</span><br><span class="line">&#125;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Weapon</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;    </span><br><span class="line">    <span class="keyword">int</span> id;    </span><br><span class="line">    String name; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Weapon</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;        </span><br><span class="line">        <span class="keyword">this</span>.id = id;        </span><br><span class="line">        <span class="keyword">this</span>.name = name;    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ol><li><p>当对象被序列化时，被该对象引用的实例 变量也会被序列化。（也就是当保存gameCharacter对象时，所有的对象都会被保存），所以如果对象被实例化时，被该对象引用的实例变量也需要实现Serializable接口。否则会抛出下面这个异常：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/Serializable3.png" alt="Serializable3" title>                </div>                <div class="image-caption">Serializable3</div>            </figure></li><li><p>如果某实例变量不能或不应该被实例化，就把它标记为transient（瞬时）的。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/Serializable4.png" alt="Serializable4" title>                </div>                <div class="image-caption">Serializable4</div>            </figure><p>为什么有些变量不能被序列化？</p></li></ol><ul><li>可能是设计者忘记实现Serializable。</li><li>或者动态数据只可以在执行时求出而不能或不必储存。</li></ul><ol start="3"><li>VersionID: 序列化的识别（版本控制）<br>如果你将对象序列化，你必须有该类才能还原和使用该对象。但若你同时修改了该类会发生什么事情？假设你尝试把GameCharacter对象带回来，而非transient的变量type已经从String被改成int。这样会严重的违反java大的类型安全性。在对象被序列化之后类有了不同的serialVersionUID，则会还原失败。<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/Serializable5.png" alt="Serializable5" title>                </div>                <div class="image-caption">Serializable5</div>            </figure></li></ol><blockquote><p>会损害序列化的修改：</p><ul><li>删除实例变量</li><li>改变实例变量的类型</li><li>将非瞬时的实例变量该为瞬时的</li><li>改变类的继承层次</li><li>将类从可序列化改成不可序列化</li><li>将实例变量改成静态的</li></ul><p>通常不会有事的修改：</p><ul><li>加入新的实例变量（还原时会使用默认值）</li><li>在继承层次中加入新的类</li><li>从继承层次中删除类</li><li>改变类的继承层次</li><li>不会影响解序列化程序设定变量值的层次修改</li><li>将实例变量从瞬时改成非瞬时（会使用默认值）</li></ul></blockquote><p><strong>如果你认为类有可能会演化，就把版本识别ID放在类中</strong><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/Serializable6.png" alt="Serializable6" title>                </div>                <div class="image-caption">Serializable6</div>            </figure></p><p>因此解决方案就是把serialVersionUID放在class中，让类在演化过程中还维持相同的ID。</p><p>但这只会在你有很小心地维护类的变动才办得到！也就是你得要对带回旧对象的任何问题负起全责。</p><h2 id="文件输入输出"><a href="#文件输入输出" class="headerlink" title="文件输入输出"></a>文件输入输出</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如果你正在编写游戏，就得有存储和恢复游戏的功能。如果你编写的是创建图表的程序，也必须有存储/打开的功能。如果程序需要存储状态，有两种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;写入文件的序列化对象&lt;/li&gt;
&lt;li&gt;写入文本文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a h
      
    
    </summary>
    
      <category term="Java乐园" scheme="https://kyrie17.github.io/categories/Java%E4%B9%90%E5%9B%AD/"/>
    
    
      <category term="序列化" scheme="https://kyrie17.github.io/tags/%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Spring IoC容器浅析</title>
    <link href="https://kyrie17.github.io/2019/04/11/Spring%20IoC%E5%AE%B9%E5%99%A8%E6%B5%85%E6%9E%90/"/>
    <id>https://kyrie17.github.io/2019/04/11/Spring IoC容器浅析/</id>
    <published>2019-04-11T03:26:16.000Z</published>
    <updated>2019-09-18T06:29:03.742Z</updated>
    
    <content type="html"><![CDATA[<p>在Spring中，它会认为一切Java类都是资源，而资源都是Bean，容纳这些Bean的是Spring所提供的IoC容器（所以Spring是一种基于Bean的编程）。</p><h1 id="Spring-IoC概述"><a href="#Spring-IoC概述" class="headerlink" title="Spring IoC概述"></a>Spring IoC概述</h1><blockquote><p>控制反转是一种通过描述（在Java中可以是XML或者是注解）并通过第三方去产生或获取特定对象的方式。而在Spring中实现控制反转的是IoC容器，其实现方式是依赖注入。</p></blockquote><p>控制反转的思想在理解上是有一定的困难的，接下来我们通过一个现实中的例子来尝试解释一下：</p><p>现实系统的开发者是一个团队，团队由许多开发者组成。现在假设你在一个电商网站负责开发工作，你熟悉商品交易流程，但是对财务处理却不怎么熟悉，而团队中有些成员对于财务处理十分熟悉，在交易的过程中，商品交易流程需要调度财务的相关接口，才能得以实现，那么你期望的应该是：</p><ul><li>熟悉财务流程的成员开发对应的接口。</li><li>接口逻辑尽量简单，内部复杂的业务逻辑并不需要自己去了解，你只要通过简单的调用就能使用。</li><li>通过简单的描述就能获取这个接口实例，且描述应该尽量简单。</li></ul><p>到这里有一个事实需要注意，财务接口对象的创建并不是自己的行为，而是财务开发同事的行为，但也完全达到了你的要求，而在潜意识里你会觉得对象应该由你主动创建，但事实上这并不是你真实的需要，也许你对这一领域并不精通，这个时候可以把创建对象的主动权转交别人，这就是控制反转的概念。</p><p>这理念的一个坏处是理解上的困难，但是<strong>它最大的好处在于降低对象之间的耦合</strong>，在一个系统中有些类，具体如何实现并不需要去理解，只需要知道它有什么用就可以了。只是这里对象的产生依靠于IoC容器，而不是开发者主动的行为。</p><h1 id="Spring-IoC的原理实现"><a href="#Spring-IoC的原理实现" class="headerlink" title="Spring IoC的原理实现"></a>Spring IoC的原理实现</h1><p>原生的 JavaEE 技术中各个模块之间的联系较强，即<code>耦合度较高</code>。而 Spring 框架的核心–IoC（控制反转）很好的解决了这一问题。</p><p>接下来我们通过在web层创建业务层的一个类，讲述一下<strong>Spring IoC的原理实现</strong>。</p><ol><li><p>开始我们先直接通过UserService创建一个类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UserService us = <span class="keyword">new</span> UserService();</span><br></pre></td></tr></table></figure></li><li><p>但我们都知道这种方式不好，因为它没有面向接口编程，所以接下来我们选择面向接口编程：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UserService us = <span class="keyword">new</span> UserServiceImpl();</span><br></pre></td></tr></table></figure></li></ol><p>但由于我们在web层直接创建了接口的实现类，那这样业务层就和web层产生耦合了。这时候我们就需要提及ocp原则（开闭原则）了</p><blockquote><p>open-close原则：对程序扩展是open的，对修改程序代码是close的。（尽量不修改程序的源码，实现对程序的扩展）</p></blockquote><ol start="3"><li>我们可以想到使用一个设计模式：<strong>工厂模式</strong>。</li></ol><p>现在我们就可以通过工厂类来创建UserService的实例对象：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FactoryBean</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> UserService <span class="title">getUs</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p> 这样我们的接口和实现类就没有耦合了，但接口和工厂类就会产生耦合<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UserService us = FactoryBean.getUs();</span><br></pre></td></tr></table></figure></p><ol start="4"><li>那么这里我们就可以通过<strong>工厂+反射+配置文件</strong>来实现解耦合：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"us"</span> <span class="attr">class</span>=<span class="string">"com.Kyrie.UserServiceImpl"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FactoryBean</span>()</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getBean</span><span class="params">(String id)</span></span>&#123;</span><br><span class="line">        <span class="comment">//解析xml，找到class</span></span><br><span class="line">        <span class="comment">//反射</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们在getBean中传入一个id，那就会返回一个class，接着我们通过反射去生成我们一个实例化对象。</p><p>这就是Spring来完成解耦合的思想。</p><h1 id="IoC容器"><a href="#IoC容器" class="headerlink" title="IoC容器"></a>IoC容器</h1><p>通过上面我们知道了Spring IoC容器的作用，它可以容纳我们所开发的各种Bean，并且我们可以从中获取各种发布在Spring IoC容器里的Bean，并且通过描述可以得到它。</p><h2 id="IoC容器的设计"><a href="#IoC容器的设计" class="headerlink" title="IoC容器的设计"></a>IoC容器的设计</h2><p>Spring IoC容器的设计主要是基于<strong>Bean Factory</strong>和<strong>ApplicationContext</strong>两个接口，其中<br>ApplicationContext是Bean Factory的子接口之一，ApplicationContext对Bean Factory功能做了很多有用的拓展，所以大多数的工作场景下，都会使用ApplicationContext作为Spring IoC容器。</p><p>下图展示的是Spring相关的IoC容器接口的主要设计。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/SpringIoC1.jpg" alt="SpringIoC1" title>                </div>                <div class="image-caption">SpringIoC1</div>            </figure><p>我们可以清晰地看到BeanFactory位于设计的最底层，它提供了Spring IoC最底层的设计，所以我们来看看它的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> org.springframework.beans.factory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.BeansException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.core.ResolvableType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.lang.Nullable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BeanFactory</span> </span>&#123;</span><br><span class="line">    String FACTORY_BEAN_PREFIX = <span class="string">"&amp;"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// getBean()的多个方法用于获取配置给Spring IoC容器的Bean。</span></span><br><span class="line">    <span class="function">Object <span class="title">getBean</span><span class="params">(String var1)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line">    </span><br><span class="line">    &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(String var1, Class&lt;T&gt; var2)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function">Object <span class="title">getBean</span><span class="params">(String var1, Object... var2)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line">    </span><br><span class="line">    &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(Class&lt;T&gt; var1)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line">    </span><br><span class="line">    &lt;T&gt; <span class="function">T <span class="title">getBean</span><span class="params">(Class&lt;T&gt; var1, Object... var2)</span> <span class="keyword">throws</span> BeansException</span>;</span><br><span class="line">    </span><br><span class="line">    &lt;T&gt; <span class="function">ObjectProvider&lt;T&gt; <span class="title">getBeanProvider</span><span class="params">(Class&lt;T&gt; var1)</span></span>;</span><br><span class="line">    </span><br><span class="line">    &lt;T&gt; <span class="function">ObjectProvider&lt;T&gt; <span class="title">getBeanProvider</span><span class="params">(ResolvableType var1)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">containsBean</span><span class="params">(String var1)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// isSingleton用于判断是否单例</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">(String var1)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isPrototype</span><span class="params">(String var1)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isTypeMatch</span><span class="params">(String var1, ResolvableType var2)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 按Java类型匹配的方式</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">isTypeMatch</span><span class="params">(String var1, Class&lt;?&gt; var2)</span> <span class="keyword">throws</span> NoSuchBeanDefinitionException</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Nullable</span>    Class&lt;?&gt; getType(String var1) <span class="keyword">throws</span> NoSuchBeanDefinitionException;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//获取别名</span></span><br><span class="line">    String[] getAliases(String var1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们来认识一个ApplicationContext的子类–<strong>ClassPathXmlApplicationContex</strong>t，先创建一个applicationContext.xml文件：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span>       <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span>       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span>       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.Kyrie.ioc.demo1.UserServiceImpl"</span>&gt;</span>        </span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"李四"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>这里定义了一个Bean，这样Spring IoC在初始化的时候就能找到它，然后使用ClassPathXmlApplicationContext容器就可以将其初始化，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建工厂类</span></span><br><span class="line">BeanFactory beanFactory = <span class="keyword">new</span> XmlBeanFactory(<span class="keyword">new</span> ClassPathResource(<span class="string">"applicationContext.xml"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过工厂获得类</span></span><br><span class="line">UserService userService = (UserService) beanFactory.getBean(<span class="string">"userService"</span>);</span><br><span class="line"></span><br><span class="line">userService.sayHello();</span><br></pre></td></tr></table></figure></p><p>这样就会使用Application的实现类ClassPathXmlApplicationContext去初始化Spring IoC容器，然后开发者就可以通过IoC容器获得资源了。</p><h2 id="Spring-IoC容器的初始化和依赖注入"><a href="#Spring-IoC容器的初始化和依赖注入" class="headerlink" title="Spring IoC容器的初始化和依赖注入"></a>Spring IoC容器的初始化和依赖注入</h2><p>Bean的定义和初始化在Spring IoC容器中是两大步骤，它是先定义，然后<strong>初始化</strong>和<strong>依赖注入</strong>的。</p><h3 id="Bean的定义分为3步"><a href="#Bean的定义分为3步" class="headerlink" title="Bean的定义分为3步"></a>Bean的定义分为3步</h3><p>1.<strong>Resource定位</strong>，Spring IoC根据开发者的配置，进行资源定位。在Spring的开发中，通过XML或者注解都是十分常见的形式，定位的内容由开发者提供。<br>2.<strong>BeanDefinition的载入</strong>，这个时候只是将Resource定位到的信息，保存到Bean定义（BeanDefinition）中，此时并不会创建Bean的实例。<br>3.<strong>BeanDefinition的注册</strong>，这个过程就是将BeanDefinition的信息发布到Spring IoC中，要注意的是，此时仍旧没有对应的Bean实例创建。</p><h3 id="初始化和依赖注入"><a href="#初始化和依赖注入" class="headerlink" title="初始化和依赖注入"></a>初始化和依赖注入</h3><p>做完上述3步，Bean就在Spring IoC中被定义了，而没有被初始化。对于初始化和依赖注入，Spring Bean还有一个配置选项–lazy-init，其含义是是否初始化Spring Bean。在没有任何配置的情况下，它的默认值为default，实际值为false，也就是Spring IoC默认会初始化Bean。如果将其设置为true，那么只有我们使用Spring IoC容器的getBean方法获取它时，它才会进行Bean的初始化，完成依赖注入。</p><h2 id="Spring-Bean的生命周期"><a href="#Spring-Bean的生命周期" class="headerlink" title="Spring Bean的生命周期"></a>Spring Bean的生命周期</h2><p>生命周期主要是为了了解Spring IoC容器初始化和销毁Bean的过程，通过对它的学习就可以知道如何在初始化和销毁的时候加入自定义方法。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/SpringIoC2.jpg" alt="SpringIoC2" title>                </div>                <div class="image-caption">SpringIoC2</div>            </figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/SpringIoC3.png" alt="SpringIoC3" title>                </div>                <div class="image-caption">SpringIoC3</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在Spring中，它会认为一切Java类都是资源，而资源都是Bean，容纳这些Bean的是Spring所提供的IoC容器（所以Spring是一种基于Bean的编程）。&lt;/p&gt;
&lt;h1 id=&quot;Spring-IoC概述&quot;&gt;&lt;a href=&quot;#Spring-IoC概述&quot; cla
      
    
    </summary>
    
      <category term="Java乐园" scheme="https://kyrie17.github.io/categories/Java%E4%B9%90%E5%9B%AD/"/>
    
    
      <category term="Spring" scheme="https://kyrie17.github.io/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>选择Java接口还是抽象类</title>
    <link href="https://kyrie17.github.io/2019/03/30/%E9%80%89%E6%8B%A9Java%E6%8E%A5%E5%8F%A3%E8%BF%98%E6%98%AF%E6%8A%BD%E8%B1%A1%E7%B1%BB/"/>
    <id>https://kyrie17.github.io/2019/03/30/选择Java接口还是抽象类/</id>
    <published>2019-03-30T15:11:54.000Z</published>
    <updated>2019-09-18T06:28:45.767Z</updated>
    
    <content type="html"><![CDATA[<p>很多人有过这样的疑问：为什么有的地方必须使用接口而不是抽象类，而在另一些地方，又必须使用抽象类而不是接口呢？或者说，在考虑Java类的一般化问题时，很多人会在接口和抽象类之间犹豫不决，甚至随便选择一种。<br>  实际上接口和抽象类的选择不是随心所欲的。要理解接口和抽象类的选择原则，有两个概念很重要：对象的行为和对象的实现。如果一个实体可以有多种实现方式，则在设计实体行为的描述方式时，应当达到这样一个目标：在使用实体的时候，无需详细了解实体行为的实现方式。也就是说，要把对象的行为和对象的实现分离开来。既然Java的接口和抽象类都可以定义不提供具体实现的方法，在分离对象的行为和对象的实现时，到底应该使用接口还是使用抽象类呢？</p><h4 id="通过抽象类建立行为模型"><a href="#通过抽象类建立行为模型" class="headerlink" title="通过抽象类建立行为模型"></a>通过抽象类建立行为模型</h4><p>  在接口和抽象类的选择上，必须遵守这样一个原则：<strong>行为模型应该总是通过接口而不是抽象类定义</strong>。为了说明其原因，下面试着通过抽象类建立行为模型，看看会出现什么问题。</p><p>  假设要为销售部门设计一个软件，这个软件包含一个“发动机”（Motor）实体。显然无法在发动机对象中详细地描述发动机的方方面面，只能描述某些对当前软件来说重要的特征。至于发动机的哪些特征是重要的，则要与用户（销售部门）交流才能确定。<br>  销售部门的人要求每一个发动机都有一个称为马力的参数。对于他们来说，这是惟一值得关心的参数。基于这一判断，可以把发动机的行为定义为以下行为。<br>  <em>行为1：查询发动机的马力，发动机将返回一个表示马力的整数。</em><br>  虽然还不清楚发动机如何取得马力这个参数，但可以肯定发动机一定支持这个行为，而且这是所有发动机惟一值得关注的行为特征。这个行为特征既可以用接口定义，也可以用抽象类定义。为了说明用抽象类定义可能出现的问题，下面用抽象类建立发动机的行为模型，并用Java方法描述行为1，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> Motor&#123;</span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getHorsepower</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>  在Motor抽象类的基础上构造出多种具体实现，例如A型发动机、B型发动机等，再加上系统的其它部分，最后得到1.0版的软件并交付使用。一段时间过去了，要设计2.0版的软件。在评估2.0版软件需求的过程中，发现一小部分发动机是电池驱动的，而电池需要一定的充电时间。销售部门的人希望能够通过计算机查阅充电时间，并根据这一要求定义了一个新的行为。<br>  <em>行为2：查询电驱动发动机的充电时间，发动机将返回一个表示充电时间的整数。</em><br>  用Java方法来描述这个行为，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> BatteryPoweredMotor extends Motor&#123;</span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTimeToRecharge</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>  在销售部门的软件中，电驱动发动机也以类的形式实现，但这些类从BatteryPoweredMotor而不是Motor派生。这些改动加入到2.0版软件之后，销售部门很满意。随着业务的不断发展，不久之后光驱动的发动机出现了。销售部门要求光驱动发动机需要一定光能才能运转，光能以流明（Lumen）度量。这个信息对客户很重要，因为下雨或多云的天气里，某些光驱动发动机可能无法运转。销售部门要求为软件增加对光驱动发动机的支持，所以要定义一个新的行为。<br>  <em>行为3：查询光驱动发动机能够正常运转所需要的最小流明数，发动机返回一个整数。</em><br>  再定义一个抽象类并把行为3转换成Java方法，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> SolarPoweredMotor extends Motor&#123;</span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLumensToOperate</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>  SolarPoweredMotor和BatteryPoweredMotor都从Motor抽象类派生。在整个软件中，90%以上的代码以相同的方式对待所有的发动机。偶尔需要检查一下发动机是光驱动还是电驱动，使用instanceof实现，代码如下：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="keyword">instanceof</span> SolarPoweredMotor)&#123;...&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">instanceof</span> BatteryPoweredMotor)&#123;...&#125;</span><br></pre></td></tr></table></figure></p><p>  无论是哪种发动机，马力这个参数都很重要，所以在所有派生的抽象类（SolarPoweredMotor和BatteryPoweredMotor）中，getHorsepower()方法都有效。<br>  销售部门又有了一种新的发动机，它是一种既有电驱动又有光驱动的双重驱动发动机。光驱动和电驱动的行为本身没有变化，但新的发动机同时支持两种行为。在考虑如何定义新型的光电驱动发动机时，接口和抽象类的差别开始显示出来了。新的目标是在增加新型发动机的前提下尽量少改动代码。因为与光驱动发动机、电驱动发动机有关的代码已经过全面的测试，不存在已知的Bug。为了增加光电驱动发动机，要定义一个新的SolarBatteryPowered抽象类。如果让SolarBatteryPowered从Motor抽象类派生，SolarBatteryPowered将不支持针对光驱动发动机和电驱动发动机的instanceof操作。也就是说，如果查询一个光电驱动的发动机是光驱动的，还是电驱动的，得到的答案是：都不是。<br>  如果让SolarBatteryPowered从SolarPoweredMotor（或BatteryPoweredMotor）抽象类派生，类似的问题也会出现，SolarBatteryPowered将不支持针对BatteryPoweredMotor（或SolarPoweredMotor）的instanceof操作。从行为上看，光电驱动的发动机必须同时从两个抽象类派生，但Java语言不允许多重继承。之所以会出现这个问题，根本的原因在于使用抽象类不仅意味着定义特定的行为，而且意味着定义实现的模式。也就是说，应该定义一个发动机如何获得行为的模型，而不仅仅是声明发动机具有某一个行为。</p><h4 id="通过接口建立行为模型"><a href="#通过接口建立行为模型" class="headerlink" title="通过接口建立行为模型"></a>通过接口建立行为模型</h4><p>  如果用接口来建立行为模型，就可以避免隐含地规定实现模式。例如，前面的几个行为改用接口定义如下。<br>行为1：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> interface <span class="title">Motor</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getHorsepower</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>行为2：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> interface BatteryPoweredMotor extends <span class="title">Motor</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTimeToRecharge</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>行为3：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SolarPoweredMotor</span> <span class="keyword">extends</span> <span class="title">Motor</span></span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLumensToOperate</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>光电驱动的发动机可以描述为：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> DualPoweredMotor implements SolarPoweredMotor, BatteryPoweredMotor&#123;&#125;</span><br></pre></td></tr></table></figure></p><p>  DualPoweredMotor只继承行为定义，而不是行为的实现模式。</p><p>  在使用接口的同时仍旧可以使用抽象类，不过这时抽象类的作用是<strong>实现行为</strong>，而不是<strong>定义行为</strong>。只要实现行为的类遵从接口定义，即使它改变了父抽象类，也不用改变其它代码与之交互的方式。特别是对于公用的实现代码，抽象类有它的优点。抽象类能够保证实现的层次关系，避免代码重复。然而，即使在使用抽象类的场合，也不要忽视通过接口定义行为模型的原则。从实践的角度来看，如果依赖于抽象类来定义行为，往往导致过于复杂的继承关系，而通过接口定义行为能够更有效地分离行为与实现，为代码的维护和修改带来方便。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;很多人有过这样的疑问：为什么有的地方必须使用接口而不是抽象类，而在另一些地方，又必须使用抽象类而不是接口呢？或者说，在考虑Java类的一般化问题时，很多人会在接口和抽象类之间犹豫不决，甚至随便选择一种。&lt;br&gt;  实际上接口和抽象类的选择不是随心所欲的。要理解接口和抽象类的
      
    
    </summary>
    
      <category term="Java乐园" scheme="https://kyrie17.github.io/categories/Java%E4%B9%90%E5%9B%AD/"/>
    
    
  </entry>
  
  <entry>
    <title>Scanner</title>
    <link href="https://kyrie17.github.io/2019/03/30/Scanner/"/>
    <id>https://kyrie17.github.io/2019/03/30/Scanner/</id>
    <published>2019-03-30T14:07:34.000Z</published>
    <updated>2019-09-18T06:24:10.440Z</updated>
    
    <content type="html"><![CDATA[<p>上星期在蓝桥杯考场上发现一个之前没有注意到的问题：Scanner类中的nextInt()、next()、nextLine()方法的使用。<br>首先没有注意到：next()方法读取字符串的时候在遇到空格、换行符的时候都会结束截止（在这里读取数据的时候，就已经宣告我这道题解不出了。。）<br>比完赛后百度，原来可以用nextLine()，这样读取字符串遇到空格就不会截止，而是等到回车。于是就写了下面这段代码进行验证。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        sc.nextInt();</span><br><span class="line">        String s = sc.nextLine();</span><br><span class="line">        System.out.print(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>不过在输入第一个数字验证的时候呢出现了如下结果：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/Scanner1.png" alt="Scanner1" title>                </div>                <div class="image-caption">Scanner1</div>            </figure><p>输入字符串的机会都不给我。。</p><p>这时我猜想，可能是写入了一个空字符或者转义字符之类的。这个时候我们去看官方文档：</p><blockquote><p>nextInt(): it only reads the int value, nextInt() places the cursor in the same line after reading the input.</p><p>next(): read the input only till the space. It can’t read two words separated by space. Also, next() places the cursor in the same line after reading the input. </p><p>nextLine(): reads input including space between the words (that is, it reads till the end of line \n). Once the input is read, nextLine() positions the cursor in the next line.</p></blockquote><p>每一次读取过程是从光标位置开始的。所以，一开始那个程序当我们输入4并按下回车，由于nextInt()方法只读取数值而不会读取换行符，所以光标停在了4和\n之间，于是nextLine()方法将4后面的换行符给读掉了，所以造成字符串s是一个换行符。</p><p>为了完成最后的输入，程序应该这样写：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        sc.nextInt();</span><br><span class="line">        sc.nextLine();    <span class="comment">//读取掉数字后面的换行符</span></span><br><span class="line">        String s = sc.nextLine();</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>结果如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/Scanner2.png" alt="Scanner2" title>                </div>                <div class="image-caption">Scanner2</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;上星期在蓝桥杯考场上发现一个之前没有注意到的问题：Scanner类中的nextInt()、next()、nextLine()方法的使用。&lt;br&gt;首先没有注意到：next()方法读取字符串的时候在遇到空格、换行符的时候都会结束截止（在这里读取数据的时候，就已经宣告我这道题解不
      
    
    </summary>
    
      <category term="Java乐园" scheme="https://kyrie17.github.io/categories/Java%E4%B9%90%E5%9B%AD/"/>
    
    
  </entry>
  
  <entry>
    <title>学习新知识的心得体会</title>
    <link href="https://kyrie17.github.io/2019/03/17/%E5%AD%A6%E4%B9%A0%E6%96%B0%E7%9F%A5%E8%AF%86%E7%9A%84%E5%BF%83%E5%BE%97%E4%BD%93%E4%BC%9A/"/>
    <id>https://kyrie17.github.io/2019/03/17/学习新知识的心得体会/</id>
    <published>2019-03-17T03:15:14.000Z</published>
    <updated>2019-09-17T09:44:32.464Z</updated>
    
    <content type="html"><![CDATA[<p>看到一个大佬总结的经验，觉得很有道理，所以先码下来。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/learningskill.png" alt="learningskill" title>                </div>                <div class="image-caption">learningskill</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;看到一个大佬总结的经验，觉得很有道理，所以先码下来。&lt;/p&gt;
&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;o
      
    
    </summary>
    
      <category term="人生苦旅" scheme="https://kyrie17.github.io/categories/%E4%BA%BA%E7%94%9F%E8%8B%A6%E6%97%85/"/>
    
    
      <category term="learnSkill" scheme="https://kyrie17.github.io/tags/learnSkill/"/>
    
  </entry>
  
  <entry>
    <title>背包问题</title>
    <link href="https://kyrie17.github.io/2019/02/26/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    <id>https://kyrie17.github.io/2019/02/26/背包问题/</id>
    <published>2019-02-26T13:55:46.000Z</published>
    <updated>2019-09-18T06:24:37.360Z</updated>
    
    <content type="html"><![CDATA[<p>整理一下0-1背包、完全背包、多重背包问题。</p><h1 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h1><h2 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>01背包是在M件物品取出若干件放在空间为W的背包里，每件物品的体积为W1，W2至Wn，与之相对应的价值为P1,P2至Pn。（这是最基础的背包问题）</p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>在前n件物品中，选取若干件物品放入所剩空间为w的背包中的所能获得的最大价值。（实际上是对一件件物品选与不选的问题）<br>我们用f[i][j]表示在前 i 件物品中选择若干件放在已用空间为 j 的背包里所能获得的最大价值<br>对一个物体，只有两种情况：</p><ol><li>选：f[i][j] = f[i - 1][j - W[i]] + P[i]</li><li>不选：f[i][j] = f[i - 1][j]</li></ol><p>由此可以得到状态转移方程：<br><code>f[i][j] = max(f[i - 1][j - W[i]] + P[i], f[i - 1][j]);</code></p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> m 表示背包的容量</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> n 表示物品的个数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> w 表示物品所占空间</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> p 表示物品的价值</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[][] backpack01(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span>[] w,<span class="keyword">int</span>[] p)&#123;</span><br><span class="line">    <span class="comment">//f[i][v]表示前i件物品恰放入一个容量为m的背包可以获得的最大价值</span></span><br><span class="line">    <span class="keyword">int</span>[][] f = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>][m + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n + <span class="number">1</span>; i++)&#123;</span><br><span class="line">    f[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m + <span class="number">1</span>; j++)&#123;</span><br><span class="line">    f[<span class="number">0</span>][j] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n + <span class="number">1</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; m + <span class="number">1</span>; j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(w[i - <span class="number">1</span>] &lt;= j)&#123;<span class="comment">//物品所占空间小于剩余空间，w[i-1]中i-1是对应数组w中的取值，下面w[i-1]p[i-1]同理</span></span><br><span class="line">                <span class="keyword">if</span>(f[i - <span class="number">1</span>][j] &lt; f[i - <span class="number">1</span>][j - w[i - <span class="number">1</span>]] + p[i - <span class="number">1</span>])&#123;</span><br><span class="line">                    f[i][j] = f[i - <span class="number">1</span>][j - w[i - <span class="number">1</span>]] + p[i - <span class="number">1</span>];</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    f[i][j] = f[i - <span class="number">1</span>][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                f[i][j] = f[i - <span class="number">1</span>][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><p>完全背包问题跟01背包的区别是01背包每个物品只能选一次，总共就这几个，而完全背包问题是每个物品可以无限选，只要装得下。可以看成是有几种物品，每种都无限多个。</p><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>01背包在选第i个物品时，容积够用情况下，只有2种状态可选，放还是不放，找出最大价值的选择<br>而完全背包在选第i种物品时，容积够用情况下，可能有2种以上状态可选，放1个，或者2个，3个，或者不放。找出最大价值的选择<br>可以利用k = j/w[i]算出最多可以放几个，然后<strong>状态转移方程</strong>改为<code>f[i][j] = max(f[i - 1][j - k*w[m]] + k * p[i])</code> 从0到k遍历一遍求出最大值即可</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> m 表示背包的容量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n 表示物品的个数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> w 表示物品所占空间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> p 表示物品的价值</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line">    <span class="comment">//f[i][v]表示前i件物品恰放入一个容量为m的背包可以获得的最大价值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[][] backpack02(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span>[] w,<span class="keyword">int</span>[] p)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[][] f = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>][m + <span class="number">1</span>];</span><br><span class="line">        <span class="comment">//初始化边界</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n + <span class="number">1</span>; i++)&#123;</span><br><span class="line">            f[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m + <span class="number">1</span>; j++)&#123;</span><br><span class="line">            f[<span class="number">0</span>][j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n + <span class="number">1</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; m + <span class="number">1</span>; j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(w[i - <span class="number">1</span>] &lt;= j)&#123;</span><br><span class="line">                    <span class="keyword">int</span> k = j / w[i - <span class="number">1</span>];</span><br><span class="line">                    <span class="keyword">for</span>(<span class="keyword">int</span> t = <span class="number">0</span>; t &lt; k + <span class="number">1</span>; t++)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(f[i - <span class="number">1</span>][j - t * w[i - <span class="number">1</span>]] + t * p[i - <span class="number">1</span>] &gt; f[i][j])&#123;</span><br><span class="line">                            f[i][j] = f[i - <span class="number">1</span>][j - t * w[i - <span class="number">1</span>]] + t * p[i - <span class="number">1</span>];</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    f[i][j] = f[i - <span class="number">1</span>][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="多重背包"><a href="#多重背包" class="headerlink" title="多重背包"></a>多重背包</h2><h3 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h3><p>与“完全背包”相比，在每个物品的选取次数上给出了限定，即选取次数k不能无限的增大</p><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>其实与完全背包相似，只是k的限定条件发生了变化。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> m 表示背包的容量</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n 表示物品的个数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> w 表示物品所占空间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> p 表示物品的价值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> num 表示物品的数量</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line">    <span class="comment">//f[i][v]表示前i件物品恰放入一个容量为m的背包可以获得的最大价值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[][] backpack03(<span class="keyword">int</span> m,<span class="keyword">int</span> n,<span class="keyword">int</span>[] w,<span class="keyword">int</span>[] p,<span class="keyword">int</span>[] num)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[][] f = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>][m + <span class="number">1</span>];</span><br><span class="line">        <span class="comment">//初始化边界</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n + <span class="number">1</span>; i++)&#123;</span><br><span class="line">            f[i][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m + <span class="number">1</span>; j++)&#123;</span><br><span class="line">            f[<span class="number">0</span>][j] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n + <span class="number">1</span>; i++) &#123; <span class="comment">//遍历每个物品</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; m + <span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; (k &lt;= num[i - <span class="number">1</span>]) &amp;&amp; (k &gt;= <span class="number">0</span>); k++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (j &gt; k * w[i - <span class="number">1</span>]) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (f[i - <span class="number">1</span>][j - k * w[i - <span class="number">1</span>]] + k * p[i - <span class="number">1</span>] &gt; f[i][j]) &#123;</span><br><span class="line">                            f[i][j] = f[i - <span class="number">1</span>][j - k * w[i - <span class="number">1</span>]] + k * p[i - <span class="number">1</span>];</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> f;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;整理一下0-1背包、完全背包、多重背包问题。&lt;/p&gt;
&lt;h1 id=&quot;背包问题&quot;&gt;&lt;a href=&quot;#背包问题&quot; class=&quot;headerlink&quot; title=&quot;背包问题&quot;&gt;&lt;/a&gt;背包问题&lt;/h1&gt;&lt;h2 id=&quot;01背包&quot;&gt;&lt;a href=&quot;#01背包&quot; class
      
    
    </summary>
    
      <category term="Algorithms" scheme="https://kyrie17.github.io/categories/Algorithms/"/>
    
    
      <category term="动态规划" scheme="https://kyrie17.github.io/tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>Manacher算法</title>
    <link href="https://kyrie17.github.io/2019/02/13/Manacher%E7%AE%97%E6%B3%95/"/>
    <id>https://kyrie17.github.io/2019/02/13/Manacher算法/</id>
    <published>2019-02-13T04:42:20.000Z</published>
    <updated>2019-09-18T06:24:01.171Z</updated>
    
    <content type="html"><![CDATA[<p>查找一个字符串的最长回文子串的线性算法。</p><h1 id="Manacher算法"><a href="#Manacher算法" class="headerlink" title="Manacher算法"></a>Manacher算法</h1><p>部分转载自：<a href="http://blog.csdn.net/dyx404514/article/details/42061017" target="_blank" rel="noopener">http://blog.csdn.net/dyx404514/article/details/42061017</a></p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Manacher算法是查找一个字符串的最长回文子串的线性算法。</p><p>在介绍算法之前，首先介绍一下什么是回文串，所谓回文串，简单来说就是正着读和反着读都是一样的字符串，比如abba，noon等等，一个字符串的最长回文子串即为这个字符串的子串中，是回文串的最长的那个。</p><h2 id="Manacher算法的原理与实现"><a href="#Manacher算法的原理与实现" class="headerlink" title="Manacher算法的原理与实现"></a>Manacher算法的原理与实现</h2><p>下面介绍Manacher算法的原理与步骤。</p><p>首先，Manacher算法提供了一种巧妙地办法，将长度为奇数的回文串和长度为偶数的回文串一起考虑，具体做法是，在原字符串的每个相邻两个字符中间插入一个分隔符，同时在首尾也要添加一个分隔符，分隔符的要求是不在原串中出现，一般情况下可以用#号。下面举一个例子：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/Manacher1.png" alt="Manacher1" title>                </div>                <div class="image-caption">Manacher1</div>            </figure><ol><li><strong>Len数组简介与性质</strong></li></ol><p>Manacher算法用一个辅助数组Len[i]表示以字符T[i]为中心的最长回文字串的最右字符到T[i]的长度，比如以T[i]为中心的最长回文字串是T[l,r],那么Len[i]=r-i+1。</p><p>对于上面的例子，可以得出Len[i]数组为:</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/Manacher2.png" alt="Manacher2" title>                </div>                <div class="image-caption">Manacher2</div>            </figure><p>Len数组有一个性质，那就是Len[i]-1就是该回文子串在原字符串S中的长度，至于证明，首先在转换得到的字符串T中，所有的回文字串的长度都为奇数，那么对于以T[i]为中心的最长回文字串，其长度就为2*Len[i]-1,经过观察可知，T中所有的回文子串，其中分隔符的数量一定比其他字符的数量多1，也就是有Len[i]个分隔符，剩下Len[i]-1个字符来自原字符串，所以该回文串在原字符串中的长度就为Len[i]-1。</p><p>有了这个性质，那么原问题就转化为求所有的Len[i]。下面介绍如何在线性时间复杂度内求出所有的Len。</p><ol start="2"><li><strong>Len数组的计算</strong></li></ol><p>首先从左往右依次计算Len[i]，当计算Len[i]时，Len<a href="0&lt;=j&lt;i">j</a>已经计算完毕。设P为之前计算中最长回文子串的右端点的最大值，并且设取得这个最大值的位置为po，分两种情况：</p><p><em>第一种情况：i&lt;=P</em></p><p>那么找到i相对于po的对称位置，设为j，那么如果Len[j]&lt;P-i，如下图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/Manacher3.png" alt="Manacher3" title>                </div>                <div class="image-caption">Manacher3</div>            </figure><p>那么说明以j为中心的回文串一定在以po为中心的回文串的内部，且j和i关于位置po对称，由回文串的定义可知，一个回文串反过来还是一个回文串，所以以i为中心的回文串的长度至少和以j为中心的回文串一样，即Len[i]&gt;=Len[j]。因为Len[j]&lt;P-i,所以说i+Len[j]&lt;P。由对称性可知Len[i]=Len[j]。</p><p>如果Len[j]&gt;=P-i,由对称性，说明以i为中心的回文串可能会延伸到P之外，而大于P的部分我们还没有进行匹配，所以要从P+1位置开始一个一个进行匹配，直到发生失配，从而更新P和对应的po以及Len[i]。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/Manacher4.png" alt="Manacher4" title>                </div>                <div class="image-caption">Manacher4</div>            </figure><p><em>第二种情况: i&gt;P</em></p><p>如果i比P还要大，说明对于中点为i的回文串还一点都没有匹配，这个时候，就只能老老实实地一个一个匹配了，匹配完成后要更新P的位置和对应的po以及Len[i]。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/Manacher5.png" alt="Manacher5" title>                </div>                <div class="image-caption">Manacher5</div>            </figure><h2 id="时间复杂度分析"><a href="#时间复杂度分析" class="headerlink" title="时间复杂度分析"></a>时间复杂度分析</h2><p>Manacher算法的时间复杂度分析和Z算法类似，因为算法只有遇到还没有匹配的位置时才进行匹配，已经匹配过的位置不再进行匹配，所以对于T字符串中的每一个位置，只进行一次匹配，所以Manacher算法的总体时间复杂度为O(n)，其中n为T字符串的长度，由于T的长度事实上是S的两倍，所以时间复杂度依然是线性的。</p><p>下面是算法的实现，注意，为了避免更新P的时候导致越界，我们在字符串T的前增加一个特殊字符，比如说‘$’,所以算法中字符串是从1开始的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution2</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> String s;<span class="comment">//原字符串</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">char</span>[] temp;<span class="comment">//转换后的字符数组</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span>[] len;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">Manacher</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">s = str;</span><br><span class="line">ChangeToTemp();<span class="comment">// 将s转换为temp数组</span></span><br><span class="line">len = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span> * s.length() + <span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> max = <span class="number">0</span>;<span class="comment">//max为当前回文串最右边字符的最大值</span></span><br><span class="line"><span class="keyword">int</span> p0 = <span class="number">0</span>;<span class="comment">//p0为当前回文字符串的中间值</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">2</span> * s.length() + <span class="number">3</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(max &gt; i)</span><br><span class="line">len[i] = Math.min(max - i, len[<span class="number">2</span> * p0 - i]);<span class="comment">//在len[j]和max-i中取小值</span></span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">len[i] = <span class="number">1</span>;<span class="comment">//如果i&gt;max，要从头开始匹配</span></span><br><span class="line"><span class="keyword">while</span>((i - len[i]) &gt; <span class="number">0</span> &amp;&amp; (i + len[i]) &lt; <span class="number">2</span> * s.length() + <span class="number">3</span> &amp;&amp; temp[i - len[i]] == temp[i + len[i]])</span><br><span class="line">len[i]++;</span><br><span class="line"><span class="keyword">if</span>(len[i] + i &gt; max) &#123;<span class="comment">//若新计算的回文串右端点的位置大于max，就要更新p0和max的值</span></span><br><span class="line">max = len[i] + i;</span><br><span class="line">p0 = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出最长回文串</span></span><br><span class="line"><span class="keyword">int</span> lenth = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> center = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len.length; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(len[i] &gt; lenth) &#123;</span><br><span class="line">lenth = len[i];</span><br><span class="line">center = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s.substring((center - lenth) / <span class="number">2</span>, (center - <span class="number">1</span> + lenth) / <span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ChangeToTemp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">temp = <span class="keyword">new</span> <span class="keyword">char</span>[s.length() * <span class="number">2</span> + <span class="number">3</span>];</span><br><span class="line">temp[<span class="number">0</span>] = <span class="string">'$'</span>;<span class="comment">//为字符数组开头增加一个特殊字符，防止越界</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">temp[<span class="number">2</span> * i + <span class="number">1</span>] = <span class="string">'#'</span>;</span><br><span class="line">temp[<span class="number">2</span> * i + <span class="number">2</span>] = s.charAt(i);</span><br><span class="line">&#125;</span><br><span class="line">temp[<span class="number">2</span> * s.length() + <span class="number">1</span>] = <span class="string">'#'</span>;</span><br><span class="line">temp[<span class="number">2</span> * s.length() + <span class="number">2</span>] = <span class="string">'*'</span>;<span class="comment">//结尾加一个特殊字符，防止越界</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拓展"><a href="#拓展" class="headerlink" title="拓展"></a>拓展</h2><h3 id="中心扩展算法"><a href="#中心扩展算法" class="headerlink" title="中心扩展算法"></a>中心扩展算法</h3><p>马拉车算法是一个非同寻常的算法，在45分钟的编码时间内提出这个算法将会是一个不折不扣的挑战，这里我们也提供另一种算法：中心扩展算法。</p><p>事实上，只需使用恒定的空间，我们就可以在 O(n<sup>2</sup>) 的时间内解决这个问题。</p><p>我们观察到回文中心的两侧互为镜像。因此，回文可以从它的中心展开，并且只有 2n - 1 个这样的中心。</p><p>你可能会问，为什么会是 2n - 1 个，而不是 n 个中心？原因在于所含字母数为偶数的回文的中心可以处于两字母之间（例如 “abba” 的中心在两个 ‘b’ 之间）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">Class Solution&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">longestPalindrome</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s == <span class="keyword">null</span> || s.length() &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>, end = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> len1 = expandAroundCenter(s, i, i);</span><br><span class="line">            <span class="keyword">int</span> len2 = expandAroundCenter(s, i, i + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">int</span> len = Math.max(len1, len2);</span><br><span class="line">            <span class="keyword">if</span> (len &gt; end - start) &#123;</span><br><span class="line">                start = i - (len - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">                end = i + len / <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s.substring(start, end + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">expandAroundCenter</span><span class="params">(String s, <span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> L = left, R = right;</span><br><span class="line">        <span class="keyword">while</span> (L &gt;= <span class="number">0</span> &amp;&amp; R &lt; s.length() &amp;&amp; s.charAt(L) == s.charAt(R)) &#123;</span><br><span class="line">            L--;</span><br><span class="line">            R++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R - L - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度：O(n<sup>2</sup>)， 由于围绕中心来扩展回文会耗去 O(n) 的时间，所以总的复杂度为O(n<sup>2</sup>) 。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;查找一个字符串的最长回文子串的线性算法。&lt;/p&gt;
&lt;h1 id=&quot;Manacher算法&quot;&gt;&lt;a href=&quot;#Manacher算法&quot; class=&quot;headerlink&quot; title=&quot;Manacher算法&quot;&gt;&lt;/a&gt;Manacher算法&lt;/h1&gt;&lt;p&gt;部分转载自：&lt;a h
      
    
    </summary>
    
      <category term="Algorithms" scheme="https://kyrie17.github.io/categories/Algorithms/"/>
    
    
      <category term="字符串" scheme="https://kyrie17.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>滑动窗口</title>
    <link href="https://kyrie17.github.io/2019/02/13/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3/"/>
    <id>https://kyrie17.github.io/2019/02/13/滑动窗口/</id>
    <published>2019-02-13T02:53:29.000Z</published>
    <updated>2019-09-18T06:24:43.242Z</updated>
    
    <content type="html"><![CDATA[<p>滑动窗口是数组/字符串问题中常用的抽象概念。今天我们通过一道算法题目来理解一下滑动窗口。</p><h1 id="滑动窗口"><a href="#滑动窗口" class="headerlink" title="滑动窗口"></a>滑动窗口</h1><p>滑动窗口是数组/字符串问题中常用的抽象概念。今天我们通过一道算法题目来理解一下滑动窗口。</p><h2 id="经典实例"><a href="#经典实例" class="headerlink" title="经典实例"></a>经典实例</h2><p>给定一个字符串，请你找出其中不含有重复字符的最长子串的长度。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;abcabcbb&quot;</span><br><span class="line">输出: 3 </span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</span><br></pre></td></tr></table></figure></p><h3 id="暴力算法"><a href="#暴力算法" class="headerlink" title="暴力算法"></a>暴力算法</h3><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><p>逐个检查所有的子字符串，看它是否不含有重复的字符。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.length();</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">                <span class="keyword">if</span> (allUnique(s, i, j)) ans = Math.max(ans, j - i);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">allUnique</span><span class="params">(String s, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">        Set&lt;Character&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt; end; i++) &#123;</span><br><span class="line">            Character ch = s.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (set.contains(ch)) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            set.add(ch);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其时间复杂度为O(n<sup>3</sup>)，在暴力法中，我们会反复检查一个子字符串是否含有有重复的字符，但这是没有必要的。如果从索引 i 到 j−1 之间的子字符串 s<sub>ij</sub>已经被检查为没有重复字符。我们只需要检查 s[j] 对应的字符是否已经存在于子字符串 s<sub>ij</sub> 中。</p><h3 id="滑动窗口-1"><a href="#滑动窗口-1" class="headerlink" title="滑动窗口"></a>滑动窗口</h3><h4 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h4><p> 窗口通常是在数组/字符串中由开始和结束索引定义的一系列元素的集合，即 [i, j)（左闭，右开）。而滑动窗口是可以将两个边界向某一方向“滑动”的窗口。例如，我们将 [i, j) 向右滑动 1 个元素，则它将变为 [i+1, j+1)（左闭，右开）。</p><p>通过使用 HashSet 作为滑动窗口，我们可以用 O(1)的时间来完成对字符是否在当前的子字符串中的检查。我们使用 HashSet 将字符存储在当前窗口 [i, j)（最初 j = i）中。 然后我们向右侧滑动索引 j，如果它不在 HashSet 中，我们会继续滑动 j。直到 s[j] 已经存在于 HashSet 中。此时，我们找到的没有重复字符的最长子字符串将会以索引i 开头。如果我们对所有的 i 这样做，就可以得到答案。</p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.length();</span><br><span class="line">        Set&lt;Character&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>, i = <span class="number">0</span>, j = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &lt; n &amp;&amp; j &lt; n) &#123;    <span class="comment">//滑动窗口</span></span><br><span class="line">            <span class="comment">// try to extend the range [i, j]</span></span><br><span class="line">            <span class="keyword">if</span> (!set.contains(s.charAt(j)))&#123;</span><br><span class="line">                set.add(s.charAt(j++));</span><br><span class="line">                ans = Math.max(ans, j - i);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                set.remove(s.charAt(i++));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其时间复杂度为O(2n) = O(n)，事实上，它可以被进一步优化为仅需要 n 个步骤。我们可以定义字符到索引的映射，而不是使用集合来判断一个字符是否存在。 当我们找到重复的字符时，我们可以立即跳过该窗口。</p><h3 id="优化后的滑动窗口"><a href="#优化后的滑动窗口" class="headerlink" title="优化后的滑动窗口"></a>优化后的滑动窗口</h3><h4 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h4><p>如果 s[j] 在 [i, j) 范围内有与 j’重复的字符，我们不需要逐渐增加 i 。 我们可以直接跳过 [i，j’]范围内的所有元素，并将 i 变为 j’ + 1。</p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthOfLongestSubstring</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> n = s.length(), ans = <span class="number">0</span>;</span><br><span class="line">        Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(); <span class="comment">// current index of character</span></span><br><span class="line">        <span class="comment">// try to extend the range [i, j]</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>, i = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (map.containsKey(s.charAt(j))) &#123;</span><br><span class="line">                i = Math.max(map.get(s.charAt(j)), i);</span><br><span class="line">            &#125;</span><br><span class="line">            ans = Math.max(ans, j - i + <span class="number">1</span>);</span><br><span class="line">            map.put(s.charAt(j), j + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其时间复杂度为O(n)。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;滑动窗口是数组/字符串问题中常用的抽象概念。今天我们通过一道算法题目来理解一下滑动窗口。&lt;/p&gt;
&lt;h1 id=&quot;滑动窗口&quot;&gt;&lt;a href=&quot;#滑动窗口&quot; class=&quot;headerlink&quot; title=&quot;滑动窗口&quot;&gt;&lt;/a&gt;滑动窗口&lt;/h1&gt;&lt;p&gt;滑动窗口是数组/字符
      
    
    </summary>
    
      <category term="Algorithms" scheme="https://kyrie17.github.io/categories/Algorithms/"/>
    
    
      <category term="字符串" scheme="https://kyrie17.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>理解Java的多态性</title>
    <link href="https://kyrie17.github.io/2019/02/12/%E7%90%86%E8%A7%A3java%E7%9A%84%E5%A4%9A%E6%80%81%E6%80%A7/"/>
    <id>https://kyrie17.github.io/2019/02/12/理解java的多态性/</id>
    <published>2019-02-12T03:09:59.000Z</published>
    <updated>2019-09-18T06:24:49.249Z</updated>
    
    <content type="html"><![CDATA[<p>运行时多态性是面向对象程序设计代码重用的一个最强大机制，动态性的概念也可以被说成“一个接口，多个方法”。Java实现运行时多态性的基础是动态方法调度，它是一种在运行时而不是在编译期调用重载方法的机制。</p><h1 id="理解java的多态性"><a href="#理解java的多态性" class="headerlink" title="理解java的多态性"></a>理解java的多态性</h1><p>参考自：<a href="https://blog.csdn.net/thinkGhoster/article/details/2307001" target="_blank" rel="noopener">https://blog.csdn.net/thinkGhoster/article/details/2307001</a></p><h2 id="经典实例"><a href="#经典实例" class="headerlink" title="经典实例"></a>经典实例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">         <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(D obj)</span></span>&#123;</span><br><span class="line">                <span class="keyword">return</span> (<span class="string">"A and D"</span>);</span><br><span class="line">         &#125; </span><br><span class="line">         <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(A obj)</span></span>&#123;</span><br><span class="line">                <span class="keyword">return</span> (<span class="string">"A and A"</span>);</span><br><span class="line">         &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line">         <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(B obj)</span></span>&#123;</span><br><span class="line">                <span class="keyword">return</span> (<span class="string">"B and B"</span>);</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="function"><span class="keyword">public</span> String <span class="title">show</span><span class="params">(A obj)</span></span>&#123;</span><br><span class="line">                <span class="keyword">return</span> (<span class="string">"B and A"</span>);</span><br><span class="line">         &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">B</span></span>&#123;&#125; </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> <span class="keyword">extends</span> <span class="title">B</span></span>&#123;&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        A a1 = <span class="keyword">new</span> A();</span><br><span class="line">        A a2 = <span class="keyword">new</span> B();</span><br><span class="line">        B b = <span class="keyword">new</span> B();</span><br><span class="line">        C c = <span class="keyword">new</span> C();</span><br><span class="line">        D d = <span class="keyword">new</span> D();</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"1--"</span> + a1.show(b));</span><br><span class="line">        System.out.println(<span class="string">"2--"</span> + a1.show(c));</span><br><span class="line">        System.out.println(<span class="string">"3--"</span> + a1.show(d));</span><br><span class="line">        System.out.println(<span class="string">"4--"</span> + a2.show(b));</span><br><span class="line">        System.out.println(<span class="string">"5--"</span> + a2.show(c));</span><br><span class="line">        System.out.println(<span class="string">"6--"</span> + a2.show(d));</span><br><span class="line">        System.out.println(<span class="string">"7--"</span> + b.show(b));</span><br><span class="line">        System.out.println(<span class="string">"8--"</span> + b.show(c));</span><br><span class="line">        System.out.println(<span class="string">"9--"</span> + b.show(d));      </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1--A and A</span><br><span class="line">2--A and A</span><br><span class="line">3--A and D</span><br><span class="line">4--B and A</span><br><span class="line">5--B and A</span><br><span class="line">6--A and D</span><br><span class="line">7--B and B</span><br><span class="line">8--B and B</span><br><span class="line">9--A and D</span><br></pre></td></tr></table></figure></p><h2 id="我们先来复习一下多态性"><a href="#我们先来复习一下多态性" class="headerlink" title="我们先来复习一下多态性"></a>我们先来复习一下多态性</h2><p>运行时多态性是面向对象程序设计代码重用的一个最强大机制，动态性的概念也可以被说成“一个接口，多个方法”。Java实现运行时多态性的基础是动态方法调度，它是一种在运行时而不是在编译期调用重载方法的机制。</p><p>方法的重写（Overriding）和重载（Overloading）是Java多态性的不同表现。重写（Overriding）是父类与子类之间多态性的一种表现，重载（Overloading）是一个类中多态性的一种表现。如果在子类中定义某方法与其父类有相同的名称和参数，我们说该方法被重写(Overriding)。子类的对象使用这个方法时，将调用子类中的定义，对它而言，父类中的定义如同被“屏蔽”了。如果在一个类中定义了多个同名的方法，它们或有不同的参数个数或有不同的参数类型，则称为方法的重载(Overloading)。重载（Overloading）的方法是可以改变返回值的类型。</p><p><strong>当超类对象引用变量引用子类对象时，是被引用对象的类型而不是引用变量的类型决定了调用谁的成员方法，但是这个被调用的方法必须是在超类中定义过的，也就是说被子类覆盖的方法。</strong></p><h2 id="分析例题"><a href="#分析例题" class="headerlink" title="分析例题"></a>分析例题</h2><p>例题实际上涉及到了方法调用的优先问题：</p><p><em>this.show(O)、super.show(O)、this.show((super)O)、super.show((super)O).</em></p><p>我们看看 4 – a2.show(b)。a2是一个引用变量，类型是A，则this是a2，b是B的一个实例，于是它到类A里面找show(B obj)方法，没有找到，于是到A的super(超类)找，而A没有超类，因此转到第三优先级this.show((super)O)，this仍然是a2，这里O为B，(super)O即(super)B即A，因此它到类A里面找show(A obj)的方法，类A有这个方法，但是由于a2引用的是类B的一个对象，B覆盖了A的show(A obj)方法，因此最终锁定到类B的show(A obj)，输出为”B and A”。</p><p>再看看 8 – b.show(c)。b是一个引用变量，类型为B，则this为b，c是C的一个实例，于是它到类B找show(C obj)方法，没有找到，转而到B的超类A里面找，A里面也没有，因此也转到第三优先级this.show((super)O)，this为b，O为C，(super)O即(super)C即B，因此它到B里面找show(B obj)方法，找到了，由于b引用的是类B的一个对象，因此直接锁定到类B的show(B obj)，输出为”B and B”。</p><p>按照上面的方法，可以正确得到其他的结果。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;运行时多态性是面向对象程序设计代码重用的一个最强大机制，动态性的概念也可以被说成“一个接口，多个方法”。Java实现运行时多态性的基础是动态方法调度，它是一种在运行时而不是在编译期调用重载方法的机制。&lt;/p&gt;
&lt;h1 id=&quot;理解java的多态性&quot;&gt;&lt;a href=&quot;#理解
      
    
    </summary>
    
      <category term="Java乐园" scheme="https://kyrie17.github.io/categories/Java%E4%B9%90%E5%9B%AD/"/>
    
    
      <category term="多态" scheme="https://kyrie17.github.io/tags/%E5%A4%9A%E6%80%81/"/>
    
  </entry>
  
</feed>
